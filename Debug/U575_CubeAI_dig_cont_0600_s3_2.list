
U575_CubeAI_dig_cont_0600_s3_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b8  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000a5a0c  0800a600  0800a600  0001a600  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080b000c  080b000c  000c000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080b0014  080b0014  000c0014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080b0018  080b0018  000c0018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001cec  20000000  080b001c  000d0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002be75  20001d00  080b1d08  000d1d00  2**5
                  ALLOC
  8 ._user_heap_stack 00001003  2002db75  080b1d08  000ddb75  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000d1cec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016be7  00000000  00000000  000d1d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b6c  00000000  00000000  000e8909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001118  00000000  00000000  000eb478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ff8  00000000  00000000  000ec590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034578  00000000  00000000  000ed588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016590  00000000  00000000  00121b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014de77  00000000  00000000  00138090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00285f07  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c38  00000000  00000000  00285f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20001d00 	.word	0x20001d00
 8000250:	00000000 	.word	0x00000000
 8000254:	0800a5d4 	.word	0x0800a5d4

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20001d04 	.word	0x20001d04
 8000270:	0800a5d4 	.word	0x0800a5d4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b0c2      	sub	sp, #264	; 0x108
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buf[100];
	int buf_len = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fd56 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f972 	bl	800088c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005a8:	f000 f9cc 	bl	8000944 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fa82 	bl	8000ab4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 fa34 	bl	8000a1c <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 80005b4:	f000 f9f8 	bl	80009a8 <MX_ICACHE_Init>
  MX_CRC_Init();
 80005b8:	f000 f9d4 	bl	8000964 <MX_CRC_Init>
  MX_TIM16_Init();
 80005bc:	f000 fa08 	bl	80009d0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  __HAL_RCC_CRC_CLK_ENABLE();	/* 启用CRC IP时钟以使用神经网络运行时�?? */
 80005c0:	4ba5      	ldr	r3, [pc, #660]	; (8000858 <main+0x2c4>)
 80005c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c6:	4aa4      	ldr	r2, [pc, #656]	; (8000858 <main+0x2c4>)
 80005c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80005d0:	4ba1      	ldr	r3, [pc, #644]	; (8000858 <main+0x2c4>)
 80005d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80005da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80005ec:	681b      	ldr	r3, [r3, #0]

  HAL_TIM_Base_Start(&htim16);	/* 打开计时�?? */
 80005ee:	489b      	ldr	r0, [pc, #620]	; (800085c <main+0x2c8>)
 80005f0:	f005 f9e0 	bl	80059b4 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2104      	movs	r1, #4
 80005f8:	4899      	ldr	r0, [pc, #612]	; (8000860 <main+0x2cc>)
 80005fa:	f001 f953 	bl	80018a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	4898      	ldr	r0, [pc, #608]	; (8000864 <main+0x2d0>)
 8000604:	f001 f94e 	bl	80018a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4896      	ldr	r0, [pc, #600]	; (8000868 <main+0x2d4>)
 800060e:	f001 f949 	bl	80018a4 <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);

  /* 初始化推�?? */
  aiInit();
 8000612:	f000 fb05 	bl	8000c20 <aiInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// 填充输入缓冲�?? */
	for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800061c:	e014      	b.n	8000648 <main+0xb4>
	{
	  ((ai_float *)in_data)[i] = data[i];
 800061e:	4a93      	ldr	r2, [pc, #588]	; (800086c <main+0x2d8>)
 8000620:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000624:	4413      	add	r3, r2
 8000626:	7819      	ldrb	r1, [r3, #0]
 8000628:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4a90      	ldr	r2, [pc, #576]	; (8000870 <main+0x2dc>)
 8000630:	4413      	add	r3, r2
 8000632:	ee07 1a90 	vmov	s15, r1
 8000636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800063a:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 800063e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000642:	3301      	adds	r3, #1
 8000644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000648:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800064c:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8000650:	d3e5      	bcc.n	800061e <main+0x8a>
	}

	/* 获取当前时间�?? */
	timestamp = htim16.Instance->CNT;
 8000652:	4b82      	ldr	r3, [pc, #520]	; (800085c <main+0x2c8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000658:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	/* 运行推理 */
	aiRun(in_data, out_data);
 800065c:	4985      	ldr	r1, [pc, #532]	; (8000874 <main+0x2e0>)
 800065e:	4884      	ldr	r0, [pc, #528]	; (8000870 <main+0x2dc>)
 8000660:	f000 fb22 	bl	8000ca8 <aiRun>

	/* 获取当前时间�? */
	timestamp1 = htim16.Instance->CNT;
 8000664:	4b7d      	ldr	r3, [pc, #500]	; (800085c <main+0x2c8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if(timestamp > timestamp1)
 800066e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000676:	429a      	cmp	r2, r3
 8000678:	d90a      	bls.n	8000690 <main+0xfc>
		timestamp1 = timestamp1 + 65535 - timestamp;
 800067a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800067e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000688:	33ff      	adds	r3, #255	; 0xff
 800068a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800068e:	e006      	b.n	800069e <main+0x10a>
	else
		timestamp1 = timestamp1 - timestamp;
 8000690:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	/* 输出推理时间 (微秒) */
	buf_len = sprintf(buf,
 800069e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006a2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80006a6:	4974      	ldr	r1, [pc, #464]	; (8000878 <main+0x2e4>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f009 fae1 	bl	8009c70 <siprintf>
 80006ae:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
							"duration: %lu us\r\n",
							timestamp1);
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80006b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	486f      	ldr	r0, [pc, #444]	; (800087c <main+0x2e8>)
 80006c0:	f005 fb5a 	bl	8005d78 <HAL_UART_Transmit>


	/* 读取神经网络的输�?? */
	for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80006ca:	e012      	b.n	80006f2 <main+0x15e>
		y_val[i] = ((float *)out_data)[i];
 80006cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4a68      	ldr	r2, [pc, #416]	; (8000874 <main+0x2e0>)
 80006d4:	4413      	add	r3, r2
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80006e2:	443b      	add	r3, r7
 80006e4:	3bb4      	subs	r3, #180	; 0xb4
 80006e6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80006e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80006ec:	3301      	adds	r3, #1
 80006ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80006f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80006f6:	2b09      	cmp	r3, #9
 80006f8:	dde8      	ble.n	80006cc <main+0x138>

	min = y_val[0];
 80006fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	max = y_val[0];
 8000700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000702:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8000706:	2300      	movs	r3, #0
 8000708:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800070c:	e038      	b.n	8000780 <main+0x1ec>
	{
		if (y_val[i] < min)
 800070e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000718:	443b      	add	r3, r7
 800071a:	3bb4      	subs	r3, #180	; 0xb4
 800071c:	edd3 7a00 	vldr	s15, [r3]
 8000720:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8000724:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	dd09      	ble.n	8000742 <main+0x1ae>
			min = y_val[i];
 800072e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8000738:	443b      	add	r3, r7
 800073a:	3bb4      	subs	r3, #180	; 0xb4
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		if (y_val[i] > max)
 8000742:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800074c:	443b      	add	r3, r7
 800074e:	3bb4      	subs	r3, #180	; 0xb4
 8000750:	edd3 7a00 	vldr	s15, [r3]
 8000754:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 8000758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000760:	d509      	bpl.n	8000776 <main+0x1e2>
			max = y_val[i];
 8000762:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800076c:	443b      	add	r3, r7
 800076e:	3bb4      	subs	r3, #180	; 0xb4
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8000776:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800077a:	3301      	adds	r3, #1
 800077c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000780:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000784:	2b09      	cmp	r3, #9
 8000786:	ddc2      	ble.n	800070e <main+0x17a>
	}

	Radius = max - min;
 8000788:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 800078c:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8000790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000794:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

	for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i ++)
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800079e:	e055      	b.n	800084c <main+0x2b8>
	{
		y_vall[i] = (y_val[i] - min) / Radius;
 80007a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80007aa:	443b      	add	r3, r7
 80007ac:	3bb4      	subs	r3, #180	; 0xb4
 80007ae:	ed93 7a00 	vldr	s14, [r3]
 80007b2:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 80007b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80007ba:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80007be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80007cc:	443b      	add	r3, r7
 80007ce:	3bdc      	subs	r3, #220	; 0xdc
 80007d0:	edc3 7a00 	vstr	s15, [r3]

		y_valll[i] = (int)(y_vall[i]*1000*100);
 80007d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80007de:	443b      	add	r3, r7
 80007e0:	3bdc      	subs	r3, #220	; 0xdc
 80007e2:	edd3 7a00 	vldr	s15, [r3]
 80007e6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000880 <main+0x2ec>
 80007ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ee:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000884 <main+0x2f0>
 80007f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007fa:	ee17 1a90 	vmov	r1, s15
 80007fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000802:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000806:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800080a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		buf_len = sprintf(buf,
 800080e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000816:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800081a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800081e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000822:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000826:	4918      	ldr	r1, [pc, #96]	; (8000888 <main+0x2f4>)
 8000828:	f009 fa22 	bl	8009c70 <siprintf>
 800082c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
								"number: %d  output: %6d\r\n",
								i,
								y_valll[i]);
		HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8000830:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000834:	b29a      	uxth	r2, r3
 8000836:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <main+0x2e8>)
 800083e:	f005 fa9b 	bl	8005d78 <HAL_UART_Transmit>
	for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i ++)
 8000842:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000846:	3301      	adds	r3, #1
 8000848:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800084c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000850:	2b09      	cmp	r3, #9
 8000852:	dda5      	ble.n	80007a0 <main+0x20c>
	for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8000854:	e6df      	b.n	8000616 <main+0x82>
 8000856:	bf00      	nop
 8000858:	46020c00 	.word	0x46020c00
 800085c:	20001d40 	.word	0x20001d40
 8000860:	42021800 	.word	0x42021800
 8000864:	42020800 	.word	0x42020800
 8000868:	42020400 	.word	0x42020400
 800086c:	20000000 	.word	0x20000000
 8000870:	2002bc20 	.word	0x2002bc20
 8000874:	2002da20 	.word	0x2002da20
 8000878:	0800a600 	.word	0x0800a600
 800087c:	20001d8c 	.word	0x20001d8c
 8000880:	447a0000 	.word	0x447a0000
 8000884:	42c80000 	.word	0x42c80000
 8000888:	0800a614 	.word	0x0800a614

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09e      	sub	sp, #120	; 0x78
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	2260      	movs	r2, #96	; 0x60
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f009 f8ef 	bl	8009a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80008b4:	f001 f83e 	bl	8001934 <HAL_PWREx_ControlVoltageScaling>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80008be:	f000 fa37 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008c2:	2310      	movs	r3, #16
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008ca:	2310      	movs	r3, #16
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80008ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008d8:	2301      	movs	r3, #1
 80008da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008e4:	2350      	movs	r3, #80	; 0x50
 80008e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4618      	mov	r0, r3
 8000902:	f001 f909 	bl	8001b18 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800090c:	f000 fa10 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	231f      	movs	r3, #31
 8000912:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2303      	movs	r3, #3
 8000916:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	2104      	movs	r1, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f001 ffc9 	bl	80028c4 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000938:	f000 f9fa 	bl	8000d30 <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3778      	adds	r7, #120	; 0x78
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000948:	f001 f8c6 	bl	8001ad8 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800094c:	f001 f8d4 	bl	8001af8 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000950:	2002      	movs	r0, #2
 8000952:	f001 f871 	bl	8001a38 <HAL_PWREx_ConfigSupply>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800095c:	f000 f9e8 	bl	8000d30 <Error_Handler>
  }
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_CRC_Init+0x3c>)
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <MX_CRC_Init+0x40>)
 800096c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000970:	2200      	movs	r2, #0
 8000972:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000976:	2200      	movs	r2, #0
 8000978:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_CRC_Init+0x3c>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000988:	2201      	movs	r2, #1
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_CRC_Init+0x3c>)
 800098e:	f000 fcc7 	bl	8001320 <HAL_CRC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000998:	f000 f9ca 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20001d1c 	.word	0x20001d1c
 80009a4:	40023000 	.word	0x40023000

080009a8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 ff91 	bl	80018d4 <HAL_ICACHE_ConfigAssociativityMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80009b8:	f000 f9ba 	bl	8000d30 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80009bc:	f000 ffaa 	bl	8001914 <HAL_ICACHE_Enable>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80009c6:	f000 f9b3 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_TIM16_Init+0x44>)
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <MX_TIM16_Init+0x48>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 159;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_TIM16_Init+0x44>)
 80009dc:	229f      	movs	r2, #159	; 0x9f
 80009de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_TIM16_Init+0x44>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_TIM16_Init+0x44>)
 80009e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_TIM16_Init+0x44>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_TIM16_Init+0x44>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_TIM16_Init+0x44>)
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_TIM16_Init+0x44>)
 8000a02:	f004 ff7f 	bl	8005904 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000a0c:	f000 f990 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20001d40 	.word	0x20001d40
 8000a18:	40014400 	.word	0x40014400

08000a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <MX_USART1_UART_Init+0x94>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a64:	4811      	ldr	r0, [pc, #68]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a66:	f005 f937 	bl	8005cd8 <HAL_UART_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a70:	f000 f95e 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a78:	f005 fdb4 	bl	80065e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a82:	f000 f955 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a8a:	f005 fde9 	bl	8006660 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a94:	f000 f94c 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_USART1_UART_Init+0x90>)
 8000a9a:	f005 fd6a 	bl	8006572 <HAL_UARTEx_DisableFifoMode>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa4:	f000 f944 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20001d8c 	.word	0x20001d8c
 8000ab0:	40013800 	.word	0x40013800

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ad0:	4a4e      	ldr	r2, [pc, #312]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ada:	4b4c      	ldr	r3, [pc, #304]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aee:	4a47      	ldr	r2, [pc, #284]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000af8:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b06:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b0c:	4a3f      	ldr	r2, [pc, #252]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b16:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b39      	ldr	r3, [pc, #228]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b2a:	4a38      	ldr	r2, [pc, #224]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b34:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <MX_GPIO_Init+0x158>)
 8000b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2104      	movs	r1, #4
 8000b46:	4832      	ldr	r0, [pc, #200]	; (8000c10 <MX_GPIO_Init+0x15c>)
 8000b48:	f000 feac 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	4830      	ldr	r0, [pc, #192]	; (8000c14 <MX_GPIO_Init+0x160>)
 8000b52:	f000 fea7 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	21a0      	movs	r1, #160	; 0xa0
 8000b5a:	482f      	ldr	r0, [pc, #188]	; (8000c18 <MX_GPIO_Init+0x164>)
 8000b5c:	f000 fea2 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <MX_GPIO_Init+0x168>)
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4827      	ldr	r0, [pc, #156]	; (8000c14 <MX_GPIO_Init+0x160>)
 8000b76:	f000 fcbd 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4822      	ldr	r0, [pc, #136]	; (8000c18 <MX_GPIO_Init+0x164>)
 8000b90:	f000 fcb0 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b94:	2304      	movs	r3, #4
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4819      	ldr	r0, [pc, #100]	; (8000c10 <MX_GPIO_Init+0x15c>)
 8000bac:	f000 fca2 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4813      	ldr	r0, [pc, #76]	; (8000c14 <MX_GPIO_Init+0x160>)
 8000bc8:	f000 fc94 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_GPIO_Init+0x164>)
 8000be4:	f000 fc86 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <MX_GPIO_Init+0x164>)
 8000c00:	f000 fc78 	bl	80014f4 <HAL_GPIO_Init>

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	46020c00 	.word	0x46020c00
 8000c10:	42021800 	.word	0x42021800
 8000c14:	42020800 	.word	0x42020800
 8000c18:	42020400 	.word	0x42020400
 8000c1c:	10210000 	.word	0x10210000

08000c20 <aiInit>:
/* USER CODE BEGIN 4 */

/*
 * 初始化推�???
 */
int aiInit(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09c      	sub	sp, #112	; 0x70
 8000c24:	af00      	add	r7, sp, #0

  ai_error err;
  int buff_len = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	66fb      	str	r3, [r7, #108]	; 0x6c
  char buff[100];

  /* 创建和初始化模型 */
  const ai_handle acts[] = { activations };
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <aiInit+0x70>)
 8000c2c:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2200      	movs	r2, #0
 8000c32:	4619      	mov	r1, r3
 8000c34:	4817      	ldr	r0, [pc, #92]	; (8000c94 <aiInit+0x74>)
 8000c36:	f006 f8c9 	bl	8006dcc <ai_network_create_and_init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	66bb      	str	r3, [r7, #104]	; 0x68

  if (err.type != AI_ERROR_NONE) {
 8000c3e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00d      	beq.n	8000c62 <aiInit+0x42>

	    buff_len = sprintf(buff,
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4913      	ldr	r1, [pc, #76]	; (8000c98 <aiInit+0x78>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f009 f810 	bl	8009c70 <siprintf>
 8000c50:	66f8      	str	r0, [r7, #108]	; 0x6c
	    						"Error: could not create NN instance or initialize\r\n");
	    HAL_UART_Transmit(&huart1, (uint8_t *)buff, buff_len, 100);
 8000c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	1d39      	adds	r1, r7, #4
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <aiInit+0x7c>)
 8000c5c:	f005 f88c 	bl	8005d78 <HAL_UART_Transmit>
	    while(1);
 8000c60:	e7fe      	b.n	8000c60 <aiInit+0x40>
  };

  /* 获取指向模型的输�???/输出张量的指�??? */
  ai_input = ai_network_inputs_get(network, NULL);
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <aiInit+0x74>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f006 f923 	bl	8006eb4 <ai_network_inputs_get>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <aiInit+0x80>)
 8000c72:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <aiInit+0x74>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f006 f934 	bl	8006ee8 <ai_network_outputs_get>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <aiInit+0x84>)
 8000c84:	6013      	str	r3, [r2, #0]

  return 0;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3770      	adds	r7, #112	; 0x70
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20001e20 	.word	0x20001e20
 8000c94:	20001e1c 	.word	0x20001e1c
 8000c98:	0800a630 	.word	0x0800a630
 8000c9c:	20001d8c 	.word	0x20001d8c
 8000ca0:	2002da48 	.word	0x2002da48
 8000ca4:	2002da4c 	.word	0x2002da4c

08000ca8 <aiRun>:

/*
 * 运行推理
 */
int aiRun(const void *in_data, void *out_data) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b09e      	sub	sp, #120	; 0x78
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]

  ai_i32 n_batch;
  ai_error err;
  int buff_len = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	677b      	str	r3, [r7, #116]	; 0x74
  char buff[100];

  /* 1 - 更新输入和输出缓冲区的数据指�??? */
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <aiRun+0x74>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <aiRun+0x78>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	605a      	str	r2, [r3, #4]

  /* 2 - 使用神经网络进行推理 */
  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <aiRun+0x7c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <aiRun+0x74>)
 8000ccc:	6811      	ldr	r1, [r2, #0]
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <aiRun+0x78>)
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f006 f95e 	bl	8006f94 <ai_network_run>
 8000cd8:	6738      	str	r0, [r7, #112]	; 0x70

  if (n_batch != 1) {
 8000cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d018      	beq.n	8000d12 <aiRun+0x6a>

      err = ai_network_get_error(network);
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <aiRun+0x7c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 f84f 	bl	8006d88 <ai_network_get_error>
 8000cea:	4603      	mov	r3, r0
 8000cec:	66fb      	str	r3, [r7, #108]	; 0x6c

      buff_len = sprintf(buff,
    		  	  	  	  	  "Error: could not run inference because of %d\r\n",
							  err.type);
 8000cee:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
      buff_len = sprintf(buff,
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	490b      	ldr	r1, [pc, #44]	; (8000d28 <aiRun+0x80>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f008 ffb8 	bl	8009c70 <siprintf>
 8000d00:	6778      	str	r0, [r7, #116]	; 0x74
      HAL_UART_Transmit(&huart1, (uint8_t *)buff, buff_len, 100);
 8000d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f107 0108 	add.w	r1, r7, #8
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <aiRun+0x84>)
 8000d0e:	f005 f833 	bl	8005d78 <HAL_UART_Transmit>
  };

  return 0;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3778      	adds	r7, #120	; 0x78
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2002da48 	.word	0x2002da48
 8000d20:	2002da4c 	.word	0x2002da4c
 8000d24:	20001e1c 	.word	0x20001e1c
 8000d28:	0800a664 	.word	0x0800a664
 8000d2c:	20001d8c 	.word	0x20001d8c

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_MspInit+0x34>)
 8000d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_MspInit+0x34>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_MspInit+0x34>)
 8000d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000d60:	2004      	movs	r0, #4
 8000d62:	f000 faab 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	46020c00 	.word	0x46020c00

08000d74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <HAL_CRC_MspInit+0x3c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d10e      	bne.n	8000da4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_CRC_MspInit+0x40>)
 8000d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <HAL_CRC_MspInit+0x40>)
 8000d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <HAL_CRC_MspInit+0x40>)
 8000d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40023000 	.word	0x40023000
 8000db4:	46020c00 	.word	0x46020c00

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10e      	bne.n	8000de8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_TIM_Base_MspInit+0x40>)
 8000dcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_TIM_Base_MspInit+0x40>)
 8000dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_TIM_Base_MspInit+0x40>)
 8000ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40014400 	.word	0x40014400
 8000df8:	46020c00 	.word	0x46020c00

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0bc      	sub	sp, #240	; 0xf0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	22c8      	movs	r2, #200	; 0xc8
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f008 fe2e 	bl	8009a7e <memset>
  if(huart->Instance==USART1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d145      	bne.n	8000eb8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e2c:	f04f 0201 	mov.w	r2, #1
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 f915 	bl	8003070 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e4c:	f7ff ff70 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e56:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000e8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_UART_MspInit+0xcc>)
 8000eb4:	f000 fb1e 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	37f0      	adds	r7, #240	; 0xf0
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	46020c00 	.word	0x46020c00
 8000ec8:	42020000 	.word	0x42020000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f8fe 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f008 fd5e 	bl	8009a10 <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200c0000 	.word	0x200c0000
 8000f80:	00000800 	.word	0x00000800
 8000f84:	2002da50 	.word	0x2002da50
 8000f88:	2002db78 	.word	0x2002db78

08000f8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <SystemInit+0x68>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <SystemInit+0x68>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <SystemInit+0x6c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <SystemInit+0x6c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <SystemInit+0x6c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <SystemInit+0x6c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <SystemInit+0x6c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <SystemInit+0x6c>)
 8000fbe:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fc2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <SystemInit+0x6c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <SystemInit+0x6c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <SystemInit+0x6c>)
 8000fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <SystemInit+0x6c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SystemInit+0x68>)
 8000fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fe6:	609a      	str	r2, [r3, #8]
  #endif
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	46020c00 	.word	0x46020c00

08000ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001000:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001002:	e003      	b.n	800100c <LoopCopyDataInit>

08001004 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001006:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001008:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800100a:	3104      	adds	r1, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <LoopForever+0xa>)
	ldr	r3, =_edata
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001010:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001012:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001014:	d3f6      	bcc.n	8001004 <CopyDataInit>
	ldr	r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001018:	e002      	b.n	8001020 <LoopFillZerobss>

0800101a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800101a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800101c:	f842 3b04 	str.w	r3, [r2], #4

08001020 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <LoopForever+0x16>)
	cmp	r2, r3
 8001022:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001024:	d3f9      	bcc.n	800101a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001026:	f7ff ffb1 	bl	8000f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f008 fcf7 	bl	8009a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102e:	f7ff fab1 	bl	8000594 <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001034:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001038:	080b001c 	.word	0x080b001c
	ldr	r0, =_sdata
 800103c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001040:	20001cec 	.word	0x20001cec
	ldr	r2, =_sbss
 8001044:	20001d00 	.word	0x20001d00
	ldr	r3, = _ebss
 8001048:	2002db75 	.word	0x2002db75

0800104c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_IRQHandler>
	...

08001050 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_Init+0x4c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_Init+0x4c>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f92b 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001066:	f001 fe1f 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 800106a:	4602      	mov	r2, r0
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_Init+0x50>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	490b      	ldr	r1, [pc, #44]	; (80010a4 <HAL_Init+0x54>)
 8001076:	5ccb      	ldrb	r3, [r1, r3]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_Init+0x58>)
 800107e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f813 	bl	80010ac <HAL_InitTick>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e002      	b.n	8001096 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fe54 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40022000 	.word	0x40022000
 80010a0:	46020c00 	.word	0x46020c00
 80010a4:	0800a6c4 	.word	0x0800a6c4
 80010a8:	20000780 	.word	0x20000780

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_InitTick+0x60>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e021      	b.n	8001104 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_InitTick+0x64>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_InitTick+0x60>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f915 	bl	8001306 <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 f8ed 	bl	80012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_InitTick+0x68>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000788 	.word	0x20000788
 8001110:	20000780 	.word	0x20000780
 8001114:	20000784 	.word	0x20000784

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000788 	.word	0x20000788
 800113c:	2002da54 	.word	0x2002da54

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2002da54 	.word	0x2002da54

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f7ff ff8e 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff47 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff5e 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff90 	bl	8001210 <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5f 	bl	80011bc <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffb2 	bl	8001278 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e054      	b.n	80013dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	7f5b      	ldrb	r3, [r3, #29]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d105      	bne.n	8001348 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fd16 	bl	8000d74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2202      	movs	r2, #2
 800134c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <HAL_CRC_Init+0xc4>)
 800135c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0218 	bic.w	r2, r2, #24
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	e00c      	b.n	800138a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6899      	ldr	r1, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	461a      	mov	r2, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f834 	bl	80013e8 <HAL_CRCEx_Polynomial_Set>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e028      	b.n	80013dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	795b      	ldrb	r3, [r3, #5]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d105      	bne.n	800139e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f04f 32ff 	mov.w	r2, #4294967295
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	e004      	b.n	80013a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6912      	ldr	r2, [r2, #16]
 80013a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	04c11db7 	.word	0x04c11db7

080013e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80013f8:	231f      	movs	r3, #31
 80013fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80013fc:	bf00      	nop
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	613a      	str	r2, [r7, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <HAL_CRCEx_Polynomial_Set+0x34>
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b18      	cmp	r3, #24
 8001420:	d846      	bhi.n	80014b0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	080014b7 	.word	0x080014b7
 800142c:	080014b1 	.word	0x080014b1
 8001430:	080014b1 	.word	0x080014b1
 8001434:	080014b1 	.word	0x080014b1
 8001438:	080014b1 	.word	0x080014b1
 800143c:	080014b1 	.word	0x080014b1
 8001440:	080014b1 	.word	0x080014b1
 8001444:	080014b1 	.word	0x080014b1
 8001448:	080014a5 	.word	0x080014a5
 800144c:	080014b1 	.word	0x080014b1
 8001450:	080014b1 	.word	0x080014b1
 8001454:	080014b1 	.word	0x080014b1
 8001458:	080014b1 	.word	0x080014b1
 800145c:	080014b1 	.word	0x080014b1
 8001460:	080014b1 	.word	0x080014b1
 8001464:	080014b1 	.word	0x080014b1
 8001468:	08001499 	.word	0x08001499
 800146c:	080014b1 	.word	0x080014b1
 8001470:	080014b1 	.word	0x080014b1
 8001474:	080014b1 	.word	0x080014b1
 8001478:	080014b1 	.word	0x080014b1
 800147c:	080014b1 	.word	0x080014b1
 8001480:	080014b1 	.word	0x080014b1
 8001484:	080014b1 	.word	0x080014b1
 8001488:	0800148d 	.word	0x0800148d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b06      	cmp	r3, #6
 8001490:	d913      	bls.n	80014ba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001496:	e010      	b.n	80014ba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	2b07      	cmp	r3, #7
 800149c:	d90f      	bls.n	80014be <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80014a2:	e00c      	b.n	80014be <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	d90b      	bls.n	80014c2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80014ae:	e008      	b.n	80014c2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	75fb      	strb	r3, [r7, #23]
      break;
 80014b4:	e006      	b.n	80014c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80014b6:	bf00      	nop
 80014b8:	e004      	b.n	80014c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80014ba:	bf00      	nop
 80014bc:	e002      	b.n	80014c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80014be:	bf00      	nop
 80014c0:	e000      	b.n	80014c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80014c2:	bf00      	nop
  }
  if (status == HAL_OK)
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10d      	bne.n	80014e6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 0118 	bic.w	r1, r3, #24
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001506:	e1ba      	b.n	800187e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2101      	movs	r1, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 81aa 	beq.w	8001878 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a55      	ldr	r2, [pc, #340]	; (800167c <HAL_GPIO_Init+0x188>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d15d      	bne.n	80015e8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001532:	2201      	movs	r2, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	4013      	ands	r3, r2
 8001540:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0201 	and.w	r2, r3, #1
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	4313      	orrs	r3, r2
 8001554:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <HAL_GPIO_Init+0x18c>)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001564:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001566:	4a46      	ldr	r2, [pc, #280]	; (8001680 <HAL_GPIO_Init+0x18c>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4413      	add	r3, r2
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3208      	adds	r2, #8
 800157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	4013      	ands	r3, r2
 8001594:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220b      	movs	r2, #11
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	3208      	adds	r2, #8
 80015b2:	69f9      	ldr	r1, [r7, #28]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2202      	movs	r2, #2
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e067      	b.n	80016b8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x104>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b12      	cmp	r3, #18
 80015f6:	d145      	bne.n	8001684 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	4013      	ands	r3, r2
 800161a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	f003 020f 	and.w	r2, r3, #15
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	4313      	orrs	r3, r2
 8001634:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	69f9      	ldr	r1, [r7, #28]
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	4013      	ands	r3, r2
 800165a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	4313      	orrs	r3, r2
 8001670:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e01e      	b.n	80016b8 <HAL_GPIO_Init+0x1c4>
 800167a:	bf00      	nop
 800167c:	46020000 	.word	0x46020000
 8001680:	0800a71c 	.word	0x0800a71c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	4013      	ands	r3, r2
 800169a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0203 	and.w	r2, r3, #3
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d00b      	beq.n	80016d8 <HAL_GPIO_Init+0x1e4>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d007      	beq.n	80016d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016cc:	2b11      	cmp	r3, #17
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b12      	cmp	r3, #18
 80016d6:	d130      	bne.n	800173a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800170e:	2201      	movs	r2, #1
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	4013      	ands	r3, r2
 800171c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	f003 0201 	and.w	r2, r3, #1
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	4313      	orrs	r3, r2
 8001732:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d017      	beq.n	8001772 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	4013      	ands	r3, r2
 8001758:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	4313      	orrs	r3, r2
 800176a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d07c      	beq.n	8001878 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800177e:	4a47      	ldr	r2, [pc, #284]	; (800189c <HAL_GPIO_Init+0x3a8>)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3318      	adds	r3, #24
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	4013      	ands	r3, r2
 80017a0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0a9a      	lsrs	r2, r3, #10
 80017a6:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <HAL_GPIO_Init+0x3ac>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	f002 0203 	and.w	r2, r2, #3
 80017b0:	00d2      	lsls	r2, r2, #3
 80017b2:	4093      	lsls	r3, r2
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80017ba:	4938      	ldr	r1, [pc, #224]	; (800189c <HAL_GPIO_Init+0x3a8>)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3318      	adds	r3, #24
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_GPIO_Init+0x3a8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80017ec:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_GPIO_Init+0x3a8>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_GPIO_Init+0x3a8>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	4013      	ands	r3, r2
 8001800:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001816:	4a21      	ldr	r2, [pc, #132]	; (800189c <HAL_GPIO_Init+0x3a8>)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_GPIO_Init+0x3a8>)
 800181e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001822:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	43db      	mvns	r3, r3
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	4013      	ands	r3, r2
 800182c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4313      	orrs	r3, r2
 8001840:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001842:	4a16      	ldr	r2, [pc, #88]	; (800189c <HAL_GPIO_Init+0x3a8>)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_GPIO_Init+0x3a8>)
 800184c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001850:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43db      	mvns	r3, r3
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_GPIO_Init+0x3a8>)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	f47f ae3d 	bne.w	8001508 <HAL_GPIO_Init+0x14>
  }
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	3724      	adds	r7, #36	; 0x24
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	46022000 	.word	0x46022000
 80018a0:	002f7f7f 	.word	0x002f7f7f

080018a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
 80018b0:	4613      	mov	r3, r2
 80018b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e007      	b.n	8001902 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 0204 	bic.w	r2, r3, #4
 80018fa:	4905      	ldr	r1, [pc, #20]	; (8001910 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40030400 	.word	0x40030400

08001914 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_ICACHE_Enable+0x1c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_ICACHE_Enable+0x1c>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40030400 	.word	0x40030400

08001934 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800193c:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800193e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001944:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d101      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e057      	b.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d90a      	bls.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4313      	orrs	r3, r2
 8001966:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	60d3      	str	r3, [r2, #12]
 800196e:	e007      	b.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001978:	4925      	ldr	r1, [pc, #148]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4313      	orrs	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	2232      	movs	r2, #50	; 0x32
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	099b      	lsrs	r3, r3, #6
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800199e:	e002      	b.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x84>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f3      	bne.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01b      	beq.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	2232      	movs	r2, #50	; 0x32
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	3301      	adds	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80019dc:	e002      	b.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80019e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0xc2>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f3      	bne.n	80019de <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e000      	b.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	46020800 	.word	0x46020800
 8001a14:	20000780 	.word	0x20000780
 8001a18:	10624dd3 	.word	0x10624dd3

08001a1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	46020800 	.word	0x46020800

08001a38 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_PWREx_ConfigSupply+0x94>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <HAL_PWREx_ConfigSupply+0x98>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	2232      	movs	r2, #50	; 0x32
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_PWREx_ConfigSupply+0x98>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d113      	bne.n	8001a8c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001a6a:	f023 0302 	bic.w	r3, r3, #2
 8001a6e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001a70:	e002      	b.n	8001a78 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d116      	bne.n	8001ab2 <HAL_PWREx_ConfigSupply+0x7a>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f3      	bne.n	8001a72 <HAL_PWREx_ConfigSupply+0x3a>
 8001a8a:	e012      	b.n	8001ab2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001a98:	e002      	b.n	8001aa0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <HAL_PWREx_ConfigSupply+0x7a>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f3      	bne.n	8001a9a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e000      	b.n	8001abe <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000780 	.word	0x20000780
 8001ad0:	10624dd3 	.word	0x10624dd3
 8001ad4:	46020800 	.word	0x46020800

08001ad8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ae2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ae6:	6113      	str	r3, [r2, #16]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	46020800 	.word	0x46020800

08001af8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	46020800 	.word	0x46020800

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08e      	sub	sp, #56	; 0x38
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f000 bec3 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b32:	4b9c      	ldr	r3, [pc, #624]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b3c:	4b99      	ldr	r3, [pc, #612]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8172 	beq.w	8001e38 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_RCC_OscConfig+0x52>
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	2b0c      	cmp	r3, #12
 8001b5e:	f040 80e4 	bne.w	8001d2a <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	f040 80e0 	bne.w	8001d2a <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b6a:	4b8e      	ldr	r3, [pc, #568]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_RCC_OscConfig+0x6c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f000 be9a 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b88:	4b86      	ldr	r3, [pc, #536]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <HAL_RCC_OscConfig+0x86>
 8001b94:	4b83      	ldr	r3, [pc, #524]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001b9c:	e005      	b.n	8001baa <HAL_RCC_OscConfig+0x92>
 8001b9e:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d255      	bcs.n	8001c5a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 f9d3 	bl	8002f64 <RCC_SetFlashLatencyFromMSIRange>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f000 be77 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001bca:	4b76      	ldr	r3, [pc, #472]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4a75      	ldr	r2, [pc, #468]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bd4:	6093      	str	r3, [r2, #8]
 8001bd6:	4b73      	ldr	r3, [pc, #460]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	4970      	ldr	r1, [pc, #448]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001bf0:	d309      	bcc.n	8001c06 <HAL_RCC_OscConfig+0xee>
 8001bf2:	4b6c      	ldr	r3, [pc, #432]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f023 021f 	bic.w	r2, r3, #31
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4969      	ldr	r1, [pc, #420]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
 8001c04:	e07e      	b.n	8001d04 <HAL_RCC_OscConfig+0x1ec>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da0a      	bge.n	8001c24 <HAL_RCC_OscConfig+0x10c>
 8001c0e:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	015b      	lsls	r3, r3, #5
 8001c1c:	4961      	ldr	r1, [pc, #388]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60cb      	str	r3, [r1, #12]
 8001c22:	e06f      	b.n	8001d04 <HAL_RCC_OscConfig+0x1ec>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d30a      	bcc.n	8001c44 <HAL_RCC_OscConfig+0x12c>
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	029b      	lsls	r3, r3, #10
 8001c3c:	4959      	ldr	r1, [pc, #356]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60cb      	str	r3, [r1, #12]
 8001c42:	e05f      	b.n	8001d04 <HAL_RCC_OscConfig+0x1ec>
 8001c44:	4b57      	ldr	r3, [pc, #348]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	03db      	lsls	r3, r3, #15
 8001c52:	4954      	ldr	r1, [pc, #336]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60cb      	str	r3, [r1, #12]
 8001c58:	e054      	b.n	8001d04 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001c5a:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4a51      	ldr	r2, [pc, #324]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c64:	6093      	str	r3, [r2, #8]
 8001c66:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	494c      	ldr	r1, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001c80:	d309      	bcc.n	8001c96 <HAL_RCC_OscConfig+0x17e>
 8001c82:	4b48      	ldr	r3, [pc, #288]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f023 021f 	bic.w	r2, r3, #31
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4945      	ldr	r1, [pc, #276]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
 8001c94:	e028      	b.n	8001ce8 <HAL_RCC_OscConfig+0x1d0>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	da0a      	bge.n	8001cb4 <HAL_RCC_OscConfig+0x19c>
 8001c9e:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	015b      	lsls	r3, r3, #5
 8001cac:	493d      	ldr	r1, [pc, #244]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60cb      	str	r3, [r1, #12]
 8001cb2:	e019      	b.n	8001ce8 <HAL_RCC_OscConfig+0x1d0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbc:	d30a      	bcc.n	8001cd4 <HAL_RCC_OscConfig+0x1bc>
 8001cbe:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	4935      	ldr	r1, [pc, #212]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60cb      	str	r3, [r1, #12]
 8001cd2:	e009      	b.n	8001ce8 <HAL_RCC_OscConfig+0x1d0>
 8001cd4:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	03db      	lsls	r3, r3, #15
 8001ce2:	4930      	ldr	r1, [pc, #192]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10a      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f001 f936 	bl	8002f64 <RCC_SetFlashLatencyFromMSIRange>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f000 bdda 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001d04:	f001 f8d8 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d08:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x290>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f9cd 	bl	80010ac <HAL_InitTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 808a 	beq.w	8001e36 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8001d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d26:	f000 bdc7 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d066      	beq.n	8001e00 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d3e:	f7ff f9ff 	bl	8001140 <HAL_GetTick>
 8001d42:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d46:	f7ff f9fb 	bl	8001140 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d902      	bls.n	8001d5a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	f000 bdaf 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0ef      	beq.n	8001d46 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d70:	6093      	str	r3, [r2, #8]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	4909      	ldr	r1, [pc, #36]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001d8c:	d30e      	bcc.n	8001dac <HAL_RCC_OscConfig+0x294>
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f023 021f 	bic.w	r2, r3, #31
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4902      	ldr	r1, [pc, #8]	; (8001da4 <HAL_RCC_OscConfig+0x28c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
 8001da0:	e04a      	b.n	8001e38 <HAL_RCC_OscConfig+0x320>
 8001da2:	bf00      	nop
 8001da4:	46020c00 	.word	0x46020c00
 8001da8:	20000784 	.word	0x20000784
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da0a      	bge.n	8001dca <HAL_RCC_OscConfig+0x2b2>
 8001db4:	4b9b      	ldr	r3, [pc, #620]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	015b      	lsls	r3, r3, #5
 8001dc2:	4998      	ldr	r1, [pc, #608]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60cb      	str	r3, [r1, #12]
 8001dc8:	e036      	b.n	8001e38 <HAL_RCC_OscConfig+0x320>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd2:	d30a      	bcc.n	8001dea <HAL_RCC_OscConfig+0x2d2>
 8001dd4:	4b93      	ldr	r3, [pc, #588]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	4990      	ldr	r1, [pc, #576]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
 8001de8:	e026      	b.n	8001e38 <HAL_RCC_OscConfig+0x320>
 8001dea:	4b8e      	ldr	r3, [pc, #568]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	03db      	lsls	r3, r3, #15
 8001df8:	498a      	ldr	r1, [pc, #552]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60cb      	str	r3, [r1, #12]
 8001dfe:	e01b      	b.n	8001e38 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001e00:	4b88      	ldr	r3, [pc, #544]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a87      	ldr	r2, [pc, #540]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e0c:	f7ff f998 	bl	8001140 <HAL_GetTick>
 8001e10:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001e12:	e009      	b.n	8001e28 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e14:	f7ff f994 	bl	8001140 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d902      	bls.n	8001e28 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	f000 bd48 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001e28:	4b7e      	ldr	r3, [pc, #504]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ef      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2fc>
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8094 	beq.w	8001f6e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x340>
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d110      	bne.n	8001e74 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	4b72      	ldr	r3, [pc, #456]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8083 	beq.w	8001f6c <HAL_RCC_OscConfig+0x454>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d17e      	bne.n	8001f6c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f000 bd22 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x374>
 8001e7e:	4b69      	ldr	r3, [pc, #420]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a68      	ldr	r2, [pc, #416]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e041      	b.n	8001f10 <HAL_RCC_OscConfig+0x3f8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e94:	d112      	bne.n	8001ebc <HAL_RCC_OscConfig+0x3a4>
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a62      	ldr	r2, [pc, #392]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b60      	ldr	r3, [pc, #384]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5f      	ldr	r2, [pc, #380]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ea8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b5d      	ldr	r3, [pc, #372]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a5c      	ldr	r2, [pc, #368]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e029      	b.n	8001f10 <HAL_RCC_OscConfig+0x3f8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001ec4:	d112      	bne.n	8001eec <HAL_RCC_OscConfig+0x3d4>
 8001ec6:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a56      	ldr	r2, [pc, #344]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b54      	ldr	r3, [pc, #336]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a53      	ldr	r2, [pc, #332]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b51      	ldr	r3, [pc, #324]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a50      	ldr	r2, [pc, #320]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e011      	b.n	8001f10 <HAL_RCC_OscConfig+0x3f8>
 8001eec:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a4c      	ldr	r2, [pc, #304]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a49      	ldr	r2, [pc, #292]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a46      	ldr	r2, [pc, #280]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001f0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d014      	beq.n	8001f42 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8001f18:	f7ff f912 	bl	8001140 <HAL_GetTick>
 8001f1c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1e:	e009      	b.n	8001f34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff f90e 	bl	8001140 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d902      	bls.n	8001f34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	f000 bcc2 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f34:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ef      	beq.n	8001f20 <HAL_RCC_OscConfig+0x408>
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001f42:	f7ff f8fd 	bl	8001140 <HAL_GetTick>
 8001f46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4a:	f7ff f8f9 	bl	8001140 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	; 0x64
 8001f56:	d902      	bls.n	8001f5e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	f000 bcad 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1ef      	bne.n	8001f4a <HAL_RCC_OscConfig+0x432>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d066      	beq.n	8002048 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_OscConfig+0x474>
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d117      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x48e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f000 bc89 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	491b      	ldr	r1, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fba:	e045      	b.n	8002048 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d024      	beq.n	800200e <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001fd0:	f7ff f8b6 	bl	8001140 <HAL_GetTick>
 8001fd4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd6:	e009      	b.n	8001fec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7ff f8b2 	bl	8001140 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d902      	bls.n	8001fec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	f000 bc66 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ef      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	041b      	lsls	r3, r3, #16
 8002006:	4907      	ldr	r1, [pc, #28]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	610b      	str	r3, [r1, #16]
 800200c:	e01c      	b.n	8002048 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_RCC_OscConfig+0x50c>)
 8002014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002018:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800201a:	f7ff f891 	bl	8001140 <HAL_GetTick>
 800201e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002020:	e00c      	b.n	800203c <HAL_RCC_OscConfig+0x524>
 8002022:	bf00      	nop
 8002024:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002028:	f7ff f88a 	bl	8001140 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d902      	bls.n	800203c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	f000 bc3e 	b.w	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800203c:	4baf      	ldr	r3, [pc, #700]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ef      	bne.n	8002028 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80c7 	beq.w	80021e4 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205c:	4ba7      	ldr	r3, [pc, #668]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 800205e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d111      	bne.n	800208e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4ba4      	ldr	r3, [pc, #656]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 800206c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002070:	4aa2      	ldr	r2, [pc, #648]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800207a:	4ba0      	ldr	r3, [pc, #640]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 800207c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800208e:	4b9c      	ldr	r3, [pc, #624]	; (8002300 <HAL_RCC_OscConfig+0x7e8>)
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800209a:	4b99      	ldr	r3, [pc, #612]	; (8002300 <HAL_RCC_OscConfig+0x7e8>)
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	4a98      	ldr	r2, [pc, #608]	; (8002300 <HAL_RCC_OscConfig+0x7e8>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7ff f84b 	bl	8001140 <HAL_GetTick>
 80020aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7ff f847 	bl	8001140 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e3fb      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80020c0:	4b8f      	ldr	r3, [pc, #572]	; (8002300 <HAL_RCC_OscConfig+0x7e8>)
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d05f      	beq.n	8002194 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80020d4:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80020d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020da:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d037      	beq.n	800215a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e3da      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01b      	beq.n	8002144 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800210c:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 800210e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002112:	4a7a      	ldr	r2, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002114:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002118:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800211c:	f7ff f810 	bl	8001140 <HAL_GetTick>
 8002120:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7ff f80c 	bl	8001140 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e3c0      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002136:	4b71      	ldr	r3, [pc, #452]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800213c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ef      	bne.n	8002124 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002144:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800214a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	496a      	ldr	r1, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800215a:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 800215c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002160:	4a66      	ldr	r2, [pc, #408]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002162:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002166:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800216a:	f7fe ffe9 	bl	8001140 <HAL_GetTick>
 800216e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002172:	f7fe ffe5 	bl	8001140 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e399      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002184:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800218a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0ef      	beq.n	8002172 <HAL_RCC_OscConfig+0x65a>
 8002192:	e01b      	b.n	80021cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002194:	4b59      	ldr	r3, [pc, #356]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800219a:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 800219c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80021a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80021a4:	f7fe ffcc 	bl	8001140 <HAL_GetTick>
 80021a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7fe ffc8 	bl	8001140 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e37c      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80021be:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80021c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ef      	bne.n	80021ac <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b49      	ldr	r3, [pc, #292]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	4a48      	ldr	r2, [pc, #288]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8112 	beq.w	8002416 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f8:	4b40      	ldr	r3, [pc, #256]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d111      	bne.n	800222a <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220c:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800222a:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_RCC_OscConfig+0x7e8>)
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCC_OscConfig+0x7e8>)
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	4a31      	ldr	r2, [pc, #196]	; (8002300 <HAL_RCC_OscConfig+0x7e8>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7fe ff7d 	bl	8001140 <HAL_GetTick>
 8002246:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7fe ff79 	bl	8001140 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e32d      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800225c:	4b28      	ldr	r3, [pc, #160]	; (8002300 <HAL_RCC_OscConfig+0x7e8>)
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01f      	beq.n	80022b4 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002286:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002296:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022a0:	e018      	b.n	80022d4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80022a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80022b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80022c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RCC_OscConfig+0x7e4>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d058      	beq.n	800238e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80022dc:	f7fe ff30 	bl	8001140 <HAL_GetTick>
 80022e0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e2:	e00f      	b.n	8002304 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe ff2c 	bl	8001140 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d906      	bls.n	8002304 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e2de      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
 80022fa:	bf00      	nop
 80022fc:	46020c00 	.word	0x46020c00
 8002300:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	4b9c      	ldr	r3, [pc, #624]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0e8      	beq.n	80022e4 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01b      	beq.n	8002356 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800231e:	4b96      	ldr	r3, [pc, #600]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002324:	4a94      	ldr	r2, [pc, #592]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800232e:	e00a      	b.n	8002346 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7fe ff06 	bl	8001140 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e2b8      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002346:	4b8c      	ldr	r3, [pc, #560]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800234c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0ed      	beq.n	8002330 <HAL_RCC_OscConfig+0x818>
 8002354:	e053      	b.n	80023fe <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002356:	4b88      	ldr	r3, [pc, #544]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800235c:	4a86      	ldr	r2, [pc, #536]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 800235e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002362:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe feea 	bl	8001140 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e29c      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800237e:	4b7e      	ldr	r3, [pc, #504]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ed      	bne.n	8002368 <HAL_RCC_OscConfig+0x850>
 800238c:	e037      	b.n	80023fe <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800238e:	f7fe fed7 	bl	8001140 <HAL_GetTick>
 8002392:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7fe fed3 	bl	8001140 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e285      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ac:	4b72      	ldr	r3, [pc, #456]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80023ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ed      	bne.n	8002396 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80023ba:	4b6f      	ldr	r3, [pc, #444]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80023bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01a      	beq.n	80023fe <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023c8:	4b6b      	ldr	r3, [pc, #428]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80023ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023ce:	4a6a      	ldr	r2, [pc, #424]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80023d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe feb1 	bl	8001140 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e263      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023f0:	4b61      	ldr	r3, [pc, #388]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80023f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ed      	bne.n	80023da <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002406:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240c:	4a5a      	ldr	r2, [pc, #360]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 800240e:	f023 0304 	bic.w	r3, r3, #4
 8002412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d036      	beq.n	8002490 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d019      	beq.n	800245e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800242a:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002430:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002434:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002436:	f7fe fe83 	bl	8001140 <HAL_GetTick>
 800243a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800243e:	f7fe fe7f 	bl	8001140 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e233      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002450:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x926>
 800245c:	e018      	b.n	8002490 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800245e:	4b46      	ldr	r3, [pc, #280]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a45      	ldr	r2, [pc, #276]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002468:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800246a:	f7fe fe69 	bl	8001140 <HAL_GetTick>
 800246e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002472:	f7fe fe65 	bl	8001140 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e219      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002484:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002498:	2b00      	cmp	r3, #0
 800249a:	d036      	beq.n	800250a <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d019      	beq.n	80024d8 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80024a4:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a33      	ldr	r2, [pc, #204]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80024aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80024b0:	f7fe fe46 	bl	8001140 <HAL_GetTick>
 80024b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80024b8:	f7fe fe42 	bl	8001140 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1f6      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80024ca:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x9a0>
 80024d6:	e018      	b.n	800250a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80024d8:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a26      	ldr	r2, [pc, #152]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 80024de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80024e4:	f7fe fe2c 	bl	8001140 <HAL_GetTick>
 80024e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80024ec:	f7fe fe28 	bl	8001140 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1dc      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80024fe:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d07f      	beq.n	8002616 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	2b00      	cmp	r3, #0
 800251c:	d062      	beq.n	80025e4 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002528:	6093      	str	r3, [r2, #8]
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	4910      	ldr	r1, [pc, #64]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002544:	d309      	bcc.n	800255a <HAL_RCC_OscConfig+0xa42>
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f023 021f 	bic.w	r2, r3, #31
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4909      	ldr	r1, [pc, #36]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002554:	4313      	orrs	r3, r2
 8002556:	60cb      	str	r3, [r1, #12]
 8002558:	e02a      	b.n	80025b0 <HAL_RCC_OscConfig+0xa98>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b00      	cmp	r3, #0
 8002560:	da0c      	bge.n	800257c <HAL_RCC_OscConfig+0xa64>
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	015b      	lsls	r3, r3, #5
 8002570:	4901      	ldr	r1, [pc, #4]	; (8002578 <HAL_RCC_OscConfig+0xa60>)
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
 8002576:	e01b      	b.n	80025b0 <HAL_RCC_OscConfig+0xa98>
 8002578:	46020c00 	.word	0x46020c00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d30a      	bcc.n	800259c <HAL_RCC_OscConfig+0xa84>
 8002586:	4ba5      	ldr	r3, [pc, #660]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	029b      	lsls	r3, r3, #10
 8002594:	49a1      	ldr	r1, [pc, #644]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002596:	4313      	orrs	r3, r2
 8002598:	60cb      	str	r3, [r1, #12]
 800259a:	e009      	b.n	80025b0 <HAL_RCC_OscConfig+0xa98>
 800259c:	4b9f      	ldr	r3, [pc, #636]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	03db      	lsls	r3, r3, #15
 80025aa:	499c      	ldr	r1, [pc, #624]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80025b0:	4b9a      	ldr	r3, [pc, #616]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a99      	ldr	r2, [pc, #612]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80025bc:	f7fe fdc0 	bl	8001140 <HAL_GetTick>
 80025c0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80025c4:	f7fe fdbc 	bl	8001140 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e170      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80025d6:	4b91      	ldr	r3, [pc, #580]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xaac>
 80025e2:	e018      	b.n	8002616 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80025e4:	4b8d      	ldr	r3, [pc, #564]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a8c      	ldr	r2, [pc, #560]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80025ea:	f023 0310 	bic.w	r3, r3, #16
 80025ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80025f0:	f7fe fda6 	bl	8001140 <HAL_GetTick>
 80025f4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80025f8:	f7fe fda2 	bl	8001140 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e156      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800260a:	4b84      	ldr	r3, [pc, #528]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 814b 	beq.w	80028b6 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002626:	4b7d      	ldr	r3, [pc, #500]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b0c      	cmp	r3, #12
 8002630:	f000 80fa 	beq.w	8002828 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	2b02      	cmp	r3, #2
 800263a:	f040 80cc 	bne.w	80027d6 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b77      	ldr	r3, [pc, #476]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a76      	ldr	r2, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002648:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800264a:	f7fe fd79 	bl	8001140 <HAL_GetTick>
 800264e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe fd75 	bl	8001140 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e129      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002664:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002670:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d111      	bne.n	80026a2 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002684:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80026a2:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <HAL_RCC_OscConfig+0xd08>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026ae:	d102      	bne.n	80026b6 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80026b6:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0xd08>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4a59      	ldr	r2, [pc, #356]	; (8002820 <HAL_RCC_OscConfig+0xd08>)
 80026bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80026c2:	4b56      	ldr	r3, [pc, #344]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ca:	f023 0303 	bic.w	r3, r3, #3
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0212      	lsls	r2, r2, #8
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026e0:	430a      	orrs	r2, r1
 80026e2:	494e      	ldr	r1, [pc, #312]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	628b      	str	r3, [r1, #40]	; 0x28
 80026e8:	4b4c      	ldr	r3, [pc, #304]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80026ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ec:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <HAL_RCC_OscConfig+0xd0c>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026f4:	3a01      	subs	r2, #1
 80026f6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026fe:	3a01      	subs	r2, #1
 8002700:	0252      	lsls	r2, r2, #9
 8002702:	b292      	uxth	r2, r2
 8002704:	4311      	orrs	r1, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800270a:	3a01      	subs	r2, #1
 800270c:	0412      	lsls	r2, r2, #16
 800270e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002718:	3a01      	subs	r2, #1
 800271a:	0612      	lsls	r2, r2, #24
 800271c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002720:	430a      	orrs	r2, r1
 8002722:	493e      	ldr	r1, [pc, #248]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002724:	4313      	orrs	r3, r2
 8002726:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002728:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	4a3b      	ldr	r2, [pc, #236]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800272e:	f023 0310 	bic.w	r3, r3, #16
 8002732:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800273c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002744:	00d2      	lsls	r2, r2, #3
 8002746:	4935      	ldr	r1, [pc, #212]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002748:	4313      	orrs	r3, r2
 800274a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800274c:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	4a32      	ldr	r2, [pc, #200]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002752:	f043 0310 	orr.w	r3, r3, #16
 8002756:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002758:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f023 020c 	bic.w	r2, r3, #12
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	492d      	ldr	r1, [pc, #180]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002766:	4313      	orrs	r3, r2
 8002768:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800276a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_OscConfig+0xd08>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4a2a      	ldr	r2, [pc, #168]	; (8002820 <HAL_RCC_OscConfig+0xd08>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800277e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002782:	2b01      	cmp	r3, #1
 8002784:	d107      	bne.n	8002796 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002786:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278c:	4a23      	ldr	r2, [pc, #140]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	4a20      	ldr	r2, [pc, #128]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80027a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027ae:	f7fe fcc7 	bl	8001140 <HAL_GetTick>
 80027b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7fe fcc3 	bl	8001140 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e077      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0xc9e>
 80027d4:	e06f      	b.n	80028b6 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80027dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027e2:	f7fe fcad 	bl	8001140 <HAL_GetTick>
 80027e6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fe fca9 	bl	8001140 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e05d      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	4a03      	ldr	r2, [pc, #12]	; (800281c <HAL_RCC_OscConfig+0xd04>)
 800280e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	6293      	str	r3, [r2, #40]	; 0x28
 8002818:	e04d      	b.n	80028b6 <HAL_RCC_OscConfig+0xd9e>
 800281a:	bf00      	nop
 800281c:	46020c00 	.word	0x46020c00
 8002820:	46020800 	.word	0x46020800
 8002824:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <HAL_RCC_OscConfig+0xda8>)
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_OscConfig+0xda8>)
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	2b01      	cmp	r3, #1
 800283a:	d03a      	beq.n	80028b2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0203 	and.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d133      	bne.n	80028b2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d12a      	bne.n	80028b2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	0b1b      	lsrs	r3, r3, #12
 8002860:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d122      	bne.n	80028b2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002876:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d11a      	bne.n	80028b2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	0a5b      	lsrs	r3, r3, #9
 8002880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002888:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d111      	bne.n	80028b2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d108      	bne.n	80028b2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	0e1b      	lsrs	r3, r3, #24
 80028a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3738      	adds	r7, #56	; 0x38
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	46020c00 	.word	0x46020c00

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e1d9      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b9b      	ldr	r3, [pc, #620]	; (8002b48 <HAL_RCC_ClockConfig+0x284>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b98      	ldr	r3, [pc, #608]	; (8002b48 <HAL_RCC_ClockConfig+0x284>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 020f 	bic.w	r2, r3, #15
 80028ee:	4996      	ldr	r1, [pc, #600]	; (8002b48 <HAL_RCC_ClockConfig+0x284>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b94      	ldr	r3, [pc, #592]	; (8002b48 <HAL_RCC_ClockConfig+0x284>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e1c1      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d010      	beq.n	8002936 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	4b8c      	ldr	r3, [pc, #560]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002920:	429a      	cmp	r2, r3
 8002922:	d908      	bls.n	8002936 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002924:	4b89      	ldr	r3, [pc, #548]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	4986      	ldr	r1, [pc, #536]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002932:	4313      	orrs	r3, r2
 8002934:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d012      	beq.n	8002968 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	4b81      	ldr	r3, [pc, #516]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002950:	429a      	cmp	r2, r3
 8002952:	d909      	bls.n	8002968 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002954:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	497a      	ldr	r1, [pc, #488]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002964:	4313      	orrs	r3, r2
 8002966:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	4b74      	ldr	r3, [pc, #464]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002980:	429a      	cmp	r2, r3
 8002982:	d908      	bls.n	8002996 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b71      	ldr	r3, [pc, #452]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	496e      	ldr	r1, [pc, #440]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002992:	4313      	orrs	r3, r2
 8002994:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	4b69      	ldr	r3, [pc, #420]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d908      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80029b2:	4b66      	ldr	r3, [pc, #408]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 020f 	bic.w	r2, r3, #15
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4963      	ldr	r1, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80d2 	beq.w	8002b76 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d143      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 80029e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d110      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 80029ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f2:	4a56      	ldr	r2, [pc, #344]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029fc:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 80029fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fb97 	bl	8001140 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002a14:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <HAL_RCC_ClockConfig+0x28c>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00f      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002a22:	f7fe fb8d 	bl	8001140 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e12b      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002a34:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_RCC_ClockConfig+0x28c>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4c:	4a3f      	ldr	r2, [pc, #252]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d121      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e112      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e106      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002a86:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0fa      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a96:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0f2      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4926      	ldr	r1, [pc, #152]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002ab8:	f7fe fb42 	bl	8001140 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d112      	bne.n	8002aec <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7fe fb3a 	bl	8001140 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0d6      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x204>
 8002aea:	e044      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d112      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af6:	f7fe fb23 	bl	8001140 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0bf      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_ClockConfig+0x232>
 8002b18:	e02d      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d123      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b24:	f7fe fb0c 	bl	8001140 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0a8      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_RCC_ClockConfig+0x288>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ee      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x260>
 8002b46:	e016      	b.n	8002b76 <HAL_RCC_ClockConfig+0x2b2>
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	46020c00 	.word	0x46020c00
 8002b50:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe faf4 	bl	8001140 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e090      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d1ee      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d010      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d208      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002b92:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 020f 	bic.w	r2, r3, #15
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	493d      	ldr	r1, [pc, #244]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <HAL_RCC_ClockConfig+0x3d4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d210      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <HAL_RCC_ClockConfig+0x3d4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 020f 	bic.w	r2, r3, #15
 8002bba:	4937      	ldr	r1, [pc, #220]	; (8002c98 <HAL_RCC_ClockConfig+0x3d4>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <HAL_RCC_ClockConfig+0x3d4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e05b      	b.n	8002c8c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d208      	bcs.n	8002c02 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4925      	ldr	r1, [pc, #148]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d209      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002c20:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	4919      	ldr	r1, [pc, #100]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d208      	bcs.n	8002c62 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	490d      	ldr	r1, [pc, #52]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c62:	f000 f821 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_RCC_ClockConfig+0x3d0>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	490a      	ldr	r1, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x3d8>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
 8002c78:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x3dc>)
 8002c7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x3e0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe fa13 	bl	80010ac <HAL_InitTick>
 8002c86:	4603      	mov	r3, r0
 8002c88:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	46020c00 	.word	0x46020c00
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	0800a6c4 	.word	0x0800a6c4
 8002ca0:	20000780 	.word	0x20000780
 8002ca4:	20000784 	.word	0x20000784

08002ca8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b08b      	sub	sp, #44	; 0x2c
 8002cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb6:	4b7b      	ldr	r3, [pc, #492]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc0:	4b78      	ldr	r3, [pc, #480]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x34>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d121      	bne.n	8002d1a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d11e      	bne.n	8002d1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002cdc:	4b71      	ldr	r3, [pc, #452]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002ce8:	4b6e      	ldr	r3, [pc, #440]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cee:	0b1b      	lsrs	r3, r3, #12
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf6:	e005      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	0f1b      	lsrs	r3, r3, #28
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d04:	4a68      	ldr	r2, [pc, #416]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d110      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d18:	e00d      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1a:	4b62      	ldr	r3, [pc, #392]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d102      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d26:	4b61      	ldr	r3, [pc, #388]	; (8002eac <HAL_RCC_GetSysClockFreq+0x204>)
 8002d28:	623b      	str	r3, [r7, #32]
 8002d2a:	e004      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d32:	4b5e      	ldr	r3, [pc, #376]	; (8002eac <HAL_RCC_GetSysClockFreq+0x204>)
 8002d34:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	f040 80ac 	bne.w	8002e96 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d3e:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002d48:	4b56      	ldr	r3, [pc, #344]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3301      	adds	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002d56:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002d62:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	08db      	lsrs	r3, r3, #3
 8002d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8086 	beq.w	8002e92 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d003      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0xec>
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d022      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x130>
 8002d92:	e043      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002eb0 <HAL_RCC_GetSysClockFreq+0x208>
 8002da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002da6:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002db6:	ed97 6a01 	vldr	s12, [r7, #4]
 8002dba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002eb4 <HAL_RCC_GetSysClockFreq+0x20c>
 8002dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002dd6:	e046      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002eb0 <HAL_RCC_GetSysClockFreq+0x208>
 8002de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dea:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002dfa:	ed97 6a01 	vldr	s12, [r7, #4]
 8002dfe:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002eb4 <HAL_RCC_GetSysClockFreq+0x20c>
 8002e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e16:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002e1a:	e024      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e44:	ed97 6a01 	vldr	s12, [r7, #4]
 8002e48:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002eb4 <HAL_RCC_GetSysClockFreq+0x20c>
 8002e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e60:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002e64:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	0e1b      	lsrs	r3, r3, #24
 8002e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e70:	3301      	adds	r3, #1
 8002e72:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8a:	ee17 3a90 	vmov	r3, s15
 8002e8e:	623b      	str	r3, [r7, #32]
 8002e90:	e001      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002e96:	6a3b      	ldr	r3, [r7, #32]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	372c      	adds	r7, #44	; 0x2c
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	46020c00 	.word	0x46020c00
 8002ea8:	0800a6dc 	.word	0x0800a6dc
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	4b742400 	.word	0x4b742400
 8002eb4:	46000000 	.word	0x46000000

08002eb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ebc:	f7ff fef4 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_RCC_GetHCLKFreq+0x28>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	4906      	ldr	r1, [pc, #24]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ecc:	5ccb      	ldrb	r3, [r1, r3]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002ed4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	46020c00 	.word	0x46020c00
 8002ee4:	0800a6c4 	.word	0x0800a6c4
 8002ee8:	20000780 	.word	0x20000780

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002ef0:	f7ff ffe2 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	46020c00 	.word	0x46020c00
 8002f10:	0800a6d4 	.word	0x0800a6d4

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002f18:	f7ff ffce 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	46020c00 	.word	0x46020c00
 8002f38:	0800a6d4 	.word	0x0800a6d4

08002f3c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002f40:	f7ff ffba 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK3Freq+0x20>)
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	46020c00 	.word	0x46020c00
 8002f60:	0800a6d4 	.word	0x0800a6d4

08002f64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f6c:	4b3e      	ldr	r3, [pc, #248]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f7a:	f7fe fd4f 	bl	8001a1c <HAL_PWREx_GetVoltageRange>
 8002f7e:	6178      	str	r0, [r7, #20]
 8002f80:	e019      	b.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f88:	4a37      	ldr	r2, [pc, #220]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f92:	4b35      	ldr	r3, [pc, #212]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fa0:	f7fe fd3c 	bl	8001a1c <HAL_PWREx_GetVoltageRange>
 8002fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fa6:	4b30      	ldr	r3, [pc, #192]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	4a2e      	ldr	r2, [pc, #184]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002fae:	f023 0304 	bic.w	r3, r3, #4
 8002fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fbc:	d003      	beq.n	8002fc6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fc4:	d109      	bne.n	8002fda <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fcc:	d202      	bcs.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002fce:	2301      	movs	r3, #1
 8002fd0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002fd2:	e033      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002fd8:	e030      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe0:	d208      	bcs.n	8002ff4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d102      	bne.n	8002ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002fea:	2303      	movs	r3, #3
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e025      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e035      	b.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffa:	d90f      	bls.n	800301c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003008:	d902      	bls.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	e015      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003010:	2301      	movs	r3, #1
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	e012      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	e00f      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003022:	d109      	bne.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302a:	d102      	bne.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800302c:	2301      	movs	r3, #1
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	e004      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003032:	2302      	movs	r3, #2
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	e001      	b.n	800303c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003038:	2301      	movs	r3, #1
 800303a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 020f 	bic.w	r2, r3, #15
 8003044:	4909      	ldr	r1, [pc, #36]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	429a      	cmp	r2, r3
 8003058:	d001      	beq.n	800305e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	46020c00 	.word	0x46020c00
 800306c:	40022000 	.word	0x40022000

08003070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003074:	b0ba      	sub	sp, #232	; 0xe8
 8003076:	af00      	add	r7, sp, #0
 8003078:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800307c:	2300      	movs	r3, #0
 800307e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003082:	2300      	movs	r3, #0
 8003084:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003088:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f002 0401 	and.w	r4, r2, #1
 8003094:	2500      	movs	r5, #0
 8003096:	ea54 0305 	orrs.w	r3, r4, r5
 800309a:	d00b      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800309c:	4bcb      	ldr	r3, [pc, #812]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a2:	f023 0103 	bic.w	r1, r3, #3
 80030a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ac:	4ac7      	ldr	r2, [pc, #796]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ae:	430b      	orrs	r3, r1
 80030b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f002 0802 	and.w	r8, r2, #2
 80030c0:	f04f 0900 	mov.w	r9, #0
 80030c4:	ea58 0309 	orrs.w	r3, r8, r9
 80030c8:	d00b      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80030ca:	4bc0      	ldr	r3, [pc, #768]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d0:	f023 010c 	bic.w	r1, r3, #12
 80030d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	4abc      	ldr	r2, [pc, #752]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030dc:	430b      	orrs	r3, r1
 80030de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f002 0a04 	and.w	sl, r2, #4
 80030ee:	f04f 0b00 	mov.w	fp, #0
 80030f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80030f6:	d00b      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80030f8:	4bb4      	ldr	r3, [pc, #720]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fe:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	4ab0      	ldr	r2, [pc, #704]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310a:	430b      	orrs	r3, r1
 800310c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f002 0308 	and.w	r3, r2, #8
 800311c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003126:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800312a:	460b      	mov	r3, r1
 800312c:	4313      	orrs	r3, r2
 800312e:	d00b      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003130:	4ba6      	ldr	r3, [pc, #664]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003136:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800313a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	4aa2      	ldr	r2, [pc, #648]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003142:	430b      	orrs	r3, r1
 8003144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f002 0310 	and.w	r3, r2, #16
 8003154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003158:	2300      	movs	r3, #0
 800315a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800315e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003162:	460b      	mov	r3, r1
 8003164:	4313      	orrs	r3, r2
 8003166:	d00b      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003168:	4b98      	ldr	r3, [pc, #608]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800316a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800316e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	4a94      	ldr	r2, [pc, #592]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800317a:	430b      	orrs	r3, r1
 800317c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f002 0320 	and.w	r3, r2, #32
 800318c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003196:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800319a:	460b      	mov	r3, r1
 800319c:	4313      	orrs	r3, r2
 800319e:	d00b      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80031a0:	4b8a      	ldr	r3, [pc, #552]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a6:	f023 0107 	bic.w	r1, r3, #7
 80031aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b0:	4a86      	ldr	r2, [pc, #536]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031b2:	430b      	orrs	r3, r1
 80031b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80031c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4313      	orrs	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80031d8:	4b7c      	ldr	r3, [pc, #496]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031de:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80031e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e8:	4a78      	ldr	r2, [pc, #480]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ea:	430b      	orrs	r3, r1
 80031ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80031fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003206:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800320a:	460b      	mov	r3, r1
 800320c:	4313      	orrs	r3, r2
 800320e:	d00b      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003210:	4b6e      	ldr	r3, [pc, #440]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800321a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800321e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003220:	4a6a      	ldr	r2, [pc, #424]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003222:	430b      	orrs	r3, r1
 8003224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003234:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800323e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003242:	460b      	mov	r3, r1
 8003244:	4313      	orrs	r3, r2
 8003246:	d00b      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003248:	4b60      	ldr	r3, [pc, #384]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800324a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800324e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a5c      	ldr	r2, [pc, #368]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800325a:	430b      	orrs	r3, r1
 800325c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800326c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003276:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800327a:	460b      	mov	r3, r1
 800327c:	4313      	orrs	r3, r2
 800327e:	d00b      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003280:	4b52      	ldr	r3, [pc, #328]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003286:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800328a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	4a4e      	ldr	r2, [pc, #312]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003292:	430b      	orrs	r3, r1
 8003294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80032a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80032b2:	460b      	mov	r3, r1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80032b8:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032be:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80032c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c8:	4a40      	ldr	r2, [pc, #256]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ca:	430b      	orrs	r3, r1
 80032cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80032dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80032e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80032ea:	460b      	mov	r3, r1
 80032ec:	4313      	orrs	r3, r2
 80032ee:	d00b      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80032fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003300:	4a32      	ldr	r2, [pc, #200]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003302:	430b      	orrs	r3, r1
 8003304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800331e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003322:	460b      	mov	r3, r1
 8003324:	4313      	orrs	r3, r2
 8003326:	d00c      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800332a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800332e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333a:	4a24      	ldr	r2, [pc, #144]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800333c:	430b      	orrs	r3, r1
 800333e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800334e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003350:	2300      	movs	r3, #0
 8003352:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003354:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003358:	460b      	mov	r3, r1
 800335a:	4313      	orrs	r3, r2
 800335c:	d04f      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800335e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d02d      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800336a:	2b80      	cmp	r3, #128	; 0x80
 800336c:	d827      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800336e:	2b60      	cmp	r3, #96	; 0x60
 8003370:	d02e      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003372:	2b60      	cmp	r3, #96	; 0x60
 8003374:	d823      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d006      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d81f      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003382:	2b20      	cmp	r3, #32
 8003384:	d011      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003386:	e01a      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003394:	e01d      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800339a:	3308      	adds	r3, #8
 800339c:	4618      	mov	r0, r3
 800339e:	f002 f981 	bl	80056a4 <RCCEx_PLL2_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80033a8:	e013      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033ae:	332c      	adds	r3, #44	; 0x2c
 80033b0:	4618      	mov	r0, r3
 80033b2:	f002 fa0f 	bl	80057d4 <RCCEx_PLL3_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80033bc:	e009      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80033c4:	e005      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80033c6:	bf00      	nop
 80033c8:	e003      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80033ca:	bf00      	nop
 80033cc:	46020c00 	.word	0x46020c00
        break;
 80033d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10d      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80033da:	4bb6      	ldr	r3, [pc, #728]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80033dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80033e0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80033e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	4ab1      	ldr	r2, [pc, #708]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80033ee:	430b      	orrs	r3, r1
 80033f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80033fa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800340a:	673b      	str	r3, [r7, #112]	; 0x70
 800340c:	2300      	movs	r3, #0
 800340e:	677b      	str	r3, [r7, #116]	; 0x74
 8003410:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003414:	460b      	mov	r3, r1
 8003416:	4313      	orrs	r3, r2
 8003418:	d053      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800341a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003426:	d033      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342c:	d82c      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800342e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003432:	d02f      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003438:	d826      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800343a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343e:	d008      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003444:	d820      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800344a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344e:	d011      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003450:	e01a      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003452:	4b98      	ldr	r3, [pc, #608]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	4a97      	ldr	r2, [pc, #604]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800345e:	e01a      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003464:	3308      	adds	r3, #8
 8003466:	4618      	mov	r0, r3
 8003468:	f002 f91c 	bl	80056a4 <RCCEx_PLL2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003472:	e010      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003478:	332c      	adds	r3, #44	; 0x2c
 800347a:	4618      	mov	r0, r3
 800347c:	f002 f9aa 	bl	80057d4 <RCCEx_PLL3_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003486:	e006      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800348e:	e002      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003496:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10d      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800349e:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80034a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034a4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80034a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b0:	4a80      	ldr	r2, [pc, #512]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80034b2:	430b      	orrs	r3, r1
 80034b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80034b8:	e003      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80034be:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80034c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80034ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d0:	2300      	movs	r3, #0
 80034d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80034d8:	460b      	mov	r3, r1
 80034da:	4313      	orrs	r3, r2
 80034dc:	d046      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80034de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80034ea:	d028      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80034ec:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80034f0:	d821      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80034f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034f6:	d022      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80034f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fc:	d81b      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80034fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003502:	d01c      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003504:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003508:	d815      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350e:	d008      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003514:	d80f      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003516:	2b00      	cmp	r3, #0
 8003518:	d011      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351e:	d00e      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003520:	e009      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003526:	3308      	adds	r3, #8
 8003528:	4618      	mov	r0, r3
 800352a:	f002 f8bb 	bl	80056a4 <RCCEx_PLL2_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003534:	e004      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800353c:	e000      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800353e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003540:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003548:	4b5a      	ldr	r3, [pc, #360]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800354a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800354e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003556:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800355a:	4a56      	ldr	r2, [pc, #344]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800355c:	430b      	orrs	r3, r1
 800355e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003562:	e003      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003564:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003568:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800356c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003578:	663b      	str	r3, [r7, #96]	; 0x60
 800357a:	2300      	movs	r3, #0
 800357c:	667b      	str	r3, [r7, #100]	; 0x64
 800357e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003582:	460b      	mov	r3, r1
 8003584:	4313      	orrs	r3, r2
 8003586:	d03f      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	2b04      	cmp	r3, #4
 8003592:	d81e      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003594:	a201      	add	r2, pc, #4	; (adr r2, 800359c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035db 	.word	0x080035db
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035bf 	.word	0x080035bf
 80035a8:	080035db 	.word	0x080035db
 80035ac:	080035db 	.word	0x080035db
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035b0:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	4a3f      	ldr	r2, [pc, #252]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ba:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80035bc:	e00e      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035c2:	332c      	adds	r3, #44	; 0x2c
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 f905 	bl	80057d4 <RCCEx_PLL3_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80035d0:	e004      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80035d8:	e000      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80035da:	bf00      	nop
    }
    if (ret == HAL_OK)
 80035dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10d      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80035e4:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80035e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035ea:	f023 0107 	bic.w	r1, r3, #7
 80035ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	4a2f      	ldr	r2, [pc, #188]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80035fe:	e003      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003604:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003614:	65bb      	str	r3, [r7, #88]	; 0x58
 8003616:	2300      	movs	r3, #0
 8003618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800361a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800361e:	460b      	mov	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	d04d      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003630:	d028      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003632:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003636:	d821      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003638:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800363c:	d024      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800363e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003642:	d81b      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003648:	d00e      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800364a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800364e:	d815      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d110      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003666:	e012      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800366c:	332c      	adds	r3, #44	; 0x2c
 800366e:	4618      	mov	r0, r3
 8003670:	f002 f8b0 	bl	80057d4 <RCCEx_PLL3_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800367a:	e008      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003682:	e004      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003684:	bf00      	nop
 8003686:	e002      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003688:	bf00      	nop
 800368a:	e000      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800368c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800368e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d110      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800369c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80036a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a8:	4a02      	ldr	r2, [pc, #8]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80036aa:	430b      	orrs	r3, r1
 80036ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036b0:	e006      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80036b2:	bf00      	nop
 80036b4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80036bc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80036cc:	653b      	str	r3, [r7, #80]	; 0x50
 80036ce:	2300      	movs	r3, #0
 80036d0:	657b      	str	r3, [r7, #84]	; 0x54
 80036d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80036d6:	460b      	mov	r3, r1
 80036d8:	4313      	orrs	r3, r2
 80036da:	f000 80b5 	beq.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e4:	4b9d      	ldr	r3, [pc, #628]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d113      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	4b9a      	ldr	r3, [pc, #616]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f8:	4a98      	ldr	r2, [pc, #608]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003702:	4b96      	ldr	r3, [pc, #600]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800371a:	4b91      	ldr	r3, [pc, #580]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	4a90      	ldr	r2, [pc, #576]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003726:	f7fd fd0b 	bl	8001140 <HAL_GetTick>
 800372a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800372e:	e00b      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003730:	f7fd fd06 	bl	8001140 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d903      	bls.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003746:	e005      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003748:	4b85      	ldr	r3, [pc, #532]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ed      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8003754:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d165      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800375c:	4b7f      	ldr	r3, [pc, #508]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800375e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d023      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8003772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003776:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377e:	4293      	cmp	r3, r2
 8003780:	d01b      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003782:	4b76      	ldr	r3, [pc, #472]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003790:	4b72      	ldr	r3, [pc, #456]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003796:	4a71      	ldr	r2, [pc, #452]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037a0:	4b6e      	ldr	r3, [pc, #440]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a6:	4a6d      	ldr	r2, [pc, #436]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037b0:	4a6a      	ldr	r2, [pc, #424]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d019      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fd fcbb 	bl	8001140 <HAL_GetTick>
 80037ca:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	e00d      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fd fcb6 	bl	8001140 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d903      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80037ea:	e006      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ec:	4b5b      	ldr	r3, [pc, #364]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0ea      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80037fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003802:	4b56      	ldr	r3, [pc, #344]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003808:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800380c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003810:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003814:	4a51      	ldr	r2, [pc, #324]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003816:	430b      	orrs	r3, r1
 8003818:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800381c:	e008      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800381e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003822:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8003826:	e003      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800382c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003830:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d107      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003838:	4b48      	ldr	r3, [pc, #288]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800383a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383e:	4a47      	ldr	r2, [pc, #284]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003840:	f023 0304 	bic.w	r3, r3, #4
 8003844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003854:	64bb      	str	r3, [r7, #72]	; 0x48
 8003856:	2300      	movs	r3, #0
 8003858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800385e:	460b      	mov	r3, r1
 8003860:	4313      	orrs	r3, r2
 8003862:	d042      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003864:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800386c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003870:	d022      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003872:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003876:	d81b      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800387c:	d011      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800387e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003882:	d815      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d019      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8003888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800388c:	d110      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800388e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003892:	3308      	adds	r3, #8
 8003894:	4618      	mov	r0, r3
 8003896:	f001 ff05 	bl	80056a4 <RCCEx_PLL2_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80038a0:	e00d      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a2:	4b2e      	ldr	r3, [pc, #184]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	4a2d      	ldr	r2, [pc, #180]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80038ae:	e006      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80038b6:	e002      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80038b8:	bf00      	nop
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80038bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80038be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80038c6:	4b25      	ldr	r3, [pc, #148]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038cc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80038d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038d8:	4a20      	ldr	r2, [pc, #128]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038da:	430b      	orrs	r3, r1
 80038dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80038e6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80038f6:	643b      	str	r3, [r7, #64]	; 0x40
 80038f8:	2300      	movs	r3, #0
 80038fa:	647b      	str	r3, [r7, #68]	; 0x44
 80038fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003900:	460b      	mov	r3, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	d032      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800390a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800390e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003912:	d00b      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003918:	d804      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003922:	d007      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800392a:	e004      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800392c:	bf00      	nop
 800392e:	e002      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003930:	bf00      	nop
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003934:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003936:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d112      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003940:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003944:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800394c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003950:	4a02      	ldr	r2, [pc, #8]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003952:	430b      	orrs	r3, r1
 8003954:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003958:	e008      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800395a:	bf00      	nop
 800395c:	46020c00 	.word	0x46020c00
 8003960:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003964:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003968:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800396c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
 800397a:	2300      	movs	r3, #0
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003982:	460b      	mov	r3, r1
 8003984:	4313      	orrs	r3, r2
 8003986:	d00c      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003988:	4b98      	ldr	r3, [pc, #608]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800398a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800398e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8003992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800399a:	4a94      	ldr	r2, [pc, #592]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800399c:	430b      	orrs	r3, r1
 800399e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80039a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80039ae:	633b      	str	r3, [r7, #48]	; 0x30
 80039b0:	2300      	movs	r3, #0
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
 80039b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80039b8:	460b      	mov	r3, r1
 80039ba:	4313      	orrs	r3, r2
 80039bc:	d019      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80039be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ca:	d105      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039cc:	4b87      	ldr	r3, [pc, #540]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	4a86      	ldr	r2, [pc, #536]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80039d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80039d8:	4b84      	ldr	r3, [pc, #528]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80039da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80039de:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80039e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039ea:	4a80      	ldr	r2, [pc, #512]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80039ec:	430b      	orrs	r3, r1
 80039ee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80039f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a00:	2300      	movs	r3, #0
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	d00c      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003a0e:	4b77      	ldr	r3, [pc, #476]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a20:	4972      	ldr	r1, [pc, #456]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a34:	623b      	str	r3, [r7, #32]
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d00c      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003a44:	4b69      	ldr	r3, [pc, #420]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a56:	4965      	ldr	r1, [pc, #404]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a74:	460b      	mov	r3, r1
 8003a76:	4313      	orrs	r3, r2
 8003a78:	d00c      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003a7a:	4b5c      	ldr	r3, [pc, #368]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a80:	f023 0218 	bic.w	r2, r3, #24
 8003a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003a8c:	4957      	ldr	r1, [pc, #348]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	d032      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003abc:	d105      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003abe:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	4a4a      	ldr	r2, [pc, #296]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ad2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ad6:	d108      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003adc:	3308      	adds	r3, #8
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 fde0 	bl	80056a4 <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8003aea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10d      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003af2:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003af4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003afc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b04:	4939      	ldr	r1, [pc, #228]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003b0c:	e003      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003b12:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	d03a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b3e:	d00e      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8003b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b44:	d815      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d017      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003b4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b4e:	d110      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	4a25      	ldr	r2, [pc, #148]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003b5c:	e00e      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b62:	3308      	adds	r3, #8
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 fd9d 	bl	80056a4 <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003b70:	e004      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8003b7a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003b7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003b84:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b96:	4915      	ldr	r1, [pc, #84]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003b9e:	e003      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003ba4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003ba8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	d00c      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bd6:	4905      	ldr	r1, [pc, #20]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003bde:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	37e8      	adds	r7, #232	; 0xe8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bec:	46020c00 	.word	0x46020c00

08003bf0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	; 0x24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003bf8:	4bac      	ldr	r3, [pc, #688]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c00:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003c02:	4baa      	ldr	r3, [pc, #680]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003c0c:	4ba7      	ldr	r3, [pc, #668]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	3301      	adds	r3, #1
 8003c18:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8003c1a:	4ba4      	ldr	r3, [pc, #656]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c24:	4ba1      	ldr	r3, [pc, #644]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	08db      	lsrs	r3, r3, #3
 8003c2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8123 	beq.w	8003e8e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d062      	beq.n	8003d14 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	f200 8081 	bhi.w	8003d58 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d024      	beq.n	8003ca6 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d17a      	bne.n	8003d58 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8003c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c74:	4b8d      	ldr	r3, [pc, #564]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c84:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c88:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ca4:	e08f      	b.n	8003dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003ca6:	4b81      	ldr	r3, [pc, #516]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8003cb2:	4b7e      	ldr	r3, [pc, #504]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0f1b      	lsrs	r3, r3, #28
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	e006      	b.n	8003ccc <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8003cbe:	4b7b      	ldr	r3, [pc, #492]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	0f1b      	lsrs	r3, r3, #28
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	4a7a      	ldr	r2, [pc, #488]	; (8003eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	ee07 3a90 	vmov	s15, r3
 8003ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d12:	e058      	b.n	8003dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8003d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d26:	4b61      	ldr	r3, [pc, #388]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d3a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d56:	e036      	b.n	8003dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003d58:	4b54      	ldr	r3, [pc, #336]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8003d64:	4b51      	ldr	r3, [pc, #324]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	0f1b      	lsrs	r3, r3, #28
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	e006      	b.n	8003d7e <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8003d70:	4b4e      	ldr	r3, [pc, #312]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	0f1b      	lsrs	r3, r3, #28
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	4a4e      	ldr	r2, [pc, #312]	; (8003eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	ee07 3a90 	vmov	s15, r3
 8003da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003da8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dc4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003dc6:	4b39      	ldr	r3, [pc, #228]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d017      	beq.n	8003e02 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003dd2:	4b36      	ldr	r3, [pc, #216]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	0a5b      	lsrs	r3, r3, #9
 8003dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ddc:	ee07 3a90 	vmov	s15, r3
 8003de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003de8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df8:	ee17 2a90 	vmov	r2, s15
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e002      	b.n	8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003e08:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d017      	beq.n	8003e44 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e14:	4b25      	ldr	r3, [pc, #148]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e3a:	ee17 2a90 	vmov	r2, s15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	e002      	b.n	8003e4a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003e4a:	4b18      	ldr	r3, [pc, #96]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d017      	beq.n	8003e86 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	0e1b      	lsrs	r3, r3, #24
 8003e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003e68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7c:	ee17 2a90 	vmov	r2, s15
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003e84:	e00c      	b.n	8003ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	3724      	adds	r7, #36	; 0x24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	46020c00 	.word	0x46020c00
 8003eb0:	4b742400 	.word	0x4b742400
 8003eb4:	46000000 	.word	0x46000000
 8003eb8:	0800a6dc 	.word	0x0800a6dc

08003ebc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003ec4:	4bac      	ldr	r3, [pc, #688]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003ece:	4baa      	ldr	r3, [pc, #680]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003ed8:	4ba7      	ldr	r3, [pc, #668]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003ee6:	4ba4      	ldr	r3, [pc, #656]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003ef0:	4ba1      	ldr	r3, [pc, #644]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	08db      	lsrs	r3, r3, #3
 8003ef6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f08:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8123 	beq.w	800415a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d062      	beq.n	8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	f200 8081 	bhi.w	8004024 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d024      	beq.n	8003f72 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d17a      	bne.n	8004024 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f38:	eddf 6a90 	vldr	s13, [pc, #576]	; 800417c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8003f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f40:	4b8d      	ldr	r3, [pc, #564]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f50:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f54:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f70:	e08f      	b.n	8004092 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003f72:	4b81      	ldr	r3, [pc, #516]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8003f7e:	4b7e      	ldr	r3, [pc, #504]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	0f1b      	lsrs	r3, r3, #28
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	e006      	b.n	8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8003f8a:	4b7b      	ldr	r3, [pc, #492]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f90:	041b      	lsls	r3, r3, #16
 8003f92:	0f1b      	lsrs	r3, r3, #28
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	4a7a      	ldr	r2, [pc, #488]	; (8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	ee07 3a90 	vmov	s15, r3
 8003fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fc2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fde:	e058      	b.n	8004092 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fea:	eddf 6a64 	vldr	s13, [pc, #400]	; 800417c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8003fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff2:	4b61      	ldr	r3, [pc, #388]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004002:	ed97 6a02 	vldr	s12, [r7, #8]
 8004006:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800400a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800400e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004016:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004022:	e036      	b.n	8004092 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004024:	4b54      	ldr	r3, [pc, #336]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8004030:	4b51      	ldr	r3, [pc, #324]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	0f1b      	lsrs	r3, r3, #28
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	e006      	b.n	800404a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800403c:	4b4e      	ldr	r3, [pc, #312]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800403e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	0f1b      	lsrs	r3, r3, #28
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	4a4e      	ldr	r2, [pc, #312]	; (8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800404c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004070:	ed97 6a02 	vldr	s12, [r7, #8]
 8004074:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004084:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004090:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004092:	4b39      	ldr	r3, [pc, #228]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d017      	beq.n	80040ce <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800409e:	4b36      	ldr	r3, [pc, #216]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	0a5b      	lsrs	r3, r3, #9
 80040a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a8:	ee07 3a90 	vmov	s15, r3
 80040ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80040b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040b4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c4:	ee17 2a90 	vmov	r2, s15
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80040d4:	4b28      	ldr	r3, [pc, #160]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d017      	beq.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80040f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040f6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80040fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004106:	ee17 2a90 	vmov	r2, s15
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	e002      	b.n	8004116 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004116:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	0e1b      	lsrs	r3, r3, #24
 8004128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004138:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800413c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004148:	ee17 2a90 	vmov	r2, s15
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004150:	e00c      	b.n	800416c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	e008      	b.n	800416c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	3724      	adds	r7, #36	; 0x24
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	46020c00 	.word	0x46020c00
 800417c:	4b742400 	.word	0x4b742400
 8004180:	46000000 	.word	0x46000000
 8004184:	0800a6dc 	.word	0x0800a6dc

08004188 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004190:	4bac      	ldr	r3, [pc, #688]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004198:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800419a:	4baa      	ldr	r3, [pc, #680]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80041a4:	4ba7      	ldr	r3, [pc, #668]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	3301      	adds	r3, #1
 80041b0:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80041b2:	4ba4      	ldr	r3, [pc, #656]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80041bc:	4ba1      	ldr	r3, [pc, #644]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	08db      	lsrs	r3, r3, #3
 80041c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	ee07 3a90 	vmov	s15, r3
 80041d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8123 	beq.w	8004426 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d062      	beq.n	80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	f200 8081 	bhi.w	80042f0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d024      	beq.n	800423e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d17a      	bne.n	80042f0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004204:	eddf 6a90 	vldr	s13, [pc, #576]	; 8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8004208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800420c:	4b8d      	ldr	r3, [pc, #564]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800421c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004220:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004224:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004228:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800422c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004230:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004238:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800423c:	e08f      	b.n	800435e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800423e:	4b81      	ldr	r3, [pc, #516]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800424a:	4b7e      	ldr	r3, [pc, #504]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0f1b      	lsrs	r3, r3, #28
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	e006      	b.n	8004264 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8004256:	4b7b      	ldr	r3, [pc, #492]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	0f1b      	lsrs	r3, r3, #28
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	4a7a      	ldr	r2, [pc, #488]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	ee07 3a90 	vmov	s15, r3
 8004278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428a:	ed97 6a02 	vldr	s12, [r7, #8]
 800428e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80042a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042aa:	e058      	b.n	800435e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b61      	ldr	r3, [pc, #388]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80042ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80042de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ee:	e036      	b.n	800435e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80042f0:	4b54      	ldr	r3, [pc, #336]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80042fc:	4b51      	ldr	r3, [pc, #324]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	0f1b      	lsrs	r3, r3, #28
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	e006      	b.n	8004316 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8004308:	4b4e      	ldr	r3, [pc, #312]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800430a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	0f1b      	lsrs	r3, r3, #28
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	4a4e      	ldr	r2, [pc, #312]	; (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004340:	eddf 5a42 	vldr	s11, [pc, #264]	; 800444c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004350:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004358:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800435c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800435e:	4b39      	ldr	r3, [pc, #228]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d017      	beq.n	800439a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800436a:	4b36      	ldr	r3, [pc, #216]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	0a5b      	lsrs	r3, r3, #9
 8004370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800437c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004380:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004384:	edd7 6a07 	vldr	s13, [r7, #28]
 8004388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004390:	ee17 2a90 	vmov	r2, s15
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e002      	b.n	80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80043a0:	4b28      	ldr	r3, [pc, #160]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d017      	beq.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80043be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043c2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80043c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d2:	ee17 2a90 	vmov	r2, s15
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	e002      	b.n	80043e2 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80043e2:	4b18      	ldr	r3, [pc, #96]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d017      	beq.n	800441e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80043ee:	4b15      	ldr	r3, [pc, #84]	; (8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	0e1b      	lsrs	r3, r3, #24
 80043f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004404:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004408:	edd7 6a07 	vldr	s13, [r7, #28]
 800440c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004414:	ee17 2a90 	vmov	r2, s15
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800441c:	e00c      	b.n	8004438 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	e008      	b.n	8004438 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	bf00      	nop
 800443a:	3724      	adds	r7, #36	; 0x24
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	46020c00 	.word	0x46020c00
 8004448:	4b742400 	.word	0x4b742400
 800444c:	46000000 	.word	0x46000000
 8004450:	0800a6dc 	.word	0x0800a6dc

08004454 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08e      	sub	sp, #56	; 0x38
 8004458:	af00      	add	r7, sp, #0
 800445a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800445e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004462:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004466:	430b      	orrs	r3, r1
 8004468:	d145      	bne.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800446a:	4ba7      	ldr	r3, [pc, #668]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800446c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004474:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004476:	4ba4      	ldr	r3, [pc, #656]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d108      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448a:	d104      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800448c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
 8004492:	f001 b8fc 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004496:	4b9c      	ldr	r3, [pc, #624]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800449c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a4:	d114      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ac:	d110      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80044ae:	4b96      	ldr	r3, [pc, #600]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044bc:	d103      	bne.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80044be:	23fa      	movs	r3, #250	; 0xfa
 80044c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80044c2:	f001 b8e4 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80044c6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80044cc:	f001 b8df 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80044d0:	4b8d      	ldr	r3, [pc, #564]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044dc:	d107      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e4:	d103      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80044e6:	4b89      	ldr	r3, [pc, #548]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ea:	f001 b8d0 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
 80044f2:	f001 b8cc 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80044f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80044fe:	430b      	orrs	r3, r1
 8004500:	d151      	bne.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004502:	4b81      	ldr	r3, [pc, #516]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004504:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004508:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800450c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d035      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d841      	bhi.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	2b60      	cmp	r3, #96	; 0x60
 800451e:	d02a      	beq.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2b60      	cmp	r3, #96	; 0x60
 8004524:	d83b      	bhi.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d009      	beq.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d835      	bhi.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00c      	beq.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2b20      	cmp	r3, #32
 800453c:	d012      	beq.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800453e:	e02e      	b.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fb53 	bl	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800454e:	f001 b89e 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004552:	f107 0318 	add.w	r3, r7, #24
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fcb0 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004560:	f001 b895 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004564:	f107 030c 	add.w	r3, r7, #12
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fe0d 	bl	8004188 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004572:	f001 b88c 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004576:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800457c:	f001 b887 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004580:	4b61      	ldr	r3, [pc, #388]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458c:	d103      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800458e:	4b60      	ldr	r3, [pc, #384]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004592:	f001 b87c 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800459a:	f001 b878 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045a2:	f001 b874 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80045a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045aa:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80045ae:	430b      	orrs	r3, r1
 80045b0:	d158      	bne.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80045b2:	4b55      	ldr	r3, [pc, #340]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c4:	d03b      	beq.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045cc:	d846      	bhi.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d4:	d02e      	beq.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045dc:	d83e      	bhi.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e4:	d00b      	beq.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d836      	bhi.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fa:	d012      	beq.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80045fc:	e02e      	b.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff faf4 	bl	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800460c:	f001 b83f 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004610:	f107 0318 	add.w	r3, r7, #24
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fc51 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800461e:	f001 b836 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004622:	f107 030c 	add.w	r3, r7, #12
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fdae 	bl	8004188 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004630:	f001 b82d 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004634:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800463a:	f001 b828 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800463e:	4b32      	ldr	r3, [pc, #200]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d103      	bne.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800464c:	4b30      	ldr	r3, [pc, #192]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800464e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004650:	f001 b81d 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004658:	f001 b819 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004660:	f001 b815 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004668:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800466c:	430b      	orrs	r3, r1
 800466e:	d126      	bne.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004672:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800467c:	4b22      	ldr	r3, [pc, #136]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004688:	d106      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004690:	4b1f      	ldr	r3, [pc, #124]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
 8004694:	f000 bffb 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d107      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ac:	d103      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80046ae:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
 80046b2:	f000 bfec 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
 80046ba:	f000 bfe8 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80046be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80046c6:	430b      	orrs	r3, r1
 80046c8:	d164      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046d0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80046d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046dc:	d03d      	beq.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046e4:	d852      	bhi.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ec:	d014      	beq.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f4:	d84a      	bhi.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01f      	beq.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004702:	d012      	beq.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004704:	e042      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004706:	bf00      	nop
 8004708:	46020c00 	.word	0x46020c00
 800470c:	0007a120 	.word	0x0007a120
 8004710:	00f42400 	.word	0x00f42400
 8004714:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fa67 	bl	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004726:	f000 bfb2 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800472a:	f107 0318 	add.w	r3, r7, #24
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fbc4 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004738:	f000 bfa9 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800473c:	4bab      	ldr	r3, [pc, #684]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004748:	d103      	bne.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800474a:	4ba9      	ldr	r3, [pc, #676]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800474e:	f000 bf9e 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004756:	f000 bf9a 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800475a:	4ba4      	ldr	r3, [pc, #656]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004766:	4ba1      	ldr	r3, [pc, #644]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	0e1b      	lsrs	r3, r3, #24
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	e006      	b.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8004772:	4b9e      	ldr	r3, [pc, #632]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	0e1b      	lsrs	r3, r3, #24
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	4a9c      	ldr	r2, [pc, #624]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004788:	f000 bf81 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004790:	f000 bf7d 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004798:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800479c:	430b      	orrs	r3, r1
 800479e:	d175      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80047a0:	4b92      	ldr	r3, [pc, #584]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80047a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80047a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d15b      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80047b2:	4b8e      	ldr	r3, [pc, #568]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80047b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047b8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80047bc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047c4:	d034      	beq.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047cc:	d849      	bhi.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d4:	d00b      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047dc:	d841      	bhi.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d016      	beq.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ea:	d009      	beq.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80047ec:	e039      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff f9fc 	bl	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80047fc:	f000 bf47 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004800:	f107 0318 	add.w	r3, r7, #24
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fb59 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800480e:	f000 bf3e 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004812:	4b76      	ldr	r3, [pc, #472]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800481a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481e:	d103      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8004820:	4b73      	ldr	r3, [pc, #460]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004824:	f000 bf33 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800482c:	f000 bf2f 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004830:	4b6e      	ldr	r3, [pc, #440]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800483c:	4b6b      	ldr	r3, [pc, #428]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	0e1b      	lsrs	r3, r3, #24
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	e006      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8004848:	4b68      	ldr	r3, [pc, #416]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800484a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	0e1b      	lsrs	r3, r3, #24
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	4a67      	ldr	r2, [pc, #412]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800485e:	f000 bf16 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004866:	f000 bf12 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004870:	d108      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f9ba 	bl	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
 8004880:	f000 bf05 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
 8004888:	f000 bf01 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800488c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004890:	1e51      	subs	r1, r2, #1
 8004892:	430b      	orrs	r3, r1
 8004894:	d136      	bne.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004896:	4b55      	ldr	r3, [pc, #340]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80048a8:	f7fe fb34 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 80048ac:	6378      	str	r0, [r7, #52]	; 0x34
 80048ae:	f000 beee 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d104      	bne.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048b8:	f7fe f9f6 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 80048bc:	6378      	str	r0, [r7, #52]	; 0x34
 80048be:	f000 bee6 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80048c2:	4b4a      	ldr	r3, [pc, #296]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ce:	d106      	bne.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80048d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d103      	bne.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 80048d6:	4b48      	ldr	r3, [pc, #288]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
 80048da:	f000 bed8 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80048de:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d107      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d104      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80048f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
 80048f8:	f000 bec9 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004900:	f000 bec5 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004908:	1e91      	subs	r1, r2, #2
 800490a:	430b      	orrs	r3, r1
 800490c:	d136      	bne.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800490e:	4b37      	ldr	r3, [pc, #220]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004920:	f7fe fae4 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8004924:	6378      	str	r0, [r7, #52]	; 0x34
 8004926:	f000 beb2 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004930:	f7fe f9ba 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8004934:	6378      	str	r0, [r7, #52]	; 0x34
 8004936:	f000 beaa 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800493a:	4b2c      	ldr	r3, [pc, #176]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004946:	d106      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	2b08      	cmp	r3, #8
 800494c:	d103      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800494e:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
 8004952:	f000 be9c 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004956:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b02      	cmp	r3, #2
 8004962:	d107      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d104      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800496a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
 8004970:	f000 be8d 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
 8004978:	f000 be89 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800497c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004980:	1f11      	subs	r1, r2, #4
 8004982:	430b      	orrs	r3, r1
 8004984:	d13e      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004986:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800498c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004990:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004998:	f7fe faa8 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 800499c:	6378      	str	r0, [r7, #52]	; 0x34
 800499e:	f000 be76 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d104      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80049a8:	f7fe f97e 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 80049ac:	6378      	str	r0, [r7, #52]	; 0x34
 80049ae:	f000 be6e 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049be:	d106      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d103      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ca:	f000 be60 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80049d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d10f      	bne.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	2b30      	cmp	r3, #48	; 0x30
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
 80049e8:	f000 be51 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80049ec:	46020c00 	.word	0x46020c00
 80049f0:	02dc6c00 	.word	0x02dc6c00
 80049f4:	0800a6dc 	.word	0x0800a6dc
 80049f8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004a00:	f000 be45 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a08:	f1a2 0108 	sub.w	r1, r2, #8
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	d136      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004a10:	4b9f      	ldr	r3, [pc, #636]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a1a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a22:	f7fe fa63 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8004a26:	6378      	str	r0, [r7, #52]	; 0x34
 8004a28:	f000 be31 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d104      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a32:	f7fe f939 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8004a36:	6378      	str	r0, [r7, #52]	; 0x34
 8004a38:	f000 be29 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004a3c:	4b94      	ldr	r3, [pc, #592]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	2b80      	cmp	r3, #128	; 0x80
 8004a4e:	d103      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8004a50:	4b90      	ldr	r3, [pc, #576]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
 8004a54:	f000 be1b 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004a58:	4b8d      	ldr	r3, [pc, #564]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d107      	bne.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	2bc0      	cmp	r3, #192	; 0xc0
 8004a6a:	d104      	bne.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8004a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
 8004a72:	f000 be0c 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7a:	f000 be08 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a82:	f1a2 0110 	sub.w	r1, r2, #16
 8004a86:	430b      	orrs	r3, r1
 8004a88:	d139      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004a8a:	4b81      	ldr	r3, [pc, #516]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a94:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a9c:	f7fe fa26 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8004aa0:	6378      	str	r0, [r7, #52]	; 0x34
 8004aa2:	f000 bdf4 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aac:	d104      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004aae:	f7fe f8fb 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8004ab2:	6378      	str	r0, [r7, #52]	; 0x34
 8004ab4:	f000 bdeb 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004ab8:	4b75      	ldr	r3, [pc, #468]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004acc:	d103      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8004ace:	4b71      	ldr	r3, [pc, #452]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad2:	f000 bddc 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004ad6:	4b6e      	ldr	r3, [pc, #440]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d108      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aea:	d104      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8004aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
 8004af2:	f000 bdcc 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
 8004afa:	f000 bdc8 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b02:	f1a2 0120 	sub.w	r1, r2, #32
 8004b06:	430b      	orrs	r3, r1
 8004b08:	d158      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004b0a:	4b61      	ldr	r3, [pc, #388]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004b1c:	f7fe fa0e 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8004b20:	6378      	str	r0, [r7, #52]	; 0x34
 8004b22:	f000 bdb4 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d104      	bne.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b2c:	f7fe f8bc 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8004b30:	6378      	str	r0, [r7, #52]	; 0x34
 8004b32:	f000 bdac 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004b36:	4b56      	ldr	r3, [pc, #344]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b42:	d106      	bne.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d103      	bne.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8004b4a:	4b52      	ldr	r3, [pc, #328]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4e:	f000 bd9e 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004b52:	4b4f      	ldr	r3, [pc, #316]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d104      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6c:	f000 bd8f 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004b70:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d11b      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d118      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b82:	4b43      	ldr	r3, [pc, #268]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004b8e:	4b40      	ldr	r3, [pc, #256]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0e1b      	lsrs	r3, r3, #24
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	e006      	b.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8004b9a:	4b3d      	ldr	r3, [pc, #244]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	0e1b      	lsrs	r3, r3, #24
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	4a3b      	ldr	r2, [pc, #236]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bae:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb0:	f000 bd6d 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb8:	f000 bd69 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	d169      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004bc8:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bda:	d104      	bne.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004bdc:	f7fe f864 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8004be0:	6378      	str	r0, [r7, #52]	; 0x34
 8004be2:	f000 bd54 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bec:	d108      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bee:	f107 0318 	add.w	r3, r7, #24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff f962 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	f000 bd47 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004c06:	f7fe f957 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8004c0a:	6378      	str	r0, [r7, #52]	; 0x34
 8004c0c:	f000 bd3f 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004c16:	d118      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004c24:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	0f1b      	lsrs	r3, r3, #28
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	e006      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8004c30:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	0f1b      	lsrs	r3, r3, #28
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
 8004c46:	f000 bd22 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c56:	d107      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c5e:	d103      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
 8004c64:	f000 bd13 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004c68:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c74:	d107      	bne.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c7c:	d103      	bne.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
 8004c82:	f000 bd04 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
 8004c8a:	f000 bd00 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004c8e:	bf00      	nop
 8004c90:	46020c00 	.word	0x46020c00
 8004c94:	00f42400 	.word	0x00f42400
 8004c98:	0800a6dc 	.word	0x0800a6dc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	d14e      	bne.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004ca8:	4ba8      	ldr	r3, [pc, #672]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004caa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d841      	bhi.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004cf9 	.word	0x08004cf9
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004ce7 	.word	0x08004ce7
 8004ccc:	08004d03 	.word	0x08004d03
 8004cd0:	08004d0d 	.word	0x08004d0d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fe ff89 	bl	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ce2:	f000 bcd4 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ce6:	f107 030c 	add.w	r3, r7, #12
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fa4c 	bl	8004188 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cf4:	f000 bccb 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004cf8:	f7fe f8de 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8004cfc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004cfe:	f000 bcc6 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004d02:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d08:	f000 bcc1 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d0c:	4b8f      	ldr	r3, [pc, #572]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8004d18:	4b8c      	ldr	r3, [pc, #560]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	0e1b      	lsrs	r3, r3, #24
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	e006      	b.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004d24:	4b89      	ldr	r3, [pc, #548]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	0e1b      	lsrs	r3, r3, #24
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	4a87      	ldr	r2, [pc, #540]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d3a:	f000 bca8 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d42:	f000 bca4 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d4a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	d15d      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004d52:	4b7e      	ldr	r3, [pc, #504]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d58:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004d5c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d64:	d036      	beq.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d6c:	d84b      	bhi.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d74:	d029      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d7c:	d843      	bhi.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d84:	d013      	beq.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8c:	d83b      	bhi.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d015      	beq.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9a:	d134      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe ff25 	bl	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004daa:	f000 bc70 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dae:	f107 030c 	add.w	r3, r7, #12
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff f9e8 	bl	8004188 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dbc:	f000 bc67 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004dc0:	f7fe f87a 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8004dc4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004dc6:	f000 bc62 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004dca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dd0:	f000 bc5d 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004dd4:	4b5d      	ldr	r3, [pc, #372]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004de0:	4b5a      	ldr	r3, [pc, #360]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	0e1b      	lsrs	r3, r3, #24
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	e006      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004dec:	4b57      	ldr	r3, [pc, #348]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	0e1b      	lsrs	r3, r3, #24
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	4a55      	ldr	r2, [pc, #340]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e02:	f000 bc44 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e0a:	f000 bc40 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e12:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004e16:	430b      	orrs	r3, r1
 8004e18:	d14a      	bne.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004e1a:	4b4c      	ldr	r3, [pc, #304]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e24:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fe f85e 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8004e30:	6378      	str	r0, [r7, #52]	; 0x34
 8004e32:	f000 bc2c 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3c:	d104      	bne.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fd ff33 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8004e42:	6378      	str	r0, [r7, #52]	; 0x34
 8004e44:	f000 bc23 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004e48:	4b40      	ldr	r3, [pc, #256]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d107      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5c:	d103      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8004e5e:	4b3d      	ldr	r3, [pc, #244]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
 8004e62:	f000 bc14 	b.w	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004e66:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d11b      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e78:	d117      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e7a:	4b34      	ldr	r3, [pc, #208]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004e86:	4b31      	ldr	r3, [pc, #196]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	0e1b      	lsrs	r3, r3, #24
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	e006      	b.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004e92:	4b2e      	ldr	r3, [pc, #184]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	0e1b      	lsrs	r3, r3, #24
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	4a2b      	ldr	r2, [pc, #172]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea8:	e3f1      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
 8004eae:	e3ee      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	d14d      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004ebc:	4b23      	ldr	r3, [pc, #140]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ec2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ec6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004ece:	f7fe f80d 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8004ed2:	6378      	str	r0, [r7, #52]	; 0x34
 8004ed4:	e3db      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004edc:	d103      	bne.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ede:	f7fd fee3 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8004ee2:	6378      	str	r0, [r7, #52]	; 0x34
 8004ee4:	e3d3      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004ee6:	4b19      	ldr	r3, [pc, #100]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efa:	d102      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8004efc:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
 8004f00:	e3c5      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d11b      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f14:	d117      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f16:	4b0d      	ldr	r3, [pc, #52]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0e1b      	lsrs	r3, r3, #24
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	e006      	b.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004f2e:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004f30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f34:	041b      	lsls	r3, r3, #16
 8004f36:	0e1b      	lsrs	r3, r3, #24
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
 8004f44:	e3a3      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4a:	e3a0      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004f4c:	46020c00 	.word	0x46020c00
 8004f50:	0800a6dc 	.word	0x0800a6dc
 8004f54:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f5c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004f60:	430b      	orrs	r3, r1
 8004f62:	d148      	bne.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004f64:	4b9d      	ldr	r3, [pc, #628]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2bc0      	cmp	r3, #192	; 0xc0
 8004f74:	d024      	beq.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	2bc0      	cmp	r3, #192	; 0xc0
 8004f7a:	d839      	bhi.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	d00d      	beq.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	2b80      	cmp	r3, #128	; 0x80
 8004f86:	d833      	bhi.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d011      	beq.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004f94:	e02c      	b.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004f96:	f7fd ffd1 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8004f9a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004f9c:	e377      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f9e:	4b8f      	ldr	r3, [pc, #572]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004faa:	d102      	bne.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8004fac:	4b8c      	ldr	r3, [pc, #560]	; (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004fae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fb0:	e36d      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fb6:	e36a      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004fb8:	f7fd fe76 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8004fbc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004fbe:	e366      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004fc0:	4b86      	ldr	r3, [pc, #536]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8004fcc:	4b83      	ldr	r3, [pc, #524]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	0f1b      	lsrs	r3, r3, #28
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	e006      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8004fd8:	4b80      	ldr	r3, [pc, #512]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fde:	041b      	lsls	r3, r3, #16
 8004fe0:	0f1b      	lsrs	r3, r3, #28
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	4a7f      	ldr	r2, [pc, #508]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fee:	e34e      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ff4:	e34b      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffa:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004ffe:	430b      	orrs	r3, r1
 8005000:	d147      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005002:	4b76      	ldr	r3, [pc, #472]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800500c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	2b00      	cmp	r3, #0
 8005012:	d103      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005014:	f7fd ff6a 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8005018:	6378      	str	r0, [r7, #52]	; 0x34
 800501a:	e338      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005022:	d103      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005024:	f7fd fe40 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8005028:	6378      	str	r0, [r7, #52]	; 0x34
 800502a:	e330      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800502c:	4b6b      	ldr	r3, [pc, #428]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005038:	d106      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005040:	d102      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8005042:	4b67      	ldr	r3, [pc, #412]	; (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
 8005046:	e322      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005048:	4b64      	ldr	r3, [pc, #400]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b20      	cmp	r3, #32
 8005052:	d11b      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800505a:	d117      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800505c:	4b5f      	ldr	r3, [pc, #380]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8005068:	4b5c      	ldr	r3, [pc, #368]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	e006      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8005074:	4b59      	ldr	r3, [pc, #356]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	0e1b      	lsrs	r3, r3, #24
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	4a58      	ldr	r2, [pc, #352]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
 800508a:	e300      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
 8005090:	e2fd      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005096:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800509a:	430b      	orrs	r3, r1
 800509c:	d15b      	bne.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800509e:	4b4f      	ldr	r3, [pc, #316]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80050a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d117      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050b0:	4b4a      	ldr	r3, [pc, #296]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 80050bc:	4b47      	ldr	r3, [pc, #284]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	0e1b      	lsrs	r3, r3, #24
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	e006      	b.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 80050c8:	4b44      	ldr	r3, [pc, #272]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80050ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	0e1b      	lsrs	r3, r3, #24
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	4a43      	ldr	r2, [pc, #268]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80050d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	e2d6      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80050e0:	4b3e      	ldr	r3, [pc, #248]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80050e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ee:	d112      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f6:	d10e      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050f8:	4b38      	ldr	r3, [pc, #224]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80050fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005106:	d102      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8005108:	23fa      	movs	r3, #250	; 0xfa
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800510c:	e2bf      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800510e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005114:	e2bb      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005122:	d106      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800512a:	d102      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800512c:	4b2c      	ldr	r3, [pc, #176]	; (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
 8005130:	e2ad      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b02      	cmp	r3, #2
 800513e:	d107      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005146:	d103      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8005148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514c:	637b      	str	r3, [r7, #52]	; 0x34
 800514e:	e29e      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
 8005154:	e29b      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800515a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800515e:	430b      	orrs	r3, r1
 8005160:	d162      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005162:	4b1e      	ldr	r3, [pc, #120]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800516c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	2b00      	cmp	r3, #0
 8005172:	d117      	bne.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8005180:	4b16      	ldr	r3, [pc, #88]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	0e1b      	lsrs	r3, r3, #24
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	e006      	b.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800518c:	4b13      	ldr	r3, [pc, #76]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800518e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005192:	041b      	lsls	r3, r3, #16
 8005194:	0e1b      	lsrs	r3, r3, #24
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800519c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
 80051a2:	e274      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80051a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b2:	d119      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ba:	d115      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80051bc:	4b07      	ldr	r3, [pc, #28]	; (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80051be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ca:	d102      	bne.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 80051cc:	23fa      	movs	r3, #250	; 0xfa
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80051d0:	e25d      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80051d2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80051d8:	e259      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80051da:	bf00      	nop
 80051dc:	46020c00 	.word	0x46020c00
 80051e0:	00f42400 	.word	0x00f42400
 80051e4:	0800a6dc 	.word	0x0800a6dc
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80051e8:	4b9d      	ldr	r3, [pc, #628]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f4:	d106      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fc:	d102      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 80051fe:	4b99      	ldr	r3, [pc, #612]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
 8005202:	e244      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005204:	4b96      	ldr	r3, [pc, #600]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b02      	cmp	r3, #2
 8005210:	d107      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005218:	d103      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
 8005220:	e235      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	637b      	str	r3, [r7, #52]	; 0x34
 8005226:	e232      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800522c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005230:	430b      	orrs	r3, r1
 8005232:	d147      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005234:	4b8a      	ldr	r3, [pc, #552]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800523a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800523e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	2b00      	cmp	r3, #0
 8005244:	d103      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005246:	f7fd fe51 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 800524a:	6378      	str	r0, [r7, #52]	; 0x34
 800524c:	e21f      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800524e:	4b84      	ldr	r3, [pc, #528]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800525c:	d112      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005264:	d10e      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005266:	4b7e      	ldr	r3, [pc, #504]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800526c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005274:	d102      	bne.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8005276:	23fa      	movs	r3, #250	; 0xfa
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800527a:	e208      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800527c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005282:	e204      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005284:	4b76      	ldr	r3, [pc, #472]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005290:	d106      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005298:	d102      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800529a:	4b72      	ldr	r3, [pc, #456]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
 800529e:	e1f6      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80052a0:	4b6f      	ldr	r3, [pc, #444]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80052a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d107      	bne.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80052b4:	d103      	bne.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80052b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
 80052bc:	e1e7      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
 80052c2:	e1e4      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80052c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c8:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80052cc:	430b      	orrs	r3, r1
 80052ce:	d12d      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80052d0:	4b63      	ldr	r3, [pc, #396]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80052d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052d6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80052da:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80052dc:	4b60      	ldr	r3, [pc, #384]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052e8:	d105      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d102      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 80052f0:	4b5c      	ldr	r3, [pc, #368]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
 80052f4:	e1cb      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052fc:	d107      	bne.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fc74 	bl	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
 800530c:	e1bf      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005314:	d107      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005316:	f107 0318 	add.w	r3, r7, #24
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe fdce 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
 8005324:	e1b3      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	e1b0      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800532c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005330:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005334:	430b      	orrs	r3, r1
 8005336:	d14d      	bne.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005338:	4b49      	ldr	r3, [pc, #292]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800533a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800533e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005342:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800534a:	d028      	beq.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005352:	d83c      	bhi.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800535a:	d013      	beq.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005362:	d834      	bhi.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005370:	d004      	beq.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005372:	e02c      	b.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005374:	f7fd fdce 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8005378:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800537a:	e188      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800537c:	f7fd fc94 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8005380:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005382:	e184      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005384:	4b36      	ldr	r3, [pc, #216]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d102      	bne.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8005392:	4b34      	ldr	r3, [pc, #208]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005396:	e17a      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800539c:	e177      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800539e:	4b30      	ldr	r3, [pc, #192]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80053aa:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	0e1b      	lsrs	r3, r3, #24
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	e006      	b.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80053b6:	4b2a      	ldr	r3, [pc, #168]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80053b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	0e1b      	lsrs	r3, r3, #24
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	4a28      	ldr	r2, [pc, #160]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 80053c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053cc:	e15f      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053d2:	e15c      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80053d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d8:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80053dc:	430b      	orrs	r3, r1
 80053de:	d154      	bne.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80053e0:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80053e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ea:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053f2:	d028      	beq.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053fa:	d843      	bhi.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005402:	d013      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540a:	d83b      	bhi.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d004      	beq.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800541a:	e033      	b.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800541c:	f7fd fd66 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8005420:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005422:	e134      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005424:	f7fd fc40 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8005428:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800542a:	e130      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005438:	d102      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800543e:	e126      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005444:	e123      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8005452:	4b03      	ldr	r3, [pc, #12]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	0e1b      	lsrs	r3, r3, #24
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	e00d      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800545e:	bf00      	nop
 8005460:	46020c00 	.word	0x46020c00
 8005464:	00f42400 	.word	0x00f42400
 8005468:	0800a6dc 	.word	0x0800a6dc
 800546c:	4b8a      	ldr	r3, [pc, #552]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800546e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005472:	041b      	lsls	r3, r3, #16
 8005474:	0e1b      	lsrs	r3, r3, #24
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	4a88      	ldr	r2, [pc, #544]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800547c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005482:	e104      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005488:	e101      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800548a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800548e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005492:	430b      	orrs	r3, r1
 8005494:	d16e      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005496:	4b80      	ldr	r3, [pc, #512]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800549c:	f003 0318 	and.w	r3, r3, #24
 80054a0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	2b18      	cmp	r3, #24
 80054a6:	d862      	bhi.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	08005515 	.word	0x08005515
 80054b4:	0800556f 	.word	0x0800556f
 80054b8:	0800556f 	.word	0x0800556f
 80054bc:	0800556f 	.word	0x0800556f
 80054c0:	0800556f 	.word	0x0800556f
 80054c4:	0800556f 	.word	0x0800556f
 80054c8:	0800556f 	.word	0x0800556f
 80054cc:	0800556f 	.word	0x0800556f
 80054d0:	0800551d 	.word	0x0800551d
 80054d4:	0800556f 	.word	0x0800556f
 80054d8:	0800556f 	.word	0x0800556f
 80054dc:	0800556f 	.word	0x0800556f
 80054e0:	0800556f 	.word	0x0800556f
 80054e4:	0800556f 	.word	0x0800556f
 80054e8:	0800556f 	.word	0x0800556f
 80054ec:	0800556f 	.word	0x0800556f
 80054f0:	08005525 	.word	0x08005525
 80054f4:	0800556f 	.word	0x0800556f
 80054f8:	0800556f 	.word	0x0800556f
 80054fc:	0800556f 	.word	0x0800556f
 8005500:	0800556f 	.word	0x0800556f
 8005504:	0800556f 	.word	0x0800556f
 8005508:	0800556f 	.word	0x0800556f
 800550c:	0800556f 	.word	0x0800556f
 8005510:	0800553f 	.word	0x0800553f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005514:	f7fd fd12 	bl	8002f3c <HAL_RCC_GetPCLK3Freq>
 8005518:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800551a:	e0b8      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800551c:	f7fd fbc4 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 8005520:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005522:	e0b4      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005524:	4b5c      	ldr	r3, [pc, #368]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005530:	d102      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8005532:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005536:	e0aa      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800553c:	e0a7      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800553e:	4b56      	ldr	r3, [pc, #344]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800554a:	4b53      	ldr	r3, [pc, #332]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	0e1b      	lsrs	r3, r3, #24
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	e006      	b.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8005556:	4b50      	ldr	r3, [pc, #320]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	0e1b      	lsrs	r3, r3, #24
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	4a4d      	ldr	r2, [pc, #308]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8005566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800556c:	e08f      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005572:	e08c      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005578:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800557c:	430b      	orrs	r3, r1
 800557e:	d14c      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005580:	4b45      	ldr	r3, [pc, #276]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005582:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005586:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800558a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005592:	d013      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800559a:	d83b      	bhi.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a2:	d013      	beq.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055aa:	d833      	bhi.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d014      	beq.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b8:	d014      	beq.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80055ba:	e02b      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055bc:	f107 0318 	add.w	r3, r7, #24
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe fc7b 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055ca:	e060      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe fb0d 	bl	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055da:	e058      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80055dc:	f7fd fb64 	bl	8002ca8 <HAL_RCC_GetSysClockFreq>
 80055e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80055e2:	e054      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055e4:	4b2c      	ldr	r3, [pc, #176]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80055f0:	4b29      	ldr	r3, [pc, #164]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	0e1b      	lsrs	r3, r3, #24
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	e006      	b.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80055fc:	4b26      	ldr	r3, [pc, #152]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80055fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	0e1b      	lsrs	r3, r3, #24
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	4a24      	ldr	r2, [pc, #144]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800560c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005612:	e03c      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005618:	e039      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800561a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800561e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005622:	430b      	orrs	r3, r1
 8005624:	d131      	bne.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005626:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800562c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005630:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005632:	4b19      	ldr	r3, [pc, #100]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d106      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8005646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
 800564c:	e01f      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565c:	d112      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005664:	d10e      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800566c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005674:	d102      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8005676:	23fa      	movs	r3, #250	; 0xfa
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800567a:	e008      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800567c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005682:	e004      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
 8005688:	e001      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005690:	4618      	mov	r0, r3
 8005692:	3738      	adds	r7, #56	; 0x38
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	46020c00 	.word	0x46020c00
 800569c:	0800a6dc 	.word	0x0800a6dc
 80056a0:	00f42400 	.word	0x00f42400

080056a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80056ac:	4b47      	ldr	r3, [pc, #284]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a46      	ldr	r2, [pc, #280]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 80056b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056b8:	f7fb fd42 	bl	8001140 <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056be:	e008      	b.n	80056d2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056c0:	f7fb fd3e 	bl	8001140 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e077      	b.n	80057c2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056d2:	4b3e      	ldr	r3, [pc, #248]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f0      	bne.n	80056c0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80056de:	4b3b      	ldr	r3, [pc, #236]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6811      	ldr	r1, [r2, #0]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6852      	ldr	r2, [r2, #4]
 80056f2:	3a01      	subs	r2, #1
 80056f4:	0212      	lsls	r2, r2, #8
 80056f6:	430a      	orrs	r2, r1
 80056f8:	4934      	ldr	r1, [pc, #208]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 80056fe:	4b33      	ldr	r3, [pc, #204]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 8005700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005702:	4b33      	ldr	r3, [pc, #204]	; (80057d0 <RCCEx_PLL2_Config+0x12c>)
 8005704:	4013      	ands	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6892      	ldr	r2, [r2, #8]
 800570a:	3a01      	subs	r2, #1
 800570c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68d2      	ldr	r2, [r2, #12]
 8005714:	3a01      	subs	r2, #1
 8005716:	0252      	lsls	r2, r2, #9
 8005718:	b292      	uxth	r2, r2
 800571a:	4311      	orrs	r1, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6912      	ldr	r2, [r2, #16]
 8005720:	3a01      	subs	r2, #1
 8005722:	0412      	lsls	r2, r2, #16
 8005724:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005728:	4311      	orrs	r1, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6952      	ldr	r2, [r2, #20]
 800572e:	3a01      	subs	r2, #1
 8005730:	0612      	lsls	r2, r2, #24
 8005732:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005736:	430a      	orrs	r2, r1
 8005738:	4924      	ldr	r1, [pc, #144]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 800573a:	4313      	orrs	r3, r2
 800573c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800573e:	4b23      	ldr	r3, [pc, #140]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	f023 020c 	bic.w	r2, r3, #12
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	4920      	ldr	r1, [pc, #128]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 800574c:	4313      	orrs	r3, r2
 800574e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005750:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 8005752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	491c      	ldr	r1, [pc, #112]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 800575a:	4313      	orrs	r3, r2
 800575c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800575e:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	4a1a      	ldr	r2, [pc, #104]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 8005764:	f023 0310 	bic.w	r3, r3, #16
 8005768:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800576a:	4b18      	ldr	r3, [pc, #96]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005772:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	69d2      	ldr	r2, [r2, #28]
 800577a:	00d2      	lsls	r2, r2, #3
 800577c:	4913      	ldr	r1, [pc, #76]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 800577e:	4313      	orrs	r3, r2
 8005780:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	4a11      	ldr	r2, [pc, #68]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 8005788:	f043 0310 	orr.w	r3, r3, #16
 800578c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800578e:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 8005794:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005798:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800579a:	f7fb fcd1 	bl	8001140 <HAL_GetTick>
 800579e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057a0:	e008      	b.n	80057b4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057a2:	f7fb fccd 	bl	8001140 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e006      	b.n	80057c2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <RCCEx_PLL2_Config+0x128>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0

}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	46020c00 	.word	0x46020c00
 80057d0:	80800000 	.word	0x80800000

080057d4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80057dc:	4b47      	ldr	r3, [pc, #284]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a46      	ldr	r2, [pc, #280]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 80057e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057e8:	f7fb fcaa 	bl	8001140 <HAL_GetTick>
 80057ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057ee:	e008      	b.n	8005802 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057f0:	f7fb fca6 	bl	8001140 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e077      	b.n	80058f2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005802:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800580e:	4b3b      	ldr	r3, [pc, #236]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6811      	ldr	r1, [r2, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6852      	ldr	r2, [r2, #4]
 8005822:	3a01      	subs	r2, #1
 8005824:	0212      	lsls	r2, r2, #8
 8005826:	430a      	orrs	r2, r1
 8005828:	4934      	ldr	r1, [pc, #208]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 800582a:	4313      	orrs	r3, r2
 800582c:	630b      	str	r3, [r1, #48]	; 0x30
 800582e:	4b33      	ldr	r3, [pc, #204]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 8005830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005832:	4b33      	ldr	r3, [pc, #204]	; (8005900 <RCCEx_PLL3_Config+0x12c>)
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6892      	ldr	r2, [r2, #8]
 800583a:	3a01      	subs	r2, #1
 800583c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	68d2      	ldr	r2, [r2, #12]
 8005844:	3a01      	subs	r2, #1
 8005846:	0252      	lsls	r2, r2, #9
 8005848:	b292      	uxth	r2, r2
 800584a:	4311      	orrs	r1, r2
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6912      	ldr	r2, [r2, #16]
 8005850:	3a01      	subs	r2, #1
 8005852:	0412      	lsls	r2, r2, #16
 8005854:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005858:	4311      	orrs	r1, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6952      	ldr	r2, [r2, #20]
 800585e:	3a01      	subs	r2, #1
 8005860:	0612      	lsls	r2, r2, #24
 8005862:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005866:	430a      	orrs	r2, r1
 8005868:	4924      	ldr	r1, [pc, #144]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 800586a:	4313      	orrs	r3, r2
 800586c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800586e:	4b23      	ldr	r3, [pc, #140]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	f023 020c 	bic.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	4920      	ldr	r1, [pc, #128]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 800587c:	4313      	orrs	r3, r2
 800587e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005880:	4b1e      	ldr	r3, [pc, #120]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 8005882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	491c      	ldr	r1, [pc, #112]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 800588a:	4313      	orrs	r3, r2
 800588c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 8005894:	f023 0310 	bic.w	r3, r3, #16
 8005898:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800589a:	4b18      	ldr	r3, [pc, #96]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 800589c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	69d2      	ldr	r2, [r2, #28]
 80058aa:	00d2      	lsls	r2, r2, #3
 80058ac:	4913      	ldr	r1, [pc, #76]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80058b2:	4b12      	ldr	r3, [pc, #72]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4a11      	ldr	r2, [pc, #68]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 80058b8:	f043 0310 	orr.w	r3, r3, #16
 80058bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80058be:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 80058c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058ca:	f7fb fc39 	bl	8001140 <HAL_GetTick>
 80058ce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058d0:	e008      	b.n	80058e4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80058d2:	f7fb fc35 	bl	8001140 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e006      	b.n	80058f2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <RCCEx_PLL3_Config+0x128>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0f0      	beq.n	80058d2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	46020c00 	.word	0x46020c00
 8005900:	80800000 	.word	0x80800000

08005904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e049      	b.n	80059aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fb fa44 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f000 f8ce 	bl	8005ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d001      	beq.n	80059cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e06a      	b.n	8005aa2 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a35      	ldr	r2, [pc, #212]	; (8005ab0 <HAL_TIM_Base_Start+0xfc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d040      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a34      	ldr	r2, [pc, #208]	; (8005ab4 <HAL_TIM_Base_Start+0x100>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d03b      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f0:	d036      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059fa:	d031      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <HAL_TIM_Base_Start+0x104>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d02c      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2c      	ldr	r2, [pc, #176]	; (8005abc <HAL_TIM_Base_Start+0x108>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d027      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a2a      	ldr	r2, [pc, #168]	; (8005ac0 <HAL_TIM_Base_Start+0x10c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d022      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a29      	ldr	r2, [pc, #164]	; (8005ac4 <HAL_TIM_Base_Start+0x110>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d01d      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <HAL_TIM_Base_Start+0x114>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d018      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a26      	ldr	r2, [pc, #152]	; (8005acc <HAL_TIM_Base_Start+0x118>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <HAL_TIM_Base_Start+0x11c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00e      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <HAL_TIM_Base_Start+0x120>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d009      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <HAL_TIM_Base_Start+0x124>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <HAL_TIM_Base_Start+0xac>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a20      	ldr	r2, [pc, #128]	; (8005adc <HAL_TIM_Base_Start+0x128>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d115      	bne.n	8005a8c <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <HAL_TIM_Base_Start+0x12c>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d015      	beq.n	8005a9e <HAL_TIM_Base_Start+0xea>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d011      	beq.n	8005a9e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8a:	e008      	b.n	8005a9e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e000      	b.n	8005aa0 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	50012c00 	.word	0x50012c00
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	50000400 	.word	0x50000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	50000800 	.word	0x50000800
 8005ac8:	40000c00 	.word	0x40000c00
 8005acc:	50000c00 	.word	0x50000c00
 8005ad0:	40013400 	.word	0x40013400
 8005ad4:	50013400 	.word	0x50013400
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	50014000 	.word	0x50014000
 8005ae0:	00010007 	.word	0x00010007

08005ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a68      	ldr	r2, [pc, #416]	; (8005c98 <TIM_Base_SetConfig+0x1b4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d02b      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a67      	ldr	r2, [pc, #412]	; (8005c9c <TIM_Base_SetConfig+0x1b8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d027      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d023      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b12:	d01f      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a62      	ldr	r2, [pc, #392]	; (8005ca0 <TIM_Base_SetConfig+0x1bc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d01b      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a61      	ldr	r2, [pc, #388]	; (8005ca4 <TIM_Base_SetConfig+0x1c0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d017      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a60      	ldr	r2, [pc, #384]	; (8005ca8 <TIM_Base_SetConfig+0x1c4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a5f      	ldr	r2, [pc, #380]	; (8005cac <TIM_Base_SetConfig+0x1c8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00f      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a5e      	ldr	r2, [pc, #376]	; (8005cb0 <TIM_Base_SetConfig+0x1cc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a5d      	ldr	r2, [pc, #372]	; (8005cb4 <TIM_Base_SetConfig+0x1d0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a5c      	ldr	r2, [pc, #368]	; (8005cb8 <TIM_Base_SetConfig+0x1d4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_Base_SetConfig+0x70>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a5b      	ldr	r2, [pc, #364]	; (8005cbc <TIM_Base_SetConfig+0x1d8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d108      	bne.n	8005b66 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a4b      	ldr	r2, [pc, #300]	; (8005c98 <TIM_Base_SetConfig+0x1b4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d043      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a4a      	ldr	r2, [pc, #296]	; (8005c9c <TIM_Base_SetConfig+0x1b8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d03f      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7c:	d03b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b84:	d037      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a45      	ldr	r2, [pc, #276]	; (8005ca0 <TIM_Base_SetConfig+0x1bc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d033      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a44      	ldr	r2, [pc, #272]	; (8005ca4 <TIM_Base_SetConfig+0x1c0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02f      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a43      	ldr	r2, [pc, #268]	; (8005ca8 <TIM_Base_SetConfig+0x1c4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d02b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a42      	ldr	r2, [pc, #264]	; (8005cac <TIM_Base_SetConfig+0x1c8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d027      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a41      	ldr	r2, [pc, #260]	; (8005cb0 <TIM_Base_SetConfig+0x1cc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d023      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a40      	ldr	r2, [pc, #256]	; (8005cb4 <TIM_Base_SetConfig+0x1d0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01f      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a3f      	ldr	r2, [pc, #252]	; (8005cb8 <TIM_Base_SetConfig+0x1d4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a3e      	ldr	r2, [pc, #248]	; (8005cbc <TIM_Base_SetConfig+0x1d8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d017      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a3d      	ldr	r2, [pc, #244]	; (8005cc0 <TIM_Base_SetConfig+0x1dc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a3c      	ldr	r2, [pc, #240]	; (8005cc4 <TIM_Base_SetConfig+0x1e0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a3b      	ldr	r2, [pc, #236]	; (8005cc8 <TIM_Base_SetConfig+0x1e4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a3a      	ldr	r2, [pc, #232]	; (8005ccc <TIM_Base_SetConfig+0x1e8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a39      	ldr	r2, [pc, #228]	; (8005cd0 <TIM_Base_SetConfig+0x1ec>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0x112>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a38      	ldr	r2, [pc, #224]	; (8005cd4 <TIM_Base_SetConfig+0x1f0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1a      	ldr	r2, [pc, #104]	; (8005c98 <TIM_Base_SetConfig+0x1b4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d023      	beq.n	8005c7c <TIM_Base_SetConfig+0x198>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a19      	ldr	r2, [pc, #100]	; (8005c9c <TIM_Base_SetConfig+0x1b8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d01f      	beq.n	8005c7c <TIM_Base_SetConfig+0x198>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <TIM_Base_SetConfig+0x1d4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d01b      	beq.n	8005c7c <TIM_Base_SetConfig+0x198>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <TIM_Base_SetConfig+0x1d8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d017      	beq.n	8005c7c <TIM_Base_SetConfig+0x198>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <TIM_Base_SetConfig+0x1dc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <TIM_Base_SetConfig+0x198>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <TIM_Base_SetConfig+0x1e0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00f      	beq.n	8005c7c <TIM_Base_SetConfig+0x198>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <TIM_Base_SetConfig+0x1e4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <TIM_Base_SetConfig+0x198>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <TIM_Base_SetConfig+0x1e8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d007      	beq.n	8005c7c <TIM_Base_SetConfig+0x198>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <TIM_Base_SetConfig+0x1ec>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_Base_SetConfig+0x198>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a17      	ldr	r2, [pc, #92]	; (8005cd4 <TIM_Base_SetConfig+0x1f0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d103      	bne.n	8005c84 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	615a      	str	r2, [r3, #20]
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	50012c00 	.word	0x50012c00
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	50000400 	.word	0x50000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	50000800 	.word	0x50000800
 8005cb0:	40000c00 	.word	0x40000c00
 8005cb4:	50000c00 	.word	0x50000c00
 8005cb8:	40013400 	.word	0x40013400
 8005cbc:	50013400 	.word	0x50013400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	50014000 	.word	0x50014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	50014400 	.word	0x50014400
 8005cd0:	40014800 	.word	0x40014800
 8005cd4:	50014800 	.word	0x50014800

08005cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e042      	b.n	8005d70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7fb f87d 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2224      	movs	r2, #36	; 0x24
 8005d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0201 	bic.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f8d2 	bl	8005ec4 <UART_SetConfig>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e022      	b.n	8005d70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa68 	bl	8006208 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 faef 	bl	800634c <UART_CheckIdleState>
 8005d6e:	4603      	mov	r3, r0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	f040 8092 	bne.w	8005eb8 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_UART_Transmit+0x28>
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e08a      	b.n	8005eba <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_UART_Transmit+0x3a>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e083      	b.n	8005eba <HAL_UART_Transmit+0x142>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d107      	bne.n	8005dd8 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd6:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2221      	movs	r2, #33	; 0x21
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005de8:	f7fb f9aa 	bl	8001140 <HAL_GetTick>
 8005dec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	88fa      	ldrh	r2, [r7, #6]
 8005df2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e06:	d108      	bne.n	8005e1a <HAL_UART_Transmit+0xa2>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	e003      	b.n	8005e22 <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005e2a:	e02c      	b.n	8005e86 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2200      	movs	r2, #0
 8005e34:	2180      	movs	r1, #128	; 0x80
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fad3 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e039      	b.n	8005eba <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10b      	bne.n	8005e64 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	3302      	adds	r3, #2
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	e007      	b.n	8005e74 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	781a      	ldrb	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1cc      	bne.n	8005e2c <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2140      	movs	r1, #64	; 0x40
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 faa0 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e006      	b.n	8005eba <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e000      	b.n	8005eba <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
  }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ec8:	b094      	sub	sp, #80	; 0x50
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	4b7e      	ldr	r3, [pc, #504]	; (80060d4 <UART_SetConfig+0x210>)
 8005eda:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4977      	ldr	r1, [pc, #476]	; (80060d8 <UART_SetConfig+0x214>)
 8005efc:	4019      	ands	r1, r3
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	68d9      	ldr	r1, [r3, #12]
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	ea40 0301 	orr.w	r3, r0, r1
 8005f1e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <UART_SetConfig+0x210>)
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d009      	beq.n	8005f44 <UART_SetConfig+0x80>
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b69      	ldr	r3, [pc, #420]	; (80060dc <UART_SetConfig+0x218>)
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d004      	beq.n	8005f44 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f40:	4313      	orrs	r3, r2
 8005f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8005f4e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	f023 000f 	bic.w	r0, r3, #15
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	ea40 0301 	orr.w	r3, r0, r1
 8005f72:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4b59      	ldr	r3, [pc, #356]	; (80060e0 <UART_SetConfig+0x21c>)
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d102      	bne.n	8005f84 <UART_SetConfig+0xc0>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f82:	e029      	b.n	8005fd8 <UART_SetConfig+0x114>
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b56      	ldr	r3, [pc, #344]	; (80060e4 <UART_SetConfig+0x220>)
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d102      	bne.n	8005f94 <UART_SetConfig+0xd0>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f92:	e021      	b.n	8005fd8 <UART_SetConfig+0x114>
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b53      	ldr	r3, [pc, #332]	; (80060e8 <UART_SetConfig+0x224>)
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d102      	bne.n	8005fa4 <UART_SetConfig+0xe0>
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa2:	e019      	b.n	8005fd8 <UART_SetConfig+0x114>
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	4b50      	ldr	r3, [pc, #320]	; (80060ec <UART_SetConfig+0x228>)
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d102      	bne.n	8005fb4 <UART_SetConfig+0xf0>
 8005fae:	2308      	movs	r3, #8
 8005fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb2:	e011      	b.n	8005fd8 <UART_SetConfig+0x114>
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b4d      	ldr	r3, [pc, #308]	; (80060f0 <UART_SetConfig+0x22c>)
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d102      	bne.n	8005fc4 <UART_SetConfig+0x100>
 8005fbe:	2310      	movs	r3, #16
 8005fc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc2:	e009      	b.n	8005fd8 <UART_SetConfig+0x114>
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	4b42      	ldr	r3, [pc, #264]	; (80060d4 <UART_SetConfig+0x210>)
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d102      	bne.n	8005fd4 <UART_SetConfig+0x110>
 8005fce:	2320      	movs	r3, #32
 8005fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fd2:	e001      	b.n	8005fd8 <UART_SetConfig+0x114>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	4b3d      	ldr	r3, [pc, #244]	; (80060d4 <UART_SetConfig+0x210>)
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d005      	beq.n	8005fee <UART_SetConfig+0x12a>
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b3d      	ldr	r3, [pc, #244]	; (80060dc <UART_SetConfig+0x218>)
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	f040 8085 	bne.w	80060f8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ff6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005ffa:	f7fe fa2b 	bl	8004454 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ffe:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80e8 	beq.w	80061d8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	4a39      	ldr	r2, [pc, #228]	; (80060f4 <UART_SetConfig+0x230>)
 800600e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006012:	461a      	mov	r2, r3
 8006014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006016:	fbb3 f3f2 	udiv	r3, r3, r2
 800601a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	4413      	add	r3, r2
 8006026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006028:	429a      	cmp	r2, r3
 800602a:	d305      	bcc.n	8006038 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006034:	429a      	cmp	r2, r3
 8006036:	d903      	bls.n	8006040 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800603e:	e048      	b.n	80060d2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006042:	2200      	movs	r2, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	61fa      	str	r2, [r7, #28]
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <UART_SetConfig+0x230>)
 800604e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006052:	b29b      	uxth	r3, r3
 8006054:	2200      	movs	r2, #0
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	617a      	str	r2, [r7, #20]
 800605a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800605e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006062:	f7fa f907 	bl	8000274 <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	020b      	lsls	r3, r1, #8
 8006078:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800607c:	0202      	lsls	r2, r0, #8
 800607e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006080:	6849      	ldr	r1, [r1, #4]
 8006082:	0849      	lsrs	r1, r1, #1
 8006084:	2000      	movs	r0, #0
 8006086:	460c      	mov	r4, r1
 8006088:	4605      	mov	r5, r0
 800608a:	eb12 0804 	adds.w	r8, r2, r4
 800608e:	eb43 0905 	adc.w	r9, r3, r5
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	60fa      	str	r2, [r7, #12]
 800609c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060a0:	4640      	mov	r0, r8
 80060a2:	4649      	mov	r1, r9
 80060a4:	f7fa f8e6 	bl	8000274 <__aeabi_uldivmod>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4613      	mov	r3, r2
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b6:	d308      	bcc.n	80060ca <UART_SetConfig+0x206>
 80060b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060be:	d204      	bcs.n	80060ca <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060c6:	60da      	str	r2, [r3, #12]
 80060c8:	e003      	b.n	80060d2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80060d0:	e082      	b.n	80061d8 <UART_SetConfig+0x314>
 80060d2:	e081      	b.n	80061d8 <UART_SetConfig+0x314>
 80060d4:	46002400 	.word	0x46002400
 80060d8:	cfff69f3 	.word	0xcfff69f3
 80060dc:	56002400 	.word	0x56002400
 80060e0:	40013800 	.word	0x40013800
 80060e4:	40004400 	.word	0x40004400
 80060e8:	40004800 	.word	0x40004800
 80060ec:	40004c00 	.word	0x40004c00
 80060f0:	40005000 	.word	0x40005000
 80060f4:	0800a79c 	.word	0x0800a79c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006100:	d13c      	bne.n	800617c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006104:	2200      	movs	r2, #0
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800610e:	f7fe f9a1 	bl	8004454 <HAL_RCCEx_GetPeriphCLKFreq>
 8006112:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d05e      	beq.n	80061d8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	4a39      	ldr	r2, [pc, #228]	; (8006204 <UART_SetConfig+0x340>)
 8006120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006124:	461a      	mov	r2, r3
 8006126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006128:	fbb3 f3f2 	udiv	r3, r3, r2
 800612c:	005a      	lsls	r2, r3, #1
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	441a      	add	r2, r3
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006142:	2b0f      	cmp	r3, #15
 8006144:	d916      	bls.n	8006174 <UART_SetConfig+0x2b0>
 8006146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d212      	bcs.n	8006174 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800614e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006150:	b29b      	uxth	r3, r3
 8006152:	f023 030f 	bic.w	r3, r3, #15
 8006156:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	b29b      	uxth	r3, r3
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	b29a      	uxth	r2, r3
 8006164:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006166:	4313      	orrs	r3, r2
 8006168:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	e031      	b.n	80061d8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800617a:	e02d      	b.n	80061d8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800617c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617e:	2200      	movs	r2, #0
 8006180:	469a      	mov	sl, r3
 8006182:	4693      	mov	fp, r2
 8006184:	4650      	mov	r0, sl
 8006186:	4659      	mov	r1, fp
 8006188:	f7fe f964 	bl	8004454 <HAL_RCCEx_GetPeriphCLKFreq>
 800618c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800618e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d021      	beq.n	80061d8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	4a1a      	ldr	r2, [pc, #104]	; (8006204 <UART_SetConfig+0x340>)
 800619a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800619e:	461a      	mov	r2, r3
 80061a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	085b      	lsrs	r3, r3, #1
 80061ac:	441a      	add	r2, r3
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ba:	2b0f      	cmp	r3, #15
 80061bc:	d909      	bls.n	80061d2 <UART_SetConfig+0x30e>
 80061be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c4:	d205      	bcs.n	80061d2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60da      	str	r2, [r3, #12]
 80061d0:	e002      	b.n	80061d8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	2201      	movs	r2, #1
 80061dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	2200      	movs	r2, #0
 80061ec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	2200      	movs	r2, #0
 80061f2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80061f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3750      	adds	r7, #80	; 0x50
 80061fc:	46bd      	mov	sp, r7
 80061fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006202:	bf00      	nop
 8006204:	0800a79c 	.word	0x0800a79c

08006208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01a      	beq.n	800631e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006306:	d10a      	bne.n	800631e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
  }
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af02      	add	r7, sp, #8
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800635c:	f7fa fef0 	bl	8001140 <HAL_GetTick>
 8006360:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b08      	cmp	r3, #8
 800636e:	d10e      	bne.n	800638e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f82f 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e025      	b.n	80063da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d10e      	bne.n	80063ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800639c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f819 	bl	80063e2 <UART_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e00f      	b.n	80063da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b09c      	sub	sp, #112	; 0x70
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	4613      	mov	r3, r2
 80063f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f2:	e0a9      	b.n	8006548 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fa:	f000 80a5 	beq.w	8006548 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fe:	f7fa fe9f 	bl	8001140 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <UART_WaitOnFlagUntilTimeout+0x32>
 800640e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006410:	2b00      	cmp	r3, #0
 8006412:	d140      	bne.n	8006496 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006428:	667b      	str	r3, [r7, #100]	; 0x64
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006434:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e6      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3308      	adds	r3, #8
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	663b      	str	r3, [r7, #96]	; 0x60
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006466:	64ba      	str	r2, [r7, #72]	; 0x48
 8006468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800646c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e5      	bne.n	8006446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e069      	b.n	800656a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d051      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b2:	d149      	bne.n	8006548 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
 80064de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e6      	bne.n	80064be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	66bb      	str	r3, [r7, #104]	; 0x68
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006510:	623a      	str	r2, [r7, #32]
 8006512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	69f9      	ldr	r1, [r7, #28]
 8006516:	6a3a      	ldr	r2, [r7, #32]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	61bb      	str	r3, [r7, #24]
   return(result);
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e010      	b.n	800656a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4013      	ands	r3, r2
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	bf0c      	ite	eq
 8006558:	2301      	moveq	r3, #1
 800655a:	2300      	movne	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	429a      	cmp	r2, r3
 8006564:	f43f af46 	beq.w	80063f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3770      	adds	r7, #112	; 0x70
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_UARTEx_DisableFifoMode+0x16>
 8006584:	2302      	movs	r3, #2
 8006586:	e027      	b.n	80065d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2224      	movs	r2, #36	; 0x24
 8006594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e02d      	b.n	8006658 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2224      	movs	r2, #36	; 0x24
 8006608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0201 	bic.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f84f 	bl	80066dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006674:	2302      	movs	r3, #2
 8006676:	e02d      	b.n	80066d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2224      	movs	r2, #36	; 0x24
 8006684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f811 	bl	80066dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d108      	bne.n	80066fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066fc:	e031      	b.n	8006762 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066fe:	2308      	movs	r3, #8
 8006700:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006702:	2308      	movs	r3, #8
 8006704:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	0e5b      	lsrs	r3, r3, #25
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	0f5b      	lsrs	r3, r3, #29
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	7b3a      	ldrb	r2, [r7, #12]
 800672a:	4911      	ldr	r1, [pc, #68]	; (8006770 <UARTEx_SetNbDataToProcess+0x94>)
 800672c:	5c8a      	ldrb	r2, [r1, r2]
 800672e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006732:	7b3a      	ldrb	r2, [r7, #12]
 8006734:	490f      	ldr	r1, [pc, #60]	; (8006774 <UARTEx_SetNbDataToProcess+0x98>)
 8006736:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006738:	fb93 f3f2 	sdiv	r3, r3, r2
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	7b7a      	ldrb	r2, [r7, #13]
 8006748:	4909      	ldr	r1, [pc, #36]	; (8006770 <UARTEx_SetNbDataToProcess+0x94>)
 800674a:	5c8a      	ldrb	r2, [r1, r2]
 800674c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006750:	7b7a      	ldrb	r2, [r7, #13]
 8006752:	4908      	ldr	r1, [pc, #32]	; (8006774 <UARTEx_SetNbDataToProcess+0x98>)
 8006754:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006756:	fb93 f3f2 	sdiv	r3, r3, r2
 800675a:	b29a      	uxth	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	0800a7b4 	.word	0x0800a7b4
 8006774:	0800a7bc 	.word	0x0800a7bc

08006778 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	2101      	movs	r1, #1
 8006786:	4871      	ldr	r0, [pc, #452]	; (800694c <network_configure_activations+0x1d4>)
 8006788:	f000 fce2 	bl	8007150 <ai_platform_get_activations_map>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80d2 	beq.w	8006938 <network_configure_activations+0x1c0>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006794:	4b6d      	ldr	r3, [pc, #436]	; (800694c <network_configure_activations+0x1d4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a6d      	ldr	r2, [pc, #436]	; (8006950 <network_configure_activations+0x1d8>)
 800679a:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800679c:	4b6b      	ldr	r3, [pc, #428]	; (800694c <network_configure_activations+0x1d4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a6b      	ldr	r2, [pc, #428]	; (8006950 <network_configure_activations+0x1d8>)
 80067a2:	60d3      	str	r3, [r2, #12]
    
    eltwise_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80067a4:	4b69      	ldr	r3, [pc, #420]	; (800694c <network_configure_activations+0x1d4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a6a      	ldr	r2, [pc, #424]	; (8006954 <network_configure_activations+0x1dc>)
 80067aa:	6093      	str	r3, [r2, #8]
    eltwise_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80067ac:	4b67      	ldr	r3, [pc, #412]	; (800694c <network_configure_activations+0x1d4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a68      	ldr	r2, [pc, #416]	; (8006954 <network_configure_activations+0x1dc>)
 80067b2:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 7680);
 80067b4:	4b65      	ldr	r3, [pc, #404]	; (800694c <network_configure_activations+0x1d4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80067bc:	4a66      	ldr	r2, [pc, #408]	; (8006958 <network_configure_activations+0x1e0>)
 80067be:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7680);
 80067c0:	4b62      	ldr	r3, [pc, #392]	; (800694c <network_configure_activations+0x1d4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80067c8:	4a63      	ldr	r2, [pc, #396]	; (8006958 <network_configure_activations+0x1e0>)
 80067ca:	60d3      	str	r3, [r2, #12]
    
    nl_3_output_array.data = AI_PTR(g_network_activations_map[0] + 7680);
 80067cc:	4b5f      	ldr	r3, [pc, #380]	; (800694c <network_configure_activations+0x1d4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80067d4:	4a61      	ldr	r2, [pc, #388]	; (800695c <network_configure_activations+0x1e4>)
 80067d6:	6093      	str	r3, [r2, #8]
    nl_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7680);
 80067d8:	4b5c      	ldr	r3, [pc, #368]	; (800694c <network_configure_activations+0x1d4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80067e0:	4a5e      	ldr	r2, [pc, #376]	; (800695c <network_configure_activations+0x1e4>)
 80067e2:	60d3      	str	r3, [r2, #12]
    
    eltwise_4_output_array.data = AI_PTR(g_network_activations_map[0] + 7680);
 80067e4:	4b59      	ldr	r3, [pc, #356]	; (800694c <network_configure_activations+0x1d4>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80067ec:	4a5c      	ldr	r2, [pc, #368]	; (8006960 <network_configure_activations+0x1e8>)
 80067ee:	6093      	str	r3, [r2, #8]
    eltwise_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7680);
 80067f0:	4b56      	ldr	r3, [pc, #344]	; (800694c <network_configure_activations+0x1d4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80067f8:	4a59      	ldr	r2, [pc, #356]	; (8006960 <network_configure_activations+0x1e8>)
 80067fa:	60d3      	str	r3, [r2, #12]
    
    pool_6_output_array.data = AI_PTR(g_network_activations_map[0] + 7680);
 80067fc:	4b53      	ldr	r3, [pc, #332]	; (800694c <network_configure_activations+0x1d4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8006804:	4a57      	ldr	r2, [pc, #348]	; (8006964 <network_configure_activations+0x1ec>)
 8006806:	6093      	str	r3, [r2, #8]
    pool_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 7680);
 8006808:	4b50      	ldr	r3, [pc, #320]	; (800694c <network_configure_activations+0x1d4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8006810:	4a54      	ldr	r2, [pc, #336]	; (8006964 <network_configure_activations+0x1ec>)
 8006812:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 48640);
 8006814:	4b4d      	ldr	r3, [pc, #308]	; (800694c <network_configure_activations+0x1d4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f503 433e 	add.w	r3, r3, #48640	; 0xbe00
 800681c:	4a52      	ldr	r2, [pc, #328]	; (8006968 <network_configure_activations+0x1f0>)
 800681e:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 48640);
 8006820:	4b4a      	ldr	r3, [pc, #296]	; (800694c <network_configure_activations+0x1d4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f503 433e 	add.w	r3, r3, #48640	; 0xbe00
 8006828:	4a4f      	ldr	r2, [pc, #316]	; (8006968 <network_configure_activations+0x1f0>)
 800682a:	60d3      	str	r3, [r2, #12]
    
    nl_8_output_array.data = AI_PTR(g_network_activations_map[0] + 48640);
 800682c:	4b47      	ldr	r3, [pc, #284]	; (800694c <network_configure_activations+0x1d4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f503 433e 	add.w	r3, r3, #48640	; 0xbe00
 8006834:	4a4d      	ldr	r2, [pc, #308]	; (800696c <network_configure_activations+0x1f4>)
 8006836:	6093      	str	r3, [r2, #8]
    nl_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 48640);
 8006838:	4b44      	ldr	r3, [pc, #272]	; (800694c <network_configure_activations+0x1d4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f503 433e 	add.w	r3, r3, #48640	; 0xbe00
 8006840:	4a4a      	ldr	r2, [pc, #296]	; (800696c <network_configure_activations+0x1f4>)
 8006842:	60d3      	str	r3, [r2, #12]
    
    eltwise_9_output_array.data = AI_PTR(g_network_activations_map[0] + 48640);
 8006844:	4b41      	ldr	r3, [pc, #260]	; (800694c <network_configure_activations+0x1d4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f503 433e 	add.w	r3, r3, #48640	; 0xbe00
 800684c:	4a48      	ldr	r2, [pc, #288]	; (8006970 <network_configure_activations+0x1f8>)
 800684e:	6093      	str	r3, [r2, #8]
    eltwise_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 48640);
 8006850:	4b3e      	ldr	r3, [pc, #248]	; (800694c <network_configure_activations+0x1d4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f503 433e 	add.w	r3, r3, #48640	; 0xbe00
 8006858:	4a45      	ldr	r2, [pc, #276]	; (8006970 <network_configure_activations+0x1f8>)
 800685a:	60d3      	str	r3, [r2, #12]
    
    pool_11_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800685c:	4b3b      	ldr	r3, [pc, #236]	; (800694c <network_configure_activations+0x1d4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a44      	ldr	r2, [pc, #272]	; (8006974 <network_configure_activations+0x1fc>)
 8006862:	6093      	str	r3, [r2, #8]
    pool_11_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006864:	4b39      	ldr	r3, [pc, #228]	; (800694c <network_configure_activations+0x1d4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a42      	ldr	r2, [pc, #264]	; (8006974 <network_configure_activations+0x1fc>)
 800686a:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[0] + 20480);
 800686c:	4b37      	ldr	r3, [pc, #220]	; (800694c <network_configure_activations+0x1d4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8006874:	4a40      	ldr	r2, [pc, #256]	; (8006978 <network_configure_activations+0x200>)
 8006876:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20480);
 8006878:	4b34      	ldr	r3, [pc, #208]	; (800694c <network_configure_activations+0x1d4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8006880:	4a3d      	ldr	r2, [pc, #244]	; (8006978 <network_configure_activations+0x200>)
 8006882:	60d3      	str	r3, [r2, #12]
    
    nl_13_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006884:	4b31      	ldr	r3, [pc, #196]	; (800694c <network_configure_activations+0x1d4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a3c      	ldr	r2, [pc, #240]	; (800697c <network_configure_activations+0x204>)
 800688a:	6093      	str	r3, [r2, #8]
    nl_13_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800688c:	4b2f      	ldr	r3, [pc, #188]	; (800694c <network_configure_activations+0x1d4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a3a      	ldr	r2, [pc, #232]	; (800697c <network_configure_activations+0x204>)
 8006892:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_output_array.data = AI_PTR(g_network_activations_map[0] + 10240);
 8006894:	4b2d      	ldr	r3, [pc, #180]	; (800694c <network_configure_activations+0x1d4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800689c:	4a38      	ldr	r2, [pc, #224]	; (8006980 <network_configure_activations+0x208>)
 800689e:	6093      	str	r3, [r2, #8]
    eltwise_14_output_array.data_start = AI_PTR(g_network_activations_map[0] + 10240);
 80068a0:	4b2a      	ldr	r3, [pc, #168]	; (800694c <network_configure_activations+0x1d4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80068a8:	4a35      	ldr	r2, [pc, #212]	; (8006980 <network_configure_activations+0x208>)
 80068aa:	60d3      	str	r3, [r2, #12]
    
    pool_16_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80068ac:	4b27      	ldr	r3, [pc, #156]	; (800694c <network_configure_activations+0x1d4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a34      	ldr	r2, [pc, #208]	; (8006984 <network_configure_activations+0x20c>)
 80068b2:	6093      	str	r3, [r2, #8]
    pool_16_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80068b4:	4b25      	ldr	r3, [pc, #148]	; (800694c <network_configure_activations+0x1d4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a32      	ldr	r2, [pc, #200]	; (8006984 <network_configure_activations+0x20c>)
 80068ba:	60d3      	str	r3, [r2, #12]
    
    gemm_18_output_array.data = AI_PTR(g_network_activations_map[0] + 2048);
 80068bc:	4b23      	ldr	r3, [pc, #140]	; (800694c <network_configure_activations+0x1d4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c4:	4a30      	ldr	r2, [pc, #192]	; (8006988 <network_configure_activations+0x210>)
 80068c6:	6093      	str	r3, [r2, #8]
    gemm_18_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2048);
 80068c8:	4b20      	ldr	r3, [pc, #128]	; (800694c <network_configure_activations+0x1d4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	4a2d      	ldr	r2, [pc, #180]	; (8006988 <network_configure_activations+0x210>)
 80068d2:	60d3      	str	r3, [r2, #12]
    
    nl_19_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <network_configure_activations+0x1d4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a2c      	ldr	r2, [pc, #176]	; (800698c <network_configure_activations+0x214>)
 80068da:	6093      	str	r3, [r2, #8]
    nl_19_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80068dc:	4b1b      	ldr	r3, [pc, #108]	; (800694c <network_configure_activations+0x1d4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a2a      	ldr	r2, [pc, #168]	; (800698c <network_configure_activations+0x214>)
 80068e2:	60d3      	str	r3, [r2, #12]
    
    gemm_20_output_array.data = AI_PTR(g_network_activations_map[0] + 1024);
 80068e4:	4b19      	ldr	r3, [pc, #100]	; (800694c <network_configure_activations+0x1d4>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ec:	4a28      	ldr	r2, [pc, #160]	; (8006990 <network_configure_activations+0x218>)
 80068ee:	6093      	str	r3, [r2, #8]
    gemm_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1024);
 80068f0:	4b16      	ldr	r3, [pc, #88]	; (800694c <network_configure_activations+0x1d4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068f8:	4a25      	ldr	r2, [pc, #148]	; (8006990 <network_configure_activations+0x218>)
 80068fa:	60d3      	str	r3, [r2, #12]
    
    nl_21_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80068fc:	4b13      	ldr	r3, [pc, #76]	; (800694c <network_configure_activations+0x1d4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a24      	ldr	r2, [pc, #144]	; (8006994 <network_configure_activations+0x21c>)
 8006902:	6093      	str	r3, [r2, #8]
    nl_21_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006904:	4b11      	ldr	r3, [pc, #68]	; (800694c <network_configure_activations+0x1d4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a22      	ldr	r2, [pc, #136]	; (8006994 <network_configure_activations+0x21c>)
 800690a:	60d3      	str	r3, [r2, #12]
    
    gemm_22_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800690c:	4b0f      	ldr	r3, [pc, #60]	; (800694c <network_configure_activations+0x1d4>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006914:	4a20      	ldr	r2, [pc, #128]	; (8006998 <network_configure_activations+0x220>)
 8006916:	6093      	str	r3, [r2, #8]
    gemm_22_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <network_configure_activations+0x1d4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006920:	4a1d      	ldr	r2, [pc, #116]	; (8006998 <network_configure_activations+0x220>)
 8006922:	60d3      	str	r3, [r2, #12]
    
    nl_23_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006924:	4b09      	ldr	r3, [pc, #36]	; (800694c <network_configure_activations+0x1d4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a1c      	ldr	r2, [pc, #112]	; (800699c <network_configure_activations+0x224>)
 800692a:	6093      	str	r3, [r2, #8]
    nl_23_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800692c:	4b07      	ldr	r3, [pc, #28]	; (800694c <network_configure_activations+0x1d4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1a      	ldr	r2, [pc, #104]	; (800699c <network_configure_activations+0x224>)
 8006932:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006934:	2301      	movs	r3, #1
 8006936:	e005      	b.n	8006944 <network_configure_activations+0x1cc>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006938:	2213      	movs	r2, #19
 800693a:	2130      	movs	r1, #48	; 0x30
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fd01 	bl	8007344 <ai_platform_network_set_error>
  return false;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2002da58 	.word	0x2002da58
 8006950:	2000087c 	.word	0x2000087c
 8006954:	2000088c 	.word	0x2000088c
 8006958:	2000089c 	.word	0x2000089c
 800695c:	200008ac 	.word	0x200008ac
 8006960:	200008bc 	.word	0x200008bc
 8006964:	200008cc 	.word	0x200008cc
 8006968:	200008dc 	.word	0x200008dc
 800696c:	200008ec 	.word	0x200008ec
 8006970:	200008fc 	.word	0x200008fc
 8006974:	2000090c 	.word	0x2000090c
 8006978:	2000091c 	.word	0x2000091c
 800697c:	2000092c 	.word	0x2000092c
 8006980:	2000093c 	.word	0x2000093c
 8006984:	2000094c 	.word	0x2000094c
 8006988:	2000095c 	.word	0x2000095c
 800698c:	2000096c 	.word	0x2000096c
 8006990:	2000097c 	.word	0x2000097c
 8006994:	2000098c 	.word	0x2000098c
 8006998:	2000099c 	.word	0x2000099c
 800699c:	200009ac 	.word	0x200009ac

080069a0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	2101      	movs	r1, #1
 80069ae:	48a3      	ldr	r0, [pc, #652]	; (8006c3c <network_configure_weights+0x29c>)
 80069b0:	f000 fb7a 	bl	80070a8 <ai_platform_get_weights_map>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 81d0 	beq.w	8006d5c <network_configure_weights+0x3bc>
    /* Updating weights (byte) offsets */
    
    eltwise_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80069bc:	4ba0      	ldr	r3, [pc, #640]	; (8006c40 <network_configure_weights+0x2a0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069c4:	4a9e      	ldr	r2, [pc, #632]	; (8006c40 <network_configure_weights+0x2a0>)
 80069c6:	6013      	str	r3, [r2, #0]
    eltwise_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80069c8:	4b9c      	ldr	r3, [pc, #624]	; (8006c3c <network_configure_weights+0x29c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a9c      	ldr	r2, [pc, #624]	; (8006c40 <network_configure_weights+0x2a0>)
 80069ce:	6093      	str	r3, [r2, #8]
    eltwise_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80069d0:	4b9a      	ldr	r3, [pc, #616]	; (8006c3c <network_configure_weights+0x29c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a9a      	ldr	r2, [pc, #616]	; (8006c40 <network_configure_weights+0x2a0>)
 80069d6:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80069d8:	4b9a      	ldr	r3, [pc, #616]	; (8006c44 <network_configure_weights+0x2a4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069e0:	4a98      	ldr	r2, [pc, #608]	; (8006c44 <network_configure_weights+0x2a4>)
 80069e2:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 256);
 80069e4:	4b95      	ldr	r3, [pc, #596]	; (8006c3c <network_configure_weights+0x29c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80069ec:	4a95      	ldr	r2, [pc, #596]	; (8006c44 <network_configure_weights+0x2a4>)
 80069ee:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 256);
 80069f0:	4b92      	ldr	r3, [pc, #584]	; (8006c3c <network_configure_weights+0x29c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80069f8:	4a92      	ldr	r2, [pc, #584]	; (8006c44 <network_configure_weights+0x2a4>)
 80069fa:	60d3      	str	r3, [r2, #12]
    
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80069fc:	4b92      	ldr	r3, [pc, #584]	; (8006c48 <network_configure_weights+0x2a8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a04:	4a90      	ldr	r2, [pc, #576]	; (8006c48 <network_configure_weights+0x2a8>)
 8006a06:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 295168);
 8006a08:	4b8c      	ldr	r3, [pc, #560]	; (8006c3c <network_configure_weights+0x29c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 8006a10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a14:	4a8c      	ldr	r2, [pc, #560]	; (8006c48 <network_configure_weights+0x2a8>)
 8006a16:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 295168);
 8006a18:	4b88      	ldr	r3, [pc, #544]	; (8006c3c <network_configure_weights+0x29c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 8006a20:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a24:	4a88      	ldr	r2, [pc, #544]	; (8006c48 <network_configure_weights+0x2a8>)
 8006a26:	60d3      	str	r3, [r2, #12]
    
    eltwise_9_scale_array.format |= AI_FMT_FLAG_CONST;
 8006a28:	4b88      	ldr	r3, [pc, #544]	; (8006c4c <network_configure_weights+0x2ac>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a30:	4a86      	ldr	r2, [pc, #536]	; (8006c4c <network_configure_weights+0x2ac>)
 8006a32:	6013      	str	r3, [r2, #0]
    eltwise_9_scale_array.data = AI_PTR(g_network_weights_map[0] + 295680);
 8006a34:	4b81      	ldr	r3, [pc, #516]	; (8006c3c <network_configure_weights+0x29c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 8006a3c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006a40:	4a82      	ldr	r2, [pc, #520]	; (8006c4c <network_configure_weights+0x2ac>)
 8006a42:	6093      	str	r3, [r2, #8]
    eltwise_9_scale_array.data_start = AI_PTR(g_network_weights_map[0] + 295680);
 8006a44:	4b7d      	ldr	r3, [pc, #500]	; (8006c3c <network_configure_weights+0x29c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 8006a4c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006a50:	4a7e      	ldr	r2, [pc, #504]	; (8006c4c <network_configure_weights+0x2ac>)
 8006a52:	60d3      	str	r3, [r2, #12]
    
    eltwise_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8006a54:	4b7e      	ldr	r3, [pc, #504]	; (8006c50 <network_configure_weights+0x2b0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a5c:	4a7c      	ldr	r2, [pc, #496]	; (8006c50 <network_configure_weights+0x2b0>)
 8006a5e:	6013      	str	r3, [r2, #0]
    eltwise_9_bias_array.data = AI_PTR(g_network_weights_map[0] + 296192);
 8006a60:	4b76      	ldr	r3, [pc, #472]	; (8006c3c <network_configure_weights+0x29c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6c:	4a78      	ldr	r2, [pc, #480]	; (8006c50 <network_configure_weights+0x2b0>)
 8006a6e:	6093      	str	r3, [r2, #8]
    eltwise_9_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 296192);
 8006a70:	4b72      	ldr	r3, [pc, #456]	; (8006c3c <network_configure_weights+0x29c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 8006a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7c:	4a74      	ldr	r2, [pc, #464]	; (8006c50 <network_configure_weights+0x2b0>)
 8006a7e:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8006a80:	4b74      	ldr	r3, [pc, #464]	; (8006c54 <network_configure_weights+0x2b4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a88:	4a72      	ldr	r2, [pc, #456]	; (8006c54 <network_configure_weights+0x2b4>)
 8006a8a:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 296704);
 8006a8c:	4b6b      	ldr	r3, [pc, #428]	; (8006c3c <network_configure_weights+0x29c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 8006a94:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8006a98:	4a6e      	ldr	r2, [pc, #440]	; (8006c54 <network_configure_weights+0x2b4>)
 8006a9a:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 296704);
 8006a9c:	4b67      	ldr	r3, [pc, #412]	; (8006c3c <network_configure_weights+0x29c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f503 2390 	add.w	r3, r3, #294912	; 0x48000
 8006aa4:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8006aa8:	4a6a      	ldr	r2, [pc, #424]	; (8006c54 <network_configure_weights+0x2b4>)
 8006aaa:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8006aac:	4b6a      	ldr	r3, [pc, #424]	; (8006c58 <network_configure_weights+0x2b8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ab4:	4a68      	ldr	r2, [pc, #416]	; (8006c58 <network_configure_weights+0x2b8>)
 8006ab6:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 591616);
 8006ab8:	4b60      	ldr	r3, [pc, #384]	; (8006c3c <network_configure_weights+0x29c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8006ac0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8006ac4:	4a64      	ldr	r2, [pc, #400]	; (8006c58 <network_configure_weights+0x2b8>)
 8006ac6:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 591616);
 8006ac8:	4b5c      	ldr	r3, [pc, #368]	; (8006c3c <network_configure_weights+0x29c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8006ad0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8006ad4:	4a60      	ldr	r2, [pc, #384]	; (8006c58 <network_configure_weights+0x2b8>)
 8006ad6:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_scale_array.format |= AI_FMT_FLAG_CONST;
 8006ad8:	4b60      	ldr	r3, [pc, #384]	; (8006c5c <network_configure_weights+0x2bc>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ae0:	4a5e      	ldr	r2, [pc, #376]	; (8006c5c <network_configure_weights+0x2bc>)
 8006ae2:	6013      	str	r3, [r2, #0]
    eltwise_14_scale_array.data = AI_PTR(g_network_weights_map[0] + 591872);
 8006ae4:	4b55      	ldr	r3, [pc, #340]	; (8006c3c <network_configure_weights+0x29c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8006aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af0:	4a5a      	ldr	r2, [pc, #360]	; (8006c5c <network_configure_weights+0x2bc>)
 8006af2:	6093      	str	r3, [r2, #8]
    eltwise_14_scale_array.data_start = AI_PTR(g_network_weights_map[0] + 591872);
 8006af4:	4b51      	ldr	r3, [pc, #324]	; (8006c3c <network_configure_weights+0x29c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8006afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b00:	4a56      	ldr	r2, [pc, #344]	; (8006c5c <network_configure_weights+0x2bc>)
 8006b02:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8006b04:	4b56      	ldr	r3, [pc, #344]	; (8006c60 <network_configure_weights+0x2c0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b0c:	4a54      	ldr	r2, [pc, #336]	; (8006c60 <network_configure_weights+0x2c0>)
 8006b0e:	6013      	str	r3, [r2, #0]
    eltwise_14_bias_array.data = AI_PTR(g_network_weights_map[0] + 592128);
 8006b10:	4b4a      	ldr	r3, [pc, #296]	; (8006c3c <network_configure_weights+0x29c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8006b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1c:	4a50      	ldr	r2, [pc, #320]	; (8006c60 <network_configure_weights+0x2c0>)
 8006b1e:	6093      	str	r3, [r2, #8]
    eltwise_14_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 592128);
 8006b20:	4b46      	ldr	r3, [pc, #280]	; (8006c3c <network_configure_weights+0x29c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8006b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2c:	4a4c      	ldr	r2, [pc, #304]	; (8006c60 <network_configure_weights+0x2c0>)
 8006b2e:	60d3      	str	r3, [r2, #12]
    
    gemm_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8006b30:	4b4c      	ldr	r3, [pc, #304]	; (8006c64 <network_configure_weights+0x2c4>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b38:	4a4a      	ldr	r2, [pc, #296]	; (8006c64 <network_configure_weights+0x2c4>)
 8006b3a:	6013      	str	r3, [r2, #0]
    gemm_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 592448);
 8006b3c:	4b3f      	ldr	r3, [pc, #252]	; (8006c3c <network_configure_weights+0x29c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8006b44:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8006b48:	4a46      	ldr	r2, [pc, #280]	; (8006c64 <network_configure_weights+0x2c4>)
 8006b4a:	6093      	str	r3, [r2, #8]
    gemm_18_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 592384);
 8006b4c:	4b3b      	ldr	r3, [pc, #236]	; (8006c3c <network_configure_weights+0x29c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
 8006b54:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8006b58:	4a42      	ldr	r2, [pc, #264]	; (8006c64 <network_configure_weights+0x2c4>)
 8006b5a:	60d3      	str	r3, [r2, #12]
    
    gemm_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8006b5c:	4b42      	ldr	r3, [pc, #264]	; (8006c68 <network_configure_weights+0x2c8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b64:	4a40      	ldr	r2, [pc, #256]	; (8006c68 <network_configure_weights+0x2c8>)
 8006b66:	6013      	str	r3, [r2, #0]
    gemm_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 657984);
 8006b68:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <network_configure_weights+0x29c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8006b70:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8006b74:	4a3c      	ldr	r2, [pc, #240]	; (8006c68 <network_configure_weights+0x2c8>)
 8006b76:	6093      	str	r3, [r2, #8]
    gemm_18_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 657984);
 8006b78:	4b30      	ldr	r3, [pc, #192]	; (8006c3c <network_configure_weights+0x29c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8006b80:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 8006b84:	4a38      	ldr	r2, [pc, #224]	; (8006c68 <network_configure_weights+0x2c8>)
 8006b86:	60d3      	str	r3, [r2, #12]
    
    gemm_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8006b88:	4b38      	ldr	r3, [pc, #224]	; (8006c6c <network_configure_weights+0x2cc>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b90:	4a36      	ldr	r2, [pc, #216]	; (8006c6c <network_configure_weights+0x2cc>)
 8006b92:	6013      	str	r3, [r2, #0]
    gemm_20_weights_array.data = AI_PTR(g_network_weights_map[0] + 659072);
 8006b94:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <network_configure_weights+0x29c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8006b9c:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8006ba0:	4a32      	ldr	r2, [pc, #200]	; (8006c6c <network_configure_weights+0x2cc>)
 8006ba2:	6093      	str	r3, [r2, #8]
    gemm_20_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 659008);
 8006ba4:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <network_configure_weights+0x29c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8006bac:	f503 6364 	add.w	r3, r3, #3648	; 0xe40
 8006bb0:	4a2e      	ldr	r2, [pc, #184]	; (8006c6c <network_configure_weights+0x2cc>)
 8006bb2:	60d3      	str	r3, [r2, #12]
    
    gemm_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8006bb4:	4b2e      	ldr	r3, [pc, #184]	; (8006c70 <network_configure_weights+0x2d0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bbc:	4a2c      	ldr	r2, [pc, #176]	; (8006c70 <network_configure_weights+0x2d0>)
 8006bbe:	6013      	str	r3, [r2, #0]
    gemm_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 667264);
 8006bc0:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <network_configure_weights+0x29c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8006bc8:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8006bcc:	4a28      	ldr	r2, [pc, #160]	; (8006c70 <network_configure_weights+0x2d0>)
 8006bce:	6093      	str	r3, [r2, #8]
    gemm_20_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 667264);
 8006bd0:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <network_configure_weights+0x29c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8006bd8:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8006bdc:	4a24      	ldr	r2, [pc, #144]	; (8006c70 <network_configure_weights+0x2d0>)
 8006bde:	60d3      	str	r3, [r2, #12]
    
    gemm_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8006be0:	4b24      	ldr	r3, [pc, #144]	; (8006c74 <network_configure_weights+0x2d4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006be8:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <network_configure_weights+0x2d4>)
 8006bea:	6013      	str	r3, [r2, #0]
    gemm_22_weights_array.data = AI_PTR(g_network_weights_map[0] + 667520);
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <network_configure_weights+0x29c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8006bf4:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 8006bf8:	4a1e      	ldr	r2, [pc, #120]	; (8006c74 <network_configure_weights+0x2d4>)
 8006bfa:	6093      	str	r3, [r2, #8]
    gemm_22_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 667520);
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <network_configure_weights+0x29c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
 8006c04:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 8006c08:	4a1a      	ldr	r2, [pc, #104]	; (8006c74 <network_configure_weights+0x2d4>)
 8006c0a:	60d3      	str	r3, [r2, #12]
    
    gemm_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8006c0c:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <network_configure_weights+0x2d8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c14:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <network_configure_weights+0x2d8>)
 8006c16:	6013      	str	r3, [r2, #0]
    gemm_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 670080);
 8006c18:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <network_configure_weights+0x29c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f503 2323 	add.w	r3, r3, #667648	; 0xa3000
 8006c20:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8006c24:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <network_configure_weights+0x2d8>)
 8006c26:	6093      	str	r3, [r2, #8]
    gemm_22_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 670080);
 8006c28:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <network_configure_weights+0x29c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f503 2323 	add.w	r3, r3, #667648	; 0xa3000
 8006c30:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8006c34:	4a10      	ldr	r2, [pc, #64]	; (8006c78 <network_configure_weights+0x2d8>)
 8006c36:	60d3      	str	r3, [r2, #12]
 8006c38:	e020      	b.n	8006c7c <network_configure_weights+0x2dc>
 8006c3a:	bf00      	nop
 8006c3c:	2002da5c 	.word	0x2002da5c
 8006c40:	2000078c 	.word	0x2000078c
 8006c44:	2000079c 	.word	0x2000079c
 8006c48:	200007ac 	.word	0x200007ac
 8006c4c:	200007bc 	.word	0x200007bc
 8006c50:	200007cc 	.word	0x200007cc
 8006c54:	200007dc 	.word	0x200007dc
 8006c58:	200007ec 	.word	0x200007ec
 8006c5c:	200007fc 	.word	0x200007fc
 8006c60:	2000080c 	.word	0x2000080c
 8006c64:	2000081c 	.word	0x2000081c
 8006c68:	2000082c 	.word	0x2000082c
 8006c6c:	2000083c 	.word	0x2000083c
 8006c70:	2000084c 	.word	0x2000084c
 8006c74:	2000085c 	.word	0x2000085c
 8006c78:	2000086c 	.word	0x2000086c
    
    eltwise_0_scale_array.format |= AI_FMT_FLAG_CONST;
 8006c7c:	4b3c      	ldr	r3, [pc, #240]	; (8006d70 <network_configure_weights+0x3d0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c84:	4a3a      	ldr	r2, [pc, #232]	; (8006d70 <network_configure_weights+0x3d0>)
 8006c86:	6013      	str	r3, [r2, #0]
    eltwise_0_scale_array.data = AI_PTR(g_network_weights_map[0] + 670120);
 8006c88:	4b3a      	ldr	r3, [pc, #232]	; (8006d74 <network_configure_weights+0x3d4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f503 2323 	add.w	r3, r3, #667648	; 0xa3000
 8006c90:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
 8006c94:	4a36      	ldr	r2, [pc, #216]	; (8006d70 <network_configure_weights+0x3d0>)
 8006c96:	6093      	str	r3, [r2, #8]
    eltwise_0_scale_array.data_start = AI_PTR(g_network_weights_map[0] + 670120);
 8006c98:	4b36      	ldr	r3, [pc, #216]	; (8006d74 <network_configure_weights+0x3d4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f503 2323 	add.w	r3, r3, #667648	; 0xa3000
 8006ca0:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
 8006ca4:	4a32      	ldr	r2, [pc, #200]	; (8006d70 <network_configure_weights+0x3d0>)
 8006ca6:	60d3      	str	r3, [r2, #12]
    
    eltwise_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8006ca8:	4b33      	ldr	r3, [pc, #204]	; (8006d78 <network_configure_weights+0x3d8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cb0:	4a31      	ldr	r2, [pc, #196]	; (8006d78 <network_configure_weights+0x3d8>)
 8006cb2:	6013      	str	r3, [r2, #0]
    eltwise_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 670132);
 8006cb4:	4b2f      	ldr	r3, [pc, #188]	; (8006d74 <network_configure_weights+0x3d4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f503 2323 	add.w	r3, r3, #667648	; 0xa3000
 8006cbc:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8006cc0:	4a2d      	ldr	r2, [pc, #180]	; (8006d78 <network_configure_weights+0x3d8>)
 8006cc2:	6093      	str	r3, [r2, #8]
    eltwise_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 670132);
 8006cc4:	4b2b      	ldr	r3, [pc, #172]	; (8006d74 <network_configure_weights+0x3d4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f503 2323 	add.w	r3, r3, #667648	; 0xa3000
 8006ccc:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8006cd0:	4a29      	ldr	r2, [pc, #164]	; (8006d78 <network_configure_weights+0x3d8>)
 8006cd2:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8006cd4:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <network_configure_weights+0x3dc>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cdc:	4a27      	ldr	r2, [pc, #156]	; (8006d7c <network_configure_weights+0x3dc>)
 8006cde:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 670144);
 8006ce0:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <network_configure_weights+0x3d4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f503 2323 	add.w	r3, r3, #667648	; 0xa3000
 8006ce8:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8006cec:	4a23      	ldr	r2, [pc, #140]	; (8006d7c <network_configure_weights+0x3dc>)
 8006cee:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 670144);
 8006cf0:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <network_configure_weights+0x3d4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f503 2323 	add.w	r3, r3, #667648	; 0xa3000
 8006cf8:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8006cfc:	4a1f      	ldr	r2, [pc, #124]	; (8006d7c <network_configure_weights+0x3dc>)
 8006cfe:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8006d00:	4b1f      	ldr	r3, [pc, #124]	; (8006d80 <network_configure_weights+0x3e0>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d08:	4a1d      	ldr	r2, [pc, #116]	; (8006d80 <network_configure_weights+0x3e0>)
 8006d0a:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 677056);
 8006d0c:	4b19      	ldr	r3, [pc, #100]	; (8006d74 <network_configure_weights+0x3d4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f503 2325 	add.w	r3, r3, #675840	; 0xa5000
 8006d14:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006d18:	4a19      	ldr	r2, [pc, #100]	; (8006d80 <network_configure_weights+0x3e0>)
 8006d1a:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 677056);
 8006d1c:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <network_configure_weights+0x3d4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f503 2325 	add.w	r3, r3, #675840	; 0xa5000
 8006d24:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006d28:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <network_configure_weights+0x3e0>)
 8006d2a:	60d3      	str	r3, [r2, #12]
    
    eltwise_4_scale_array.format |= AI_FMT_FLAG_CONST;
 8006d2c:	4b15      	ldr	r3, [pc, #84]	; (8006d84 <network_configure_weights+0x3e4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <network_configure_weights+0x3e4>)
 8006d36:	6013      	str	r3, [r2, #0]
    eltwise_4_scale_array.data = AI_PTR(g_network_weights_map[0] + 677312);
 8006d38:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <network_configure_weights+0x3d4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f503 2325 	add.w	r3, r3, #675840	; 0xa5000
 8006d40:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8006d44:	4a0f      	ldr	r2, [pc, #60]	; (8006d84 <network_configure_weights+0x3e4>)
 8006d46:	6093      	str	r3, [r2, #8]
    eltwise_4_scale_array.data_start = AI_PTR(g_network_weights_map[0] + 677312);
 8006d48:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <network_configure_weights+0x3d4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f503 2325 	add.w	r3, r3, #675840	; 0xa5000
 8006d50:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8006d54:	4a0b      	ldr	r2, [pc, #44]	; (8006d84 <network_configure_weights+0x3e4>)
 8006d56:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e005      	b.n	8006d68 <network_configure_weights+0x3c8>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006d5c:	2212      	movs	r2, #18
 8006d5e:	2130      	movs	r1, #48	; 0x30
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 faef 	bl	8007344 <ai_platform_network_set_error>
  return false;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	200009bc 	.word	0x200009bc
 8006d74:	2002da5c 	.word	0x2002da5c
 8006d78:	200009cc 	.word	0x200009cc
 8006d7c:	200009dc 	.word	0x200009dc
 8006d80:	200009ec 	.word	0x200009ec
 8006d84:	200009fc 	.word	0x200009fc

08006d88 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fa53 	bl	800723c <ai_platform_network_get_error>
 8006d96:	4603      	mov	r3, r0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006daa:	2300      	movs	r3, #0
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2305      	movs	r3, #5
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	2301      	movs	r3, #1
 8006db4:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <ai_network_create+0x28>)
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fc9b 	bl	80076f4 <ai_platform_network_create>
 8006dbe:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20001be4 	.word	0x20001be4

08006dcc <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b096      	sub	sp, #88	; 0x58
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006dd8:	2100      	movs	r1, #0
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff ffe0 	bl	8006da0 <ai_network_create>
 8006de0:	4603      	mov	r3, r0
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8006de4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <ai_network_create_and_init+0x24>
        return err;
 8006dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dee:	e05d      	b.n	8006eac <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8006df0:	f107 0314 	add.w	r3, r7, #20
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f8dd 	bl	8006fb4 <ai_network_data_params_get>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f083 0301 	eor.w	r3, r3, #1
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff ffbc 	bl	8006d88 <ai_network_get_error>
 8006e10:	4603      	mov	r3, r0
 8006e12:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8006e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e16:	e049      	b.n	8006eac <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d016      	beq.n	8006e4c <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006e1e:	2300      	movs	r3, #0
 8006e20:	657b      	str	r3, [r7, #84]	; 0x54
 8006e22:	e00e      	b.n	8006e42 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006e24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	f107 0314 	add.w	r3, r7, #20
 8006e34:	330c      	adds	r3, #12
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f922 	bl	8007080 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e3e:	3301      	adds	r3, #1
 8006e40:	657b      	str	r3, [r7, #84]	; 0x54
 8006e42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e44:	461a      	mov	r2, r3
 8006e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	dbeb      	blt.n	8006e24 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d016      	beq.n	8006e80 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006e52:	2300      	movs	r3, #0
 8006e54:	653b      	str	r3, [r7, #80]	; 0x50
 8006e56:	e00e      	b.n	8006e76 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8006e58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	f107 0314 	add.w	r3, r7, #20
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 f908 	bl	8007080 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e72:	3301      	adds	r3, #1
 8006e74:	653b      	str	r3, [r7, #80]	; 0x50
 8006e76:	8b7b      	ldrh	r3, [r7, #26]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	dbeb      	blt.n	8006e58 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f107 0214 	add.w	r2, r7, #20
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f846 	bl	8006f1c <ai_network_init>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f083 0301 	eor.w	r3, r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d006      	beq.n	8006eaa <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff ff71 	bl	8006d88 <ai_network_get_error>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8006eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3758      	adds	r7, #88	; 0x58
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d104      	bne.n	8006ece <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006ec4:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <ai_network_inputs_get+0x2c>)
 8006ec6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a06      	ldr	r2, [pc, #24]	; (8006ee4 <ai_network_inputs_get+0x30>)
 8006ecc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa3d 	bl	8007350 <ai_platform_inputs_get>
 8006ed6:	4603      	mov	r3, r0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20001be4 	.word	0x20001be4
 8006ee4:	a1c00100 	.word	0xa1c00100

08006ee8 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <ai_network_outputs_get+0x2c>)
 8006efa:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a06      	ldr	r2, [pc, #24]	; (8006f18 <ai_network_outputs_get+0x30>)
 8006f00:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fb0f 	bl	8007528 <ai_platform_outputs_get>
 8006f0a:	4603      	mov	r3, r0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20001be4 	.word	0x20001be4
 8006f18:	a1c00100 	.word	0xa1c00100

08006f1c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fcc9 	bl	80078c0 <ai_platform_network_init>
 8006f2e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <ai_network_init+0x1e>
 8006f36:	2300      	movs	r3, #0
 8006f38:	e028      	b.n	8006f8c <ai_network_init+0x70>

  ai_bool ok = true;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f7ff fd2d 	bl	80069a0 <network_configure_weights>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461a      	mov	r2, r3
 8006f4a:	7afb      	ldrb	r3, [r7, #11]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bf14      	ite	ne
 8006f52:	2301      	movne	r3, #1
 8006f54:	2300      	moveq	r3, #0
 8006f56:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7ff fc0c 	bl	8006778 <network_configure_activations>
 8006f60:	4603      	mov	r3, r0
 8006f62:	461a      	mov	r2, r3
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf14      	ite	ne
 8006f6c:	2301      	movne	r3, #1
 8006f6e:	2300      	moveq	r3, #0
 8006f70:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fda6 	bl	8007ac4 <ai_platform_network_post_init>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	7afb      	ldrb	r3, [r7, #11]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bf14      	ite	ne
 8006f84:	2301      	movne	r3, #1
 8006f86:	2300      	moveq	r3, #0
 8006f88:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fe29 	bl	8007bfc <ai_platform_network_process>
 8006faa:	4603      	mov	r3, r0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <ai_network_data_params_get+0x12>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e016      	b.n	8006ff4 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8006fc6:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <ai_network_data_params_get+0x48>)
 8006fc8:	f107 0310 	add.w	r3, r7, #16
 8006fcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fd0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006fd4:	4a0a      	ldr	r2, [pc, #40]	; (8007000 <ai_network_data_params_get+0x4c>)
 8006fd6:	f107 0308 	add.w	r3, r7, #8
 8006fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fde:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006fe2:	f107 0210 	add.w	r2, r7, #16
 8006fe6:	f107 0308 	add.w	r3, r7, #8
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f903 	bl	80071f8 <ai_platform_bind_network_params>
 8006ff2:	4603      	mov	r3, r0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	0800a6b4 	.word	0x0800a6b4
 8007000:	0800a6bc 	.word	0x0800a6bc

08007004 <ai_buffer_get_size>:
 8007004:	b378      	cbz	r0, 8007066 <ai_buffer_get_size+0x62>
 8007006:	b410      	push	{r4}
 8007008:	6803      	ldr	r3, [r0, #0]
 800700a:	4a17      	ldr	r2, [pc, #92]	; (8007068 <ai_buffer_get_size+0x64>)
 800700c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007010:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007014:	4293      	cmp	r3, r2
 8007016:	d01e      	beq.n	8007056 <ai_buffer_get_size+0x52>
 8007018:	6984      	ldr	r4, [r0, #24]
 800701a:	6862      	ldr	r2, [r4, #4]
 800701c:	7d03      	ldrb	r3, [r0, #20]
 800701e:	6941      	ldr	r1, [r0, #20]
 8007020:	f1a3 0301 	sub.w	r3, r3, #1
 8007024:	fab3 f383 	clz	r3, r3
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800702e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8007032:	da0b      	bge.n	800704c <ai_buffer_get_size+0x48>
 8007034:	2b01      	cmp	r3, #1
 8007036:	d102      	bne.n	800703e <ai_buffer_get_size+0x3a>
 8007038:	2802      	cmp	r0, #2
 800703a:	d007      	beq.n	800704c <ai_buffer_get_size+0x48>
 800703c:	2302      	movs	r3, #2
 800703e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007042:	3301      	adds	r3, #1
 8007044:	4298      	cmp	r0, r3
 8007046:	fb01 f202 	mul.w	r2, r1, r2
 800704a:	d1f3      	bne.n	8007034 <ai_buffer_get_size+0x30>
 800704c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8007050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	2900      	cmp	r1, #0
 8007058:	d0de      	beq.n	8007018 <ai_buffer_get_size+0x14>
 800705a:	6984      	ldr	r4, [r0, #24]
 800705c:	6863      	ldr	r3, [r4, #4]
 800705e:	331f      	adds	r3, #31
 8007060:	f023 021f 	bic.w	r2, r3, #31
 8007064:	e7da      	b.n	800701c <ai_buffer_get_size+0x18>
 8007066:	4770      	bx	lr
 8007068:	000400c0 	.word	0x000400c0

0800706c <ai_buffer_array_sane>:
 800706c:	b138      	cbz	r0, 800707e <ai_buffer_array_sane+0x12>
 800706e:	6843      	ldr	r3, [r0, #4]
 8007070:	b123      	cbz	r3, 800707c <ai_buffer_array_sane+0x10>
 8007072:	8840      	ldrh	r0, [r0, #2]
 8007074:	3800      	subs	r0, #0
 8007076:	bf18      	it	ne
 8007078:	2001      	movne	r0, #1
 800707a:	4770      	bx	lr
 800707c:	4618      	mov	r0, r3
 800707e:	4770      	bx	lr

08007080 <ai_buffer_array_item_set_address>:
 8007080:	b150      	cbz	r0, 8007098 <ai_buffer_array_item_set_address+0x18>
 8007082:	6843      	ldr	r3, [r0, #4]
 8007084:	b14b      	cbz	r3, 800709a <ai_buffer_array_item_set_address+0x1a>
 8007086:	8840      	ldrh	r0, [r0, #2]
 8007088:	b900      	cbnz	r0, 800708c <ai_buffer_array_item_set_address+0xc>
 800708a:	4770      	bx	lr
 800708c:	2001      	movs	r0, #1
 800708e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007092:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007096:	604a      	str	r2, [r1, #4]
 8007098:	4770      	bx	lr
 800709a:	4618      	mov	r0, r3
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop

080070a0 <_ai_platform_acquire_crc>:
 80070a0:	2001      	movs	r0, #1
 80070a2:	4770      	bx	lr

080070a4 <_ai_platform_release_crc>:
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop

080070a8 <ai_platform_get_weights_map>:
 80070a8:	2a00      	cmp	r2, #0
 80070aa:	d037      	beq.n	800711c <ai_platform_get_weights_map+0x74>
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	4604      	mov	r4, r0
 80070b0:	b1a0      	cbz	r0, 80070dc <ai_platform_get_weights_map+0x34>
 80070b2:	460f      	mov	r7, r1
 80070b4:	b191      	cbz	r1, 80070dc <ai_platform_get_weights_map+0x34>
 80070b6:	4b25      	ldr	r3, [pc, #148]	; (800714c <ai_platform_get_weights_map+0xa4>)
 80070b8:	6810      	ldr	r0, [r2, #0]
 80070ba:	4615      	mov	r5, r2
 80070bc:	4298      	cmp	r0, r3
 80070be:	d00f      	beq.n	80070e0 <ai_platform_get_weights_map+0x38>
 80070c0:	6855      	ldr	r5, [r2, #4]
 80070c2:	b15d      	cbz	r5, 80070dc <ai_platform_get_weights_map+0x34>
 80070c4:	682e      	ldr	r6, [r5, #0]
 80070c6:	429e      	cmp	r6, r3
 80070c8:	d02a      	beq.n	8007120 <ai_platform_get_weights_map+0x78>
 80070ca:	f1a1 0001 	sub.w	r0, r1, #1
 80070ce:	fab0 f080 	clz	r0, r0
 80070d2:	6025      	str	r5, [r4, #0]
 80070d4:	0940      	lsrs	r0, r0, #5
 80070d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d8:	42a7      	cmp	r7, r4
 80070da:	d034      	beq.n	8007146 <ai_platform_get_weights_map+0x9e>
 80070dc:	2000      	movs	r0, #0
 80070de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e0:	1d10      	adds	r0, r2, #4
 80070e2:	f7ff ffc3 	bl	800706c <ai_buffer_array_sane>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d0f8      	beq.n	80070dc <ai_platform_get_weights_map+0x34>
 80070ea:	88eb      	ldrh	r3, [r5, #6]
 80070ec:	429f      	cmp	r7, r3
 80070ee:	d1f5      	bne.n	80070dc <ai_platform_get_weights_map+0x34>
 80070f0:	f04f 0e00 	mov.w	lr, #0
 80070f4:	4670      	mov	r0, lr
 80070f6:	1f23      	subs	r3, r4, #4
 80070f8:	68aa      	ldr	r2, [r5, #8]
 80070fa:	eb02 0c0e 	add.w	ip, r2, lr
 80070fe:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8007102:	f10e 0e1c 	add.w	lr, lr, #28
 8007106:	b124      	cbz	r4, 8007112 <ai_platform_get_weights_map+0x6a>
 8007108:	3001      	adds	r0, #1
 800710a:	4287      	cmp	r7, r0
 800710c:	f843 4f04 	str.w	r4, [r3, #4]!
 8007110:	d1f2      	bne.n	80070f8 <ai_platform_get_weights_map+0x50>
 8007112:	1a38      	subs	r0, r7, r0
 8007114:	fab0 f080 	clz	r0, r0
 8007118:	0940      	lsrs	r0, r0, #5
 800711a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800711c:	2000      	movs	r0, #0
 800711e:	4770      	bx	lr
 8007120:	1f23      	subs	r3, r4, #4
 8007122:	4628      	mov	r0, r5
 8007124:	2400      	movs	r4, #0
 8007126:	e000      	b.n	800712a <ai_platform_get_weights_map+0x82>
 8007128:	4614      	mov	r4, r2
 800712a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800712e:	42b2      	cmp	r2, r6
 8007130:	d0d2      	beq.n	80070d8 <ai_platform_get_weights_map+0x30>
 8007132:	f843 2f04 	str.w	r2, [r3, #4]!
 8007136:	1c62      	adds	r2, r4, #1
 8007138:	4297      	cmp	r7, r2
 800713a:	d1f5      	bne.n	8007128 <ai_platform_get_weights_map+0x80>
 800713c:	3402      	adds	r4, #2
 800713e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007142:	42b3      	cmp	r3, r6
 8007144:	d1ca      	bne.n	80070dc <ai_platform_get_weights_map+0x34>
 8007146:	2001      	movs	r0, #1
 8007148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800714a:	bf00      	nop
 800714c:	a1facade 	.word	0xa1facade

08007150 <ai_platform_get_activations_map>:
 8007150:	2a00      	cmp	r2, #0
 8007152:	d038      	beq.n	80071c6 <ai_platform_get_activations_map+0x76>
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	4604      	mov	r4, r0
 8007158:	b1a0      	cbz	r0, 8007184 <ai_platform_get_activations_map+0x34>
 800715a:	460f      	mov	r7, r1
 800715c:	b191      	cbz	r1, 8007184 <ai_platform_get_activations_map+0x34>
 800715e:	4b25      	ldr	r3, [pc, #148]	; (80071f4 <ai_platform_get_activations_map+0xa4>)
 8007160:	6810      	ldr	r0, [r2, #0]
 8007162:	4615      	mov	r5, r2
 8007164:	4298      	cmp	r0, r3
 8007166:	d00f      	beq.n	8007188 <ai_platform_get_activations_map+0x38>
 8007168:	6a15      	ldr	r5, [r2, #32]
 800716a:	b15d      	cbz	r5, 8007184 <ai_platform_get_activations_map+0x34>
 800716c:	682e      	ldr	r6, [r5, #0]
 800716e:	429e      	cmp	r6, r3
 8007170:	d02b      	beq.n	80071ca <ai_platform_get_activations_map+0x7a>
 8007172:	f1a1 0001 	sub.w	r0, r1, #1
 8007176:	fab0 f080 	clz	r0, r0
 800717a:	6025      	str	r5, [r4, #0]
 800717c:	0940      	lsrs	r0, r0, #5
 800717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007180:	42a7      	cmp	r7, r4
 8007182:	d035      	beq.n	80071f0 <ai_platform_get_activations_map+0xa0>
 8007184:	2000      	movs	r0, #0
 8007186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007188:	f102 000c 	add.w	r0, r2, #12
 800718c:	f7ff ff6e 	bl	800706c <ai_buffer_array_sane>
 8007190:	2800      	cmp	r0, #0
 8007192:	d0f7      	beq.n	8007184 <ai_platform_get_activations_map+0x34>
 8007194:	89eb      	ldrh	r3, [r5, #14]
 8007196:	429f      	cmp	r7, r3
 8007198:	d1f4      	bne.n	8007184 <ai_platform_get_activations_map+0x34>
 800719a:	f04f 0e00 	mov.w	lr, #0
 800719e:	4670      	mov	r0, lr
 80071a0:	1f23      	subs	r3, r4, #4
 80071a2:	692a      	ldr	r2, [r5, #16]
 80071a4:	eb02 0c0e 	add.w	ip, r2, lr
 80071a8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80071ac:	f10e 0e1c 	add.w	lr, lr, #28
 80071b0:	b124      	cbz	r4, 80071bc <ai_platform_get_activations_map+0x6c>
 80071b2:	3001      	adds	r0, #1
 80071b4:	4287      	cmp	r7, r0
 80071b6:	f843 4f04 	str.w	r4, [r3, #4]!
 80071ba:	d1f2      	bne.n	80071a2 <ai_platform_get_activations_map+0x52>
 80071bc:	1a38      	subs	r0, r7, r0
 80071be:	fab0 f080 	clz	r0, r0
 80071c2:	0940      	lsrs	r0, r0, #5
 80071c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c6:	2000      	movs	r0, #0
 80071c8:	4770      	bx	lr
 80071ca:	1f23      	subs	r3, r4, #4
 80071cc:	4628      	mov	r0, r5
 80071ce:	2400      	movs	r4, #0
 80071d0:	e000      	b.n	80071d4 <ai_platform_get_activations_map+0x84>
 80071d2:	4614      	mov	r4, r2
 80071d4:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80071d8:	42b2      	cmp	r2, r6
 80071da:	d0d1      	beq.n	8007180 <ai_platform_get_activations_map+0x30>
 80071dc:	f843 2f04 	str.w	r2, [r3, #4]!
 80071e0:	1c62      	adds	r2, r4, #1
 80071e2:	4297      	cmp	r7, r2
 80071e4:	d1f5      	bne.n	80071d2 <ai_platform_get_activations_map+0x82>
 80071e6:	3402      	adds	r4, #2
 80071e8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80071ec:	42b3      	cmp	r3, r6
 80071ee:	d1c9      	bne.n	8007184 <ai_platform_get_activations_map+0x34>
 80071f0:	2001      	movs	r0, #1
 80071f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f4:	a1facade 	.word	0xa1facade

080071f8 <ai_platform_bind_network_params>:
 80071f8:	b1a0      	cbz	r0, 8007224 <ai_platform_bind_network_params+0x2c>
 80071fa:	b1b1      	cbz	r1, 800722a <ai_platform_bind_network_params+0x32>
 80071fc:	b1c2      	cbz	r2, 8007230 <ai_platform_bind_network_params+0x38>
 80071fe:	4603      	mov	r3, r0
 8007200:	f04f 0c01 	mov.w	ip, #1
 8007204:	b500      	push	{lr}
 8007206:	480c      	ldr	r0, [pc, #48]	; (8007238 <ai_platform_bind_network_params+0x40>)
 8007208:	f103 0e0c 	add.w	lr, r3, #12
 800720c:	f843 0b04 	str.w	r0, [r3], #4
 8007210:	c903      	ldmia	r1, {r0, r1}
 8007212:	e883 0003 	stmia.w	r3, {r0, r1}
 8007216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800721a:	e88e 0003 	stmia.w	lr, {r0, r1}
 800721e:	4660      	mov	r0, ip
 8007220:	f85d fb04 	ldr.w	pc, [sp], #4
 8007224:	4684      	mov	ip, r0
 8007226:	4660      	mov	r0, ip
 8007228:	4770      	bx	lr
 800722a:	468c      	mov	ip, r1
 800722c:	4660      	mov	r0, ip
 800722e:	4770      	bx	lr
 8007230:	4694      	mov	ip, r2
 8007232:	4660      	mov	r0, ip
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	a1facade 	.word	0xa1facade

0800723c <ai_platform_network_get_error>:
 800723c:	b510      	push	{r4, lr}
 800723e:	b1e8      	cbz	r0, 800727c <ai_platform_network_get_error+0x40>
 8007240:	4b3b      	ldr	r3, [pc, #236]	; (8007330 <ai_platform_network_get_error+0xf4>)
 8007242:	6802      	ldr	r2, [r0, #0]
 8007244:	4604      	mov	r4, r0
 8007246:	429a      	cmp	r2, r3
 8007248:	d118      	bne.n	800727c <ai_platform_network_get_error+0x40>
 800724a:	f7ff ff29 	bl	80070a0 <_ai_platform_acquire_crc>
 800724e:	4b39      	ldr	r3, [pc, #228]	; (8007334 <ai_platform_network_get_error+0xf8>)
 8007250:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8007254:	429a      	cmp	r2, r3
 8007256:	d038      	beq.n	80072ca <ai_platform_network_get_error+0x8e>
 8007258:	2218      	movs	r2, #24
 800725a:	609a      	str	r2, [r3, #8]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	2a18      	cmp	r2, #24
 8007260:	d051      	beq.n	8007306 <ai_platform_network_get_error+0xca>
 8007262:	2301      	movs	r3, #1
 8007264:	4a34      	ldr	r2, [pc, #208]	; (8007338 <ai_platform_network_get_error+0xfc>)
 8007266:	6093      	str	r3, [r2, #8]
 8007268:	6893      	ldr	r3, [r2, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1fc      	bne.n	8007268 <ai_platform_network_get_error+0x2c>
 800726e:	4933      	ldr	r1, [pc, #204]	; (800733c <ai_platform_network_get_error+0x100>)
 8007270:	4b33      	ldr	r3, [pc, #204]	; (8007340 <ai_platform_network_get_error+0x104>)
 8007272:	6011      	str	r1, [r2, #0]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d050      	beq.n	800731c <ai_platform_network_get_error+0xe0>
 800727a:	e7fe      	b.n	800727a <ai_platform_network_get_error+0x3e>
 800727c:	f7ff ff10 	bl	80070a0 <_ai_platform_acquire_crc>
 8007280:	4b2c      	ldr	r3, [pc, #176]	; (8007334 <ai_platform_network_get_error+0xf8>)
 8007282:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8007286:	429a      	cmp	r2, r3
 8007288:	d011      	beq.n	80072ae <ai_platform_network_get_error+0x72>
 800728a:	2218      	movs	r2, #24
 800728c:	609a      	str	r2, [r3, #8]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	2a18      	cmp	r2, #24
 8007292:	d028      	beq.n	80072e6 <ai_platform_network_get_error+0xaa>
 8007294:	2301      	movs	r3, #1
 8007296:	4a28      	ldr	r2, [pc, #160]	; (8007338 <ai_platform_network_get_error+0xfc>)
 8007298:	6093      	str	r3, [r2, #8]
 800729a:	6893      	ldr	r3, [r2, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1fc      	bne.n	800729a <ai_platform_network_get_error+0x5e>
 80072a0:	4926      	ldr	r1, [pc, #152]	; (800733c <ai_platform_network_get_error+0x100>)
 80072a2:	4b27      	ldr	r3, [pc, #156]	; (8007340 <ai_platform_network_get_error+0x104>)
 80072a4:	6011      	str	r1, [r2, #0]
 80072a6:	6812      	ldr	r2, [r2, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d027      	beq.n	80072fc <ai_platform_network_get_error+0xc0>
 80072ac:	e7fe      	b.n	80072ac <ai_platform_network_get_error+0x70>
 80072ae:	2301      	movs	r3, #1
 80072b0:	f100 0208 	add.w	r2, r0, #8
 80072b4:	6083      	str	r3, [r0, #8]
 80072b6:	6813      	ldr	r3, [r2, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1fc      	bne.n	80072b6 <ai_platform_network_get_error+0x7a>
 80072bc:	4a1f      	ldr	r2, [pc, #124]	; (800733c <ai_platform_network_get_error+0x100>)
 80072be:	4b20      	ldr	r3, [pc, #128]	; (8007340 <ai_platform_network_get_error+0x104>)
 80072c0:	6002      	str	r2, [r0, #0]
 80072c2:	6802      	ldr	r2, [r0, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d019      	beq.n	80072fc <ai_platform_network_get_error+0xc0>
 80072c8:	e7fe      	b.n	80072c8 <ai_platform_network_get_error+0x8c>
 80072ca:	2301      	movs	r3, #1
 80072cc:	f100 0208 	add.w	r2, r0, #8
 80072d0:	6083      	str	r3, [r0, #8]
 80072d2:	6813      	ldr	r3, [r2, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1fc      	bne.n	80072d2 <ai_platform_network_get_error+0x96>
 80072d8:	4a18      	ldr	r2, [pc, #96]	; (800733c <ai_platform_network_get_error+0x100>)
 80072da:	4b19      	ldr	r3, [pc, #100]	; (8007340 <ai_platform_network_get_error+0x104>)
 80072dc:	6002      	str	r2, [r0, #0]
 80072de:	6802      	ldr	r2, [r0, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d01b      	beq.n	800731c <ai_platform_network_get_error+0xe0>
 80072e4:	e7fe      	b.n	80072e4 <ai_platform_network_get_error+0xa8>
 80072e6:	2201      	movs	r2, #1
 80072e8:	609a      	str	r2, [r3, #8]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	d1fc      	bne.n	80072ea <ai_platform_network_get_error+0xae>
 80072f0:	4912      	ldr	r1, [pc, #72]	; (800733c <ai_platform_network_get_error+0x100>)
 80072f2:	4a13      	ldr	r2, [pc, #76]	; (8007340 <ai_platform_network_get_error+0x104>)
 80072f4:	6019      	str	r1, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d117      	bne.n	800732c <ai_platform_network_get_error+0xf0>
 80072fc:	f7ff fed2 	bl	80070a4 <_ai_platform_release_crc>
 8007300:	f241 0010 	movw	r0, #4112	; 0x1010
 8007304:	bd10      	pop	{r4, pc}
 8007306:	2201      	movs	r2, #1
 8007308:	609a      	str	r2, [r3, #8]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	2a00      	cmp	r2, #0
 800730e:	d1fc      	bne.n	800730a <ai_platform_network_get_error+0xce>
 8007310:	490a      	ldr	r1, [pc, #40]	; (800733c <ai_platform_network_get_error+0x100>)
 8007312:	4a0b      	ldr	r2, [pc, #44]	; (8007340 <ai_platform_network_get_error+0x104>)
 8007314:	6019      	str	r1, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4293      	cmp	r3, r2
 800731a:	d108      	bne.n	800732e <ai_platform_network_get_error+0xf2>
 800731c:	f7ff fec2 	bl	80070a4 <_ai_platform_release_crc>
 8007320:	f104 0010 	add.w	r0, r4, #16
 8007324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007328:	f000 bef8 	b.w	800811c <core_get_error>
 800732c:	e7fe      	b.n	800732c <ai_platform_network_get_error+0xf0>
 800732e:	e7fe      	b.n	800732e <ai_platform_network_get_error+0xf2>
 8007330:	a1c00100 	.word	0xa1c00100
 8007334:	40023000 	.word	0x40023000
 8007338:	50023000 	.word	0x50023000
 800733c:	f407a5c2 	.word	0xf407a5c2
 8007340:	b5e8b5cd 	.word	0xb5e8b5cd

08007344 <ai_platform_network_set_error>:
 8007344:	b110      	cbz	r0, 800734c <ai_platform_network_set_error+0x8>
 8007346:	3010      	adds	r0, #16
 8007348:	f000 beee 	b.w	8008128 <core_set_error>
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop

08007350 <ai_platform_inputs_get>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	b085      	sub	sp, #20
 8007356:	9102      	str	r1, [sp, #8]
 8007358:	b1e8      	cbz	r0, 8007396 <ai_platform_inputs_get+0x46>
 800735a:	4b6e      	ldr	r3, [pc, #440]	; (8007514 <ai_platform_inputs_get+0x1c4>)
 800735c:	6802      	ldr	r2, [r0, #0]
 800735e:	4607      	mov	r7, r0
 8007360:	429a      	cmp	r2, r3
 8007362:	d118      	bne.n	8007396 <ai_platform_inputs_get+0x46>
 8007364:	f7ff fe9c 	bl	80070a0 <_ai_platform_acquire_crc>
 8007368:	4b6b      	ldr	r3, [pc, #428]	; (8007518 <ai_platform_inputs_get+0x1c8>)
 800736a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800736e:	429a      	cmp	r2, r3
 8007370:	d038      	beq.n	80073e4 <ai_platform_inputs_get+0x94>
 8007372:	2218      	movs	r2, #24
 8007374:	609a      	str	r2, [r3, #8]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	2a18      	cmp	r2, #24
 800737a:	d052      	beq.n	8007422 <ai_platform_inputs_get+0xd2>
 800737c:	2301      	movs	r3, #1
 800737e:	4a67      	ldr	r2, [pc, #412]	; (800751c <ai_platform_inputs_get+0x1cc>)
 8007380:	6093      	str	r3, [r2, #8]
 8007382:	6893      	ldr	r3, [r2, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1fc      	bne.n	8007382 <ai_platform_inputs_get+0x32>
 8007388:	4b65      	ldr	r3, [pc, #404]	; (8007520 <ai_platform_inputs_get+0x1d0>)
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	4b65      	ldr	r3, [pc, #404]	; (8007524 <ai_platform_inputs_get+0x1d4>)
 8007390:	429a      	cmp	r2, r3
 8007392:	d051      	beq.n	8007438 <ai_platform_inputs_get+0xe8>
 8007394:	e7fe      	b.n	8007394 <ai_platform_inputs_get+0x44>
 8007396:	f7ff fe83 	bl	80070a0 <_ai_platform_acquire_crc>
 800739a:	4b5f      	ldr	r3, [pc, #380]	; (8007518 <ai_platform_inputs_get+0x1c8>)
 800739c:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d011      	beq.n	80073c8 <ai_platform_inputs_get+0x78>
 80073a4:	2218      	movs	r2, #24
 80073a6:	609a      	str	r2, [r3, #8]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	2a18      	cmp	r2, #24
 80073ac:	d028      	beq.n	8007400 <ai_platform_inputs_get+0xb0>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4a5a      	ldr	r2, [pc, #360]	; (800751c <ai_platform_inputs_get+0x1cc>)
 80073b2:	6093      	str	r3, [r2, #8]
 80073b4:	6893      	ldr	r3, [r2, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1fc      	bne.n	80073b4 <ai_platform_inputs_get+0x64>
 80073ba:	4959      	ldr	r1, [pc, #356]	; (8007520 <ai_platform_inputs_get+0x1d0>)
 80073bc:	4b59      	ldr	r3, [pc, #356]	; (8007524 <ai_platform_inputs_get+0x1d4>)
 80073be:	6011      	str	r1, [r2, #0]
 80073c0:	6812      	ldr	r2, [r2, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d027      	beq.n	8007416 <ai_platform_inputs_get+0xc6>
 80073c6:	e7fe      	b.n	80073c6 <ai_platform_inputs_get+0x76>
 80073c8:	2301      	movs	r3, #1
 80073ca:	f100 0208 	add.w	r2, r0, #8
 80073ce:	6083      	str	r3, [r0, #8]
 80073d0:	6813      	ldr	r3, [r2, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1fc      	bne.n	80073d0 <ai_platform_inputs_get+0x80>
 80073d6:	4a52      	ldr	r2, [pc, #328]	; (8007520 <ai_platform_inputs_get+0x1d0>)
 80073d8:	4b52      	ldr	r3, [pc, #328]	; (8007524 <ai_platform_inputs_get+0x1d4>)
 80073da:	6002      	str	r2, [r0, #0]
 80073dc:	6802      	ldr	r2, [r0, #0]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d019      	beq.n	8007416 <ai_platform_inputs_get+0xc6>
 80073e2:	e7fe      	b.n	80073e2 <ai_platform_inputs_get+0x92>
 80073e4:	2301      	movs	r3, #1
 80073e6:	f100 0208 	add.w	r2, r0, #8
 80073ea:	6083      	str	r3, [r0, #8]
 80073ec:	6813      	ldr	r3, [r2, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1fc      	bne.n	80073ec <ai_platform_inputs_get+0x9c>
 80073f2:	4a4b      	ldr	r2, [pc, #300]	; (8007520 <ai_platform_inputs_get+0x1d0>)
 80073f4:	4b4b      	ldr	r3, [pc, #300]	; (8007524 <ai_platform_inputs_get+0x1d4>)
 80073f6:	6002      	str	r2, [r0, #0]
 80073f8:	6802      	ldr	r2, [r0, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d01c      	beq.n	8007438 <ai_platform_inputs_get+0xe8>
 80073fe:	e7fe      	b.n	80073fe <ai_platform_inputs_get+0xae>
 8007400:	2201      	movs	r2, #1
 8007402:	609a      	str	r2, [r3, #8]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	2a00      	cmp	r2, #0
 8007408:	d1fc      	bne.n	8007404 <ai_platform_inputs_get+0xb4>
 800740a:	4945      	ldr	r1, [pc, #276]	; (8007520 <ai_platform_inputs_get+0x1d0>)
 800740c:	4a45      	ldr	r2, [pc, #276]	; (8007524 <ai_platform_inputs_get+0x1d4>)
 800740e:	6019      	str	r1, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4293      	cmp	r3, r2
 8007414:	d166      	bne.n	80074e4 <ai_platform_inputs_get+0x194>
 8007416:	f7ff fe45 	bl	80070a4 <_ai_platform_release_crc>
 800741a:	2000      	movs	r0, #0
 800741c:	b005      	add	sp, #20
 800741e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007422:	2201      	movs	r2, #1
 8007424:	609a      	str	r2, [r3, #8]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	2a00      	cmp	r2, #0
 800742a:	d1fc      	bne.n	8007426 <ai_platform_inputs_get+0xd6>
 800742c:	4a3c      	ldr	r2, [pc, #240]	; (8007520 <ai_platform_inputs_get+0x1d0>)
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b3c      	ldr	r3, [pc, #240]	; (8007524 <ai_platform_inputs_get+0x1d4>)
 8007434:	429a      	cmp	r2, r3
 8007436:	d156      	bne.n	80074e6 <ai_platform_inputs_get+0x196>
 8007438:	f7ff fe34 	bl	80070a4 <_ai_platform_release_crc>
 800743c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d052      	beq.n	80074e8 <ai_platform_inputs_get+0x198>
 8007442:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8007446:	f1ba 0f00 	cmp.w	sl, #0
 800744a:	d04d      	beq.n	80074e8 <ai_platform_inputs_get+0x198>
 800744c:	f04f 0b00 	mov.w	fp, #0
 8007450:	9703      	str	r7, [sp, #12]
 8007452:	465d      	mov	r5, fp
 8007454:	e016      	b.n	8007484 <ai_platform_inputs_get+0x134>
 8007456:	2301      	movs	r3, #1
 8007458:	9901      	ldr	r1, [sp, #4]
 800745a:	507b      	str	r3, [r7, r1]
 800745c:	69b1      	ldr	r1, [r6, #24]
 800745e:	f04f 0301 	mov.w	r3, #1
 8007462:	6849      	ldr	r1, [r1, #4]
 8007464:	7523      	strb	r3, [r4, #20]
 8007466:	2300      	movs	r3, #0
 8007468:	60a2      	str	r2, [r4, #8]
 800746a:	6962      	ldr	r2, [r4, #20]
 800746c:	e9c4 0c00 	strd	r0, ip, [r4]
 8007470:	f369 221f 	bfi	r2, r9, #8, #24
 8007474:	6121      	str	r1, [r4, #16]
 8007476:	f8c4 8018 	str.w	r8, [r4, #24]
 800747a:	60e3      	str	r3, [r4, #12]
 800747c:	3501      	adds	r5, #1
 800747e:	f10b 0b1c 	add.w	fp, fp, #28
 8007482:	6162      	str	r2, [r4, #20]
 8007484:	f8ba 3000 	ldrh.w	r3, [sl]
 8007488:	b2aa      	uxth	r2, r5
 800748a:	42ab      	cmp	r3, r5
 800748c:	d93b      	bls.n	8007506 <ai_platform_inputs_get+0x1b6>
 800748e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007492:	00e9      	lsls	r1, r5, #3
 8007494:	9101      	str	r1, [sp, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d035      	beq.n	8007506 <ai_platform_inputs_get+0x1b6>
 800749a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800749e:	2e00      	cmp	r6, #0
 80074a0:	d031      	beq.n	8007506 <ai_platform_inputs_get+0x1b6>
 80074a2:	f8da 3008 	ldr.w	r3, [sl, #8]
 80074a6:	69b2      	ldr	r2, [r6, #24]
 80074a8:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80074ac:	68b3      	ldr	r3, [r6, #8]
 80074ae:	6810      	ldr	r0, [r2, #0]
 80074b0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80074b4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80074b8:	f002 f9e8 	bl	800988c <ai_array_to_buffer_fmt>
 80074bc:	69b1      	ldr	r1, [r6, #24]
 80074be:	eb07 02c5 	add.w	r2, r7, r5, lsl #3
 80074c2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80074c6:	445c      	add	r4, fp
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	d0c8      	beq.n	800745e <ai_platform_inputs_get+0x10e>
 80074cc:	2100      	movs	r1, #0
 80074ce:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80074d2:	6831      	ldr	r1, [r6, #0]
 80074d4:	6051      	str	r1, [r2, #4]
 80074d6:	b111      	cbz	r1, 80074de <ai_platform_inputs_get+0x18e>
 80074d8:	8849      	ldrh	r1, [r1, #2]
 80074da:	2900      	cmp	r1, #0
 80074dc:	d1bb      	bne.n	8007456 <ai_platform_inputs_get+0x106>
 80074de:	2200      	movs	r2, #0
 80074e0:	69b1      	ldr	r1, [r6, #24]
 80074e2:	e7bc      	b.n	800745e <ai_platform_inputs_get+0x10e>
 80074e4:	e7fe      	b.n	80074e4 <ai_platform_inputs_get+0x194>
 80074e6:	e7fe      	b.n	80074e6 <ai_platform_inputs_get+0x196>
 80074e8:	2218      	movs	r2, #24
 80074ea:	2111      	movs	r1, #17
 80074ec:	f107 0010 	add.w	r0, r7, #16
 80074f0:	f000 fe1a 	bl	8008128 <core_set_error>
 80074f4:	2200      	movs	r2, #0
 80074f6:	4610      	mov	r0, r2
 80074f8:	9b02      	ldr	r3, [sp, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d08e      	beq.n	800741c <ai_platform_inputs_get+0xcc>
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	b005      	add	sp, #20
 8007502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007506:	9f03      	ldr	r7, [sp, #12]
 8007508:	2a00      	cmp	r2, #0
 800750a:	d0ed      	beq.n	80074e8 <ai_platform_inputs_get+0x198>
 800750c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007510:	6858      	ldr	r0, [r3, #4]
 8007512:	e7f1      	b.n	80074f8 <ai_platform_inputs_get+0x1a8>
 8007514:	a1c00100 	.word	0xa1c00100
 8007518:	40023000 	.word	0x40023000
 800751c:	50023000 	.word	0x50023000
 8007520:	f407a5c2 	.word	0xf407a5c2
 8007524:	b5e8b5cd 	.word	0xb5e8b5cd

08007528 <ai_platform_outputs_get>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	b085      	sub	sp, #20
 800752e:	9102      	str	r1, [sp, #8]
 8007530:	b1e8      	cbz	r0, 800756e <ai_platform_outputs_get+0x46>
 8007532:	4b6b      	ldr	r3, [pc, #428]	; (80076e0 <ai_platform_outputs_get+0x1b8>)
 8007534:	6802      	ldr	r2, [r0, #0]
 8007536:	4607      	mov	r7, r0
 8007538:	429a      	cmp	r2, r3
 800753a:	d118      	bne.n	800756e <ai_platform_outputs_get+0x46>
 800753c:	f7ff fdb0 	bl	80070a0 <_ai_platform_acquire_crc>
 8007540:	4b68      	ldr	r3, [pc, #416]	; (80076e4 <ai_platform_outputs_get+0x1bc>)
 8007542:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8007546:	429a      	cmp	r2, r3
 8007548:	d038      	beq.n	80075bc <ai_platform_outputs_get+0x94>
 800754a:	2218      	movs	r2, #24
 800754c:	609a      	str	r2, [r3, #8]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	2a18      	cmp	r2, #24
 8007552:	d052      	beq.n	80075fa <ai_platform_outputs_get+0xd2>
 8007554:	2301      	movs	r3, #1
 8007556:	4a64      	ldr	r2, [pc, #400]	; (80076e8 <ai_platform_outputs_get+0x1c0>)
 8007558:	6093      	str	r3, [r2, #8]
 800755a:	6893      	ldr	r3, [r2, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1fc      	bne.n	800755a <ai_platform_outputs_get+0x32>
 8007560:	4b62      	ldr	r3, [pc, #392]	; (80076ec <ai_platform_outputs_get+0x1c4>)
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	4b62      	ldr	r3, [pc, #392]	; (80076f0 <ai_platform_outputs_get+0x1c8>)
 8007568:	429a      	cmp	r2, r3
 800756a:	d051      	beq.n	8007610 <ai_platform_outputs_get+0xe8>
 800756c:	e7fe      	b.n	800756c <ai_platform_outputs_get+0x44>
 800756e:	f7ff fd97 	bl	80070a0 <_ai_platform_acquire_crc>
 8007572:	4b5c      	ldr	r3, [pc, #368]	; (80076e4 <ai_platform_outputs_get+0x1bc>)
 8007574:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8007578:	429a      	cmp	r2, r3
 800757a:	d011      	beq.n	80075a0 <ai_platform_outputs_get+0x78>
 800757c:	2218      	movs	r2, #24
 800757e:	609a      	str	r2, [r3, #8]
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	2a18      	cmp	r2, #24
 8007584:	d028      	beq.n	80075d8 <ai_platform_outputs_get+0xb0>
 8007586:	2301      	movs	r3, #1
 8007588:	4a57      	ldr	r2, [pc, #348]	; (80076e8 <ai_platform_outputs_get+0x1c0>)
 800758a:	6093      	str	r3, [r2, #8]
 800758c:	6893      	ldr	r3, [r2, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1fc      	bne.n	800758c <ai_platform_outputs_get+0x64>
 8007592:	4956      	ldr	r1, [pc, #344]	; (80076ec <ai_platform_outputs_get+0x1c4>)
 8007594:	4b56      	ldr	r3, [pc, #344]	; (80076f0 <ai_platform_outputs_get+0x1c8>)
 8007596:	6011      	str	r1, [r2, #0]
 8007598:	6812      	ldr	r2, [r2, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d027      	beq.n	80075ee <ai_platform_outputs_get+0xc6>
 800759e:	e7fe      	b.n	800759e <ai_platform_outputs_get+0x76>
 80075a0:	2301      	movs	r3, #1
 80075a2:	f100 0208 	add.w	r2, r0, #8
 80075a6:	6083      	str	r3, [r0, #8]
 80075a8:	6813      	ldr	r3, [r2, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1fc      	bne.n	80075a8 <ai_platform_outputs_get+0x80>
 80075ae:	4a4f      	ldr	r2, [pc, #316]	; (80076ec <ai_platform_outputs_get+0x1c4>)
 80075b0:	4b4f      	ldr	r3, [pc, #316]	; (80076f0 <ai_platform_outputs_get+0x1c8>)
 80075b2:	6002      	str	r2, [r0, #0]
 80075b4:	6802      	ldr	r2, [r0, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d019      	beq.n	80075ee <ai_platform_outputs_get+0xc6>
 80075ba:	e7fe      	b.n	80075ba <ai_platform_outputs_get+0x92>
 80075bc:	2301      	movs	r3, #1
 80075be:	f100 0208 	add.w	r2, r0, #8
 80075c2:	6083      	str	r3, [r0, #8]
 80075c4:	6813      	ldr	r3, [r2, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1fc      	bne.n	80075c4 <ai_platform_outputs_get+0x9c>
 80075ca:	4a48      	ldr	r2, [pc, #288]	; (80076ec <ai_platform_outputs_get+0x1c4>)
 80075cc:	4b48      	ldr	r3, [pc, #288]	; (80076f0 <ai_platform_outputs_get+0x1c8>)
 80075ce:	6002      	str	r2, [r0, #0]
 80075d0:	6802      	ldr	r2, [r0, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d01c      	beq.n	8007610 <ai_platform_outputs_get+0xe8>
 80075d6:	e7fe      	b.n	80075d6 <ai_platform_outputs_get+0xae>
 80075d8:	2201      	movs	r2, #1
 80075da:	609a      	str	r2, [r3, #8]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	2a00      	cmp	r2, #0
 80075e0:	d1fc      	bne.n	80075dc <ai_platform_outputs_get+0xb4>
 80075e2:	4942      	ldr	r1, [pc, #264]	; (80076ec <ai_platform_outputs_get+0x1c4>)
 80075e4:	4a42      	ldr	r2, [pc, #264]	; (80076f0 <ai_platform_outputs_get+0x1c8>)
 80075e6:	6019      	str	r1, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d161      	bne.n	80076b2 <ai_platform_outputs_get+0x18a>
 80075ee:	f7ff fd59 	bl	80070a4 <_ai_platform_release_crc>
 80075f2:	2000      	movs	r0, #0
 80075f4:	b005      	add	sp, #20
 80075f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fa:	2201      	movs	r2, #1
 80075fc:	609a      	str	r2, [r3, #8]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	2a00      	cmp	r2, #0
 8007602:	d1fc      	bne.n	80075fe <ai_platform_outputs_get+0xd6>
 8007604:	4a39      	ldr	r2, [pc, #228]	; (80076ec <ai_platform_outputs_get+0x1c4>)
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4b39      	ldr	r3, [pc, #228]	; (80076f0 <ai_platform_outputs_get+0x1c8>)
 800760c:	429a      	cmp	r2, r3
 800760e:	d151      	bne.n	80076b4 <ai_platform_outputs_get+0x18c>
 8007610:	f7ff fd48 	bl	80070a4 <_ai_platform_release_crc>
 8007614:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007616:	2b01      	cmp	r3, #1
 8007618:	d959      	bls.n	80076ce <ai_platform_outputs_get+0x1a6>
 800761a:	f04f 0b00 	mov.w	fp, #0
 800761e:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8007622:	465d      	mov	r5, fp
 8007624:	9703      	str	r7, [sp, #12]
 8007626:	e016      	b.n	8007656 <ai_platform_outputs_get+0x12e>
 8007628:	2301      	movs	r3, #1
 800762a:	9901      	ldr	r1, [sp, #4]
 800762c:	507b      	str	r3, [r7, r1]
 800762e:	69b1      	ldr	r1, [r6, #24]
 8007630:	f04f 0301 	mov.w	r3, #1
 8007634:	6849      	ldr	r1, [r1, #4]
 8007636:	7523      	strb	r3, [r4, #20]
 8007638:	2300      	movs	r3, #0
 800763a:	60a2      	str	r2, [r4, #8]
 800763c:	6962      	ldr	r2, [r4, #20]
 800763e:	e9c4 0c00 	strd	r0, ip, [r4]
 8007642:	f369 221f 	bfi	r2, r9, #8, #24
 8007646:	6121      	str	r1, [r4, #16]
 8007648:	f8c4 8018 	str.w	r8, [r4, #24]
 800764c:	60e3      	str	r3, [r4, #12]
 800764e:	3501      	adds	r5, #1
 8007650:	f10b 0b1c 	add.w	fp, fp, #28
 8007654:	6162      	str	r2, [r4, #20]
 8007656:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800765a:	b2aa      	uxth	r2, r5
 800765c:	42ab      	cmp	r3, r5
 800765e:	d92a      	bls.n	80076b6 <ai_platform_outputs_get+0x18e>
 8007660:	f8da 3010 	ldr.w	r3, [sl, #16]
 8007664:	00e9      	lsls	r1, r5, #3
 8007666:	9101      	str	r1, [sp, #4]
 8007668:	b32b      	cbz	r3, 80076b6 <ai_platform_outputs_get+0x18e>
 800766a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800766e:	b316      	cbz	r6, 80076b6 <ai_platform_outputs_get+0x18e>
 8007670:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007674:	69b2      	ldr	r2, [r6, #24]
 8007676:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800767a:	68b3      	ldr	r3, [r6, #8]
 800767c:	6810      	ldr	r0, [r2, #0]
 800767e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8007682:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007686:	f002 f901 	bl	800988c <ai_array_to_buffer_fmt>
 800768a:	69b1      	ldr	r1, [r6, #24]
 800768c:	eb07 02c5 	add.w	r2, r7, r5, lsl #3
 8007690:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007694:	445c      	add	r4, fp
 8007696:	2a00      	cmp	r2, #0
 8007698:	d0ca      	beq.n	8007630 <ai_platform_outputs_get+0x108>
 800769a:	2100      	movs	r1, #0
 800769c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80076a0:	6831      	ldr	r1, [r6, #0]
 80076a2:	6051      	str	r1, [r2, #4]
 80076a4:	b111      	cbz	r1, 80076ac <ai_platform_outputs_get+0x184>
 80076a6:	8849      	ldrh	r1, [r1, #2]
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d1bd      	bne.n	8007628 <ai_platform_outputs_get+0x100>
 80076ac:	2200      	movs	r2, #0
 80076ae:	69b1      	ldr	r1, [r6, #24]
 80076b0:	e7be      	b.n	8007630 <ai_platform_outputs_get+0x108>
 80076b2:	e7fe      	b.n	80076b2 <ai_platform_outputs_get+0x18a>
 80076b4:	e7fe      	b.n	80076b4 <ai_platform_outputs_get+0x18c>
 80076b6:	9f03      	ldr	r7, [sp, #12]
 80076b8:	b14a      	cbz	r2, 80076ce <ai_platform_outputs_get+0x1a6>
 80076ba:	f8da 3014 	ldr.w	r3, [sl, #20]
 80076be:	6858      	ldr	r0, [r3, #4]
 80076c0:	9b02      	ldr	r3, [sp, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d096      	beq.n	80075f4 <ai_platform_outputs_get+0xcc>
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	b005      	add	sp, #20
 80076ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ce:	2218      	movs	r2, #24
 80076d0:	2111      	movs	r1, #17
 80076d2:	f107 0010 	add.w	r0, r7, #16
 80076d6:	f000 fd27 	bl	8008128 <core_set_error>
 80076da:	2200      	movs	r2, #0
 80076dc:	4610      	mov	r0, r2
 80076de:	e7ef      	b.n	80076c0 <ai_platform_outputs_get+0x198>
 80076e0:	a1c00100 	.word	0xa1c00100
 80076e4:	40023000 	.word	0x40023000
 80076e8:	50023000 	.word	0x50023000
 80076ec:	f407a5c2 	.word	0xf407a5c2
 80076f0:	b5e8b5cd 	.word	0xb5e8b5cd

080076f4 <ai_platform_network_create>:
 80076f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076f8:	b083      	sub	sp, #12
 80076fa:	4604      	mov	r4, r0
 80076fc:	4615      	mov	r5, r2
 80076fe:	461e      	mov	r6, r3
 8007700:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8007704:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8007708:	f7ff fcca 	bl	80070a0 <_ai_platform_acquire_crc>
 800770c:	2800      	cmp	r0, #0
 800770e:	d038      	beq.n	8007782 <ai_platform_network_create+0x8e>
 8007710:	4b63      	ldr	r3, [pc, #396]	; (80078a0 <ai_platform_network_create+0x1ac>)
 8007712:	4298      	cmp	r0, r3
 8007714:	d02d      	beq.n	8007772 <ai_platform_network_create+0x7e>
 8007716:	4a63      	ldr	r2, [pc, #396]	; (80078a4 <ai_platform_network_create+0x1b0>)
 8007718:	4290      	cmp	r0, r2
 800771a:	d004      	beq.n	8007726 <ai_platform_network_create+0x32>
 800771c:	2218      	movs	r2, #24
 800771e:	609a      	str	r2, [r3, #8]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	4293      	cmp	r3, r2
 8007724:	d025      	beq.n	8007772 <ai_platform_network_create+0x7e>
 8007726:	2318      	movs	r3, #24
 8007728:	495f      	ldr	r1, [pc, #380]	; (80078a8 <ai_platform_network_create+0x1b4>)
 800772a:	600b      	str	r3, [r1, #0]
 800772c:	680b      	ldr	r3, [r1, #0]
 800772e:	2b18      	cmp	r3, #24
 8007730:	d125      	bne.n	800777e <ai_platform_network_create+0x8a>
 8007732:	2301      	movs	r3, #1
 8007734:	600b      	str	r3, [r1, #0]
 8007736:	680b      	ldr	r3, [r1, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1fc      	bne.n	8007736 <ai_platform_network_create+0x42>
 800773c:	f7ff fcb2 	bl	80070a4 <_ai_platform_release_crc>
 8007740:	f7ff fcae 	bl	80070a0 <_ai_platform_acquire_crc>
 8007744:	4b56      	ldr	r3, [pc, #344]	; (80078a0 <ai_platform_network_create+0x1ac>)
 8007746:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800774a:	429a      	cmp	r2, r3
 800774c:	d01e      	beq.n	800778c <ai_platform_network_create+0x98>
 800774e:	2218      	movs	r2, #24
 8007750:	609a      	str	r2, [r3, #8]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	2a18      	cmp	r2, #24
 8007756:	d027      	beq.n	80077a8 <ai_platform_network_create+0xb4>
 8007758:	2301      	movs	r3, #1
 800775a:	4a52      	ldr	r2, [pc, #328]	; (80078a4 <ai_platform_network_create+0x1b0>)
 800775c:	6093      	str	r3, [r2, #8]
 800775e:	6893      	ldr	r3, [r2, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1fc      	bne.n	800775e <ai_platform_network_create+0x6a>
 8007764:	4b51      	ldr	r3, [pc, #324]	; (80078ac <ai_platform_network_create+0x1b8>)
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	4b51      	ldr	r3, [pc, #324]	; (80078b0 <ai_platform_network_create+0x1bc>)
 800776c:	429a      	cmp	r2, r3
 800776e:	d026      	beq.n	80077be <ai_platform_network_create+0xca>
 8007770:	e7fe      	b.n	8007770 <ai_platform_network_create+0x7c>
 8007772:	2318      	movs	r3, #24
 8007774:	494f      	ldr	r1, [pc, #316]	; (80078b4 <ai_platform_network_create+0x1c0>)
 8007776:	600b      	str	r3, [r1, #0]
 8007778:	680b      	ldr	r3, [r1, #0]
 800777a:	2b18      	cmp	r3, #24
 800777c:	d0d9      	beq.n	8007732 <ai_platform_network_create+0x3e>
 800777e:	f7ff fc91 	bl	80070a4 <_ai_platform_release_crc>
 8007782:	f244 1033 	movw	r0, #16691	; 0x4133
 8007786:	b003      	add	sp, #12
 8007788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800778c:	2301      	movs	r3, #1
 800778e:	6083      	str	r3, [r0, #8]
 8007790:	f100 0308 	add.w	r3, r0, #8
 8007794:	6819      	ldr	r1, [r3, #0]
 8007796:	2900      	cmp	r1, #0
 8007798:	d1fc      	bne.n	8007794 <ai_platform_network_create+0xa0>
 800779a:	4b44      	ldr	r3, [pc, #272]	; (80078ac <ai_platform_network_create+0x1b8>)
 800779c:	6003      	str	r3, [r0, #0]
 800779e:	6802      	ldr	r2, [r0, #0]
 80077a0:	4b43      	ldr	r3, [pc, #268]	; (80078b0 <ai_platform_network_create+0x1bc>)
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d00b      	beq.n	80077be <ai_platform_network_create+0xca>
 80077a6:	e7fe      	b.n	80077a6 <ai_platform_network_create+0xb2>
 80077a8:	2201      	movs	r2, #1
 80077aa:	609a      	str	r2, [r3, #8]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	d1fc      	bne.n	80077ac <ai_platform_network_create+0xb8>
 80077b2:	4a3e      	ldr	r2, [pc, #248]	; (80078ac <ai_platform_network_create+0x1b8>)
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	4b3d      	ldr	r3, [pc, #244]	; (80078b0 <ai_platform_network_create+0x1bc>)
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d122      	bne.n	8007804 <ai_platform_network_create+0x110>
 80077be:	f7ff fc71 	bl	80070a4 <_ai_platform_release_crc>
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	d031      	beq.n	800782a <ai_platform_network_create+0x136>
 80077c6:	4b3c      	ldr	r3, [pc, #240]	; (80078b8 <ai_platform_network_create+0x1c4>)
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	6025      	str	r5, [r4, #0]
 80077cc:	f000 fca4 	bl	8008118 <core_init>
 80077d0:	b1c8      	cbz	r0, 8007806 <ai_platform_network_create+0x112>
 80077d2:	f7ff fc65 	bl	80070a0 <_ai_platform_acquire_crc>
 80077d6:	4b32      	ldr	r3, [pc, #200]	; (80078a0 <ai_platform_network_create+0x1ac>)
 80077d8:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80077dc:	429a      	cmp	r2, r3
 80077de:	d027      	beq.n	8007830 <ai_platform_network_create+0x13c>
 80077e0:	2218      	movs	r2, #24
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	2a18      	cmp	r2, #24
 80077e8:	d030      	beq.n	800784c <ai_platform_network_create+0x158>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4a2d      	ldr	r2, [pc, #180]	; (80078a4 <ai_platform_network_create+0x1b0>)
 80077ee:	6093      	str	r3, [r2, #8]
 80077f0:	6893      	ldr	r3, [r2, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1fc      	bne.n	80077f0 <ai_platform_network_create+0xfc>
 80077f6:	4b2d      	ldr	r3, [pc, #180]	; (80078ac <ai_platform_network_create+0x1b8>)
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	4b2c      	ldr	r3, [pc, #176]	; (80078b0 <ai_platform_network_create+0x1bc>)
 80077fe:	429a      	cmp	r2, r3
 8007800:	d02f      	beq.n	8007862 <ai_platform_network_create+0x16e>
 8007802:	e7fe      	b.n	8007802 <ai_platform_network_create+0x10e>
 8007804:	e7fe      	b.n	8007804 <ai_platform_network_create+0x110>
 8007806:	f04f 0930 	mov.w	r9, #48	; 0x30
 800780a:	2300      	movs	r3, #0
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	2410      	movs	r4, #16
 8007810:	4642      	mov	r2, r8
 8007812:	4639      	mov	r1, r7
 8007814:	4630      	mov	r0, r6
 8007816:	f002 f8dd 	bl	80099d4 <ai_version_get>
 800781a:	4603      	mov	r3, r0
 800781c:	2000      	movs	r0, #0
 800781e:	f369 0007 	bfi	r0, r9, #0, #8
 8007822:	64ab      	str	r3, [r5, #72]	; 0x48
 8007824:	f364 201f 	bfi	r0, r4, #8, #24
 8007828:	e7ad      	b.n	8007786 <ai_platform_network_create+0x92>
 800782a:	f241 0010 	movw	r0, #4112	; 0x1010
 800782e:	e7aa      	b.n	8007786 <ai_platform_network_create+0x92>
 8007830:	2301      	movs	r3, #1
 8007832:	f100 0208 	add.w	r2, r0, #8
 8007836:	6083      	str	r3, [r0, #8]
 8007838:	6813      	ldr	r3, [r2, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1fc      	bne.n	8007838 <ai_platform_network_create+0x144>
 800783e:	4b1b      	ldr	r3, [pc, #108]	; (80078ac <ai_platform_network_create+0x1b8>)
 8007840:	6003      	str	r3, [r0, #0]
 8007842:	6802      	ldr	r2, [r0, #0]
 8007844:	4b1a      	ldr	r3, [pc, #104]	; (80078b0 <ai_platform_network_create+0x1bc>)
 8007846:	429a      	cmp	r2, r3
 8007848:	d00b      	beq.n	8007862 <ai_platform_network_create+0x16e>
 800784a:	e7fe      	b.n	800784a <ai_platform_network_create+0x156>
 800784c:	2201      	movs	r2, #1
 800784e:	609a      	str	r2, [r3, #8]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	2a00      	cmp	r2, #0
 8007854:	d1fc      	bne.n	8007850 <ai_platform_network_create+0x15c>
 8007856:	4a15      	ldr	r2, [pc, #84]	; (80078ac <ai_platform_network_create+0x1b8>)
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <ai_platform_network_create+0x1bc>)
 800785e:	429a      	cmp	r2, r3
 8007860:	d111      	bne.n	8007886 <ai_platform_network_create+0x192>
 8007862:	f7ff fc1f 	bl	80070a4 <_ai_platform_release_crc>
 8007866:	2200      	movs	r2, #0
 8007868:	4639      	mov	r1, r7
 800786a:	4630      	mov	r0, r6
 800786c:	f002 f8b2 	bl	80099d4 <ai_version_get>
 8007870:	2200      	movs	r2, #0
 8007872:	4681      	mov	r9, r0
 8007874:	2105      	movs	r1, #5
 8007876:	2001      	movs	r0, #1
 8007878:	f002 f8ac 	bl	80099d4 <ai_version_get>
 800787c:	4581      	cmp	r9, r0
 800787e:	d003      	beq.n	8007888 <ai_platform_network_create+0x194>
 8007880:	f04f 0901 	mov.w	r9, #1
 8007884:	e7c1      	b.n	800780a <ai_platform_network_create+0x116>
 8007886:	e7fe      	b.n	8007886 <ai_platform_network_create+0x192>
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <ai_platform_network_create+0x1c8>)
 800788a:	a801      	add	r0, sp, #4
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	f000 fc57 	bl	8008140 <ai_check_custom_types>
 8007892:	b110      	cbz	r0, 800789a <ai_platform_network_create+0x1a6>
 8007894:	2400      	movs	r4, #0
 8007896:	46a1      	mov	r9, r4
 8007898:	e7ba      	b.n	8007810 <ai_platform_network_create+0x11c>
 800789a:	f04f 0902 	mov.w	r9, #2
 800789e:	e7b4      	b.n	800780a <ai_platform_network_create+0x116>
 80078a0:	40023000 	.word	0x40023000
 80078a4:	50023000 	.word	0x50023000
 80078a8:	50023008 	.word	0x50023008
 80078ac:	f407a5c2 	.word	0xf407a5c2
 80078b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80078b4:	40023008 	.word	0x40023008
 80078b8:	a1c00100 	.word	0xa1c00100
 80078bc:	84048403 	.word	0x84048403

080078c0 <ai_platform_network_init>:
 80078c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c4:	b1f0      	cbz	r0, 8007904 <ai_platform_network_init+0x44>
 80078c6:	4b79      	ldr	r3, [pc, #484]	; (8007aac <ai_platform_network_init+0x1ec>)
 80078c8:	6802      	ldr	r2, [r0, #0]
 80078ca:	4604      	mov	r4, r0
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d119      	bne.n	8007904 <ai_platform_network_init+0x44>
 80078d0:	460e      	mov	r6, r1
 80078d2:	f7ff fbe5 	bl	80070a0 <_ai_platform_acquire_crc>
 80078d6:	4b76      	ldr	r3, [pc, #472]	; (8007ab0 <ai_platform_network_init+0x1f0>)
 80078d8:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80078dc:	429a      	cmp	r2, r3
 80078de:	d038      	beq.n	8007952 <ai_platform_network_init+0x92>
 80078e0:	2218      	movs	r2, #24
 80078e2:	609a      	str	r2, [r3, #8]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	2a18      	cmp	r2, #24
 80078e8:	d052      	beq.n	8007990 <ai_platform_network_init+0xd0>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4a71      	ldr	r2, [pc, #452]	; (8007ab4 <ai_platform_network_init+0x1f4>)
 80078ee:	6093      	str	r3, [r2, #8]
 80078f0:	6893      	ldr	r3, [r2, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1fc      	bne.n	80078f0 <ai_platform_network_init+0x30>
 80078f6:	4b70      	ldr	r3, [pc, #448]	; (8007ab8 <ai_platform_network_init+0x1f8>)
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	4b6f      	ldr	r3, [pc, #444]	; (8007abc <ai_platform_network_init+0x1fc>)
 80078fe:	429a      	cmp	r2, r3
 8007900:	d051      	beq.n	80079a6 <ai_platform_network_init+0xe6>
 8007902:	e7fe      	b.n	8007902 <ai_platform_network_init+0x42>
 8007904:	f7ff fbcc 	bl	80070a0 <_ai_platform_acquire_crc>
 8007908:	4b69      	ldr	r3, [pc, #420]	; (8007ab0 <ai_platform_network_init+0x1f0>)
 800790a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 800790e:	429a      	cmp	r2, r3
 8007910:	d011      	beq.n	8007936 <ai_platform_network_init+0x76>
 8007912:	2218      	movs	r2, #24
 8007914:	609a      	str	r2, [r3, #8]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	2a18      	cmp	r2, #24
 800791a:	d028      	beq.n	800796e <ai_platform_network_init+0xae>
 800791c:	2301      	movs	r3, #1
 800791e:	4a65      	ldr	r2, [pc, #404]	; (8007ab4 <ai_platform_network_init+0x1f4>)
 8007920:	6093      	str	r3, [r2, #8]
 8007922:	6893      	ldr	r3, [r2, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1fc      	bne.n	8007922 <ai_platform_network_init+0x62>
 8007928:	4963      	ldr	r1, [pc, #396]	; (8007ab8 <ai_platform_network_init+0x1f8>)
 800792a:	4b64      	ldr	r3, [pc, #400]	; (8007abc <ai_platform_network_init+0x1fc>)
 800792c:	6011      	str	r1, [r2, #0]
 800792e:	6812      	ldr	r2, [r2, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d027      	beq.n	8007984 <ai_platform_network_init+0xc4>
 8007934:	e7fe      	b.n	8007934 <ai_platform_network_init+0x74>
 8007936:	2301      	movs	r3, #1
 8007938:	f100 0208 	add.w	r2, r0, #8
 800793c:	6083      	str	r3, [r0, #8]
 800793e:	6813      	ldr	r3, [r2, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1fc      	bne.n	800793e <ai_platform_network_init+0x7e>
 8007944:	4a5c      	ldr	r2, [pc, #368]	; (8007ab8 <ai_platform_network_init+0x1f8>)
 8007946:	4b5d      	ldr	r3, [pc, #372]	; (8007abc <ai_platform_network_init+0x1fc>)
 8007948:	6002      	str	r2, [r0, #0]
 800794a:	6802      	ldr	r2, [r0, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d019      	beq.n	8007984 <ai_platform_network_init+0xc4>
 8007950:	e7fe      	b.n	8007950 <ai_platform_network_init+0x90>
 8007952:	2301      	movs	r3, #1
 8007954:	f100 0208 	add.w	r2, r0, #8
 8007958:	6083      	str	r3, [r0, #8]
 800795a:	6813      	ldr	r3, [r2, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1fc      	bne.n	800795a <ai_platform_network_init+0x9a>
 8007960:	4a55      	ldr	r2, [pc, #340]	; (8007ab8 <ai_platform_network_init+0x1f8>)
 8007962:	4b56      	ldr	r3, [pc, #344]	; (8007abc <ai_platform_network_init+0x1fc>)
 8007964:	6002      	str	r2, [r0, #0]
 8007966:	6802      	ldr	r2, [r0, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d01c      	beq.n	80079a6 <ai_platform_network_init+0xe6>
 800796c:	e7fe      	b.n	800796c <ai_platform_network_init+0xac>
 800796e:	2201      	movs	r2, #1
 8007970:	609a      	str	r2, [r3, #8]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	2a00      	cmp	r2, #0
 8007976:	d1fc      	bne.n	8007972 <ai_platform_network_init+0xb2>
 8007978:	494f      	ldr	r1, [pc, #316]	; (8007ab8 <ai_platform_network_init+0x1f8>)
 800797a:	4a50      	ldr	r2, [pc, #320]	; (8007abc <ai_platform_network_init+0x1fc>)
 800797c:	6019      	str	r1, [r3, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4293      	cmp	r3, r2
 8007982:	d12b      	bne.n	80079dc <ai_platform_network_init+0x11c>
 8007984:	f7ff fb8e 	bl	80070a4 <_ai_platform_release_crc>
 8007988:	2600      	movs	r6, #0
 800798a:	4630      	mov	r0, r6
 800798c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007990:	2201      	movs	r2, #1
 8007992:	609a      	str	r2, [r3, #8]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	2a00      	cmp	r2, #0
 8007998:	d1fc      	bne.n	8007994 <ai_platform_network_init+0xd4>
 800799a:	4a47      	ldr	r2, [pc, #284]	; (8007ab8 <ai_platform_network_init+0x1f8>)
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b46      	ldr	r3, [pc, #280]	; (8007abc <ai_platform_network_init+0x1fc>)
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d11b      	bne.n	80079de <ai_platform_network_init+0x11e>
 80079a6:	f7ff fb7d 	bl	80070a4 <_ai_platform_release_crc>
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	d070      	beq.n	8007a90 <ai_platform_network_init+0x1d0>
 80079ae:	4b44      	ldr	r3, [pc, #272]	; (8007ac0 <ai_platform_network_init+0x200>)
 80079b0:	6832      	ldr	r2, [r6, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d114      	bne.n	80079e0 <ai_platform_network_init+0x120>
 80079b6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80079ba:	6933      	ldr	r3, [r6, #16]
 80079bc:	89b5      	ldrh	r5, [r6, #12]
 80079be:	89f7      	ldrh	r7, [r6, #14]
 80079c0:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80079c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80079c6:	2303      	movs	r3, #3
 80079c8:	4626      	mov	r6, r4
 80079ca:	4620      	mov	r0, r4
 80079cc:	84e7      	strh	r7, [r4, #38]	; 0x26
 80079ce:	84a5      	strh	r5, [r4, #36]	; 0x24
 80079d0:	60e3      	str	r3, [r4, #12]
 80079d2:	f000 fbdd 	bl	8008190 <ai_layers_init_all>
 80079d6:	4630      	mov	r0, r6
 80079d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079dc:	e7fe      	b.n	80079dc <ai_platform_network_init+0x11c>
 80079de:	e7fe      	b.n	80079de <ai_platform_network_init+0x11e>
 80079e0:	4635      	mov	r5, r6
 80079e2:	2101      	movs	r1, #1
 80079e4:	4628      	mov	r0, r5
 80079e6:	6876      	ldr	r6, [r6, #4]
 80079e8:	f7ff fb0c 	bl	8007004 <ai_buffer_get_size>
 80079ec:	4681      	mov	r9, r0
 80079ee:	f105 081c 	add.w	r8, r5, #28
 80079f2:	2101      	movs	r1, #1
 80079f4:	4640      	mov	r0, r8
 80079f6:	6a2f      	ldr	r7, [r5, #32]
 80079f8:	f7ff fb04 	bl	8007004 <ai_buffer_get_size>
 80079fc:	f1b9 0f00 	cmp.w	r9, #0
 8007a00:	d024      	beq.n	8007a4c <ai_platform_network_init+0x18c>
 8007a02:	2301      	movs	r3, #1
 8007a04:	469e      	mov	lr, r3
 8007a06:	bb28      	cbnz	r0, 8007a54 <ai_platform_network_init+0x194>
 8007a08:	4680      	mov	r8, r0
 8007a0a:	4607      	mov	r7, r0
 8007a0c:	b36e      	cbz	r6, 8007a6a <ai_platform_network_init+0x1aa>
 8007a0e:	8be2      	ldrh	r2, [r4, #30]
 8007a10:	4572      	cmp	r2, lr
 8007a12:	d322      	bcc.n	8007a5a <ai_platform_network_init+0x19a>
 8007a14:	b143      	cbz	r3, 8007a28 <ai_platform_network_init+0x168>
 8007a16:	46ac      	mov	ip, r5
 8007a18:	6a25      	ldr	r5, [r4, #32]
 8007a1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a20:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007a24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007a28:	2500      	movs	r5, #0
 8007a2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007a2c:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8007a30:	42bb      	cmp	r3, r7
 8007a32:	83a5      	strh	r5, [r4, #28]
 8007a34:	d322      	bcc.n	8007a7c <ai_platform_network_init+0x1bc>
 8007a36:	b34f      	cbz	r7, 8007a8c <ai_platform_network_init+0x1cc>
 8007a38:	46c6      	mov	lr, r8
 8007a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007a40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a42:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8007a46:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8007a4a:	e7bc      	b.n	80079c6 <ai_platform_network_init+0x106>
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	46ce      	mov	lr, r9
 8007a50:	464d      	mov	r5, r9
 8007a52:	e7d8      	b.n	8007a06 <ai_platform_network_init+0x146>
 8007a54:	b317      	cbz	r7, 8007a9c <ai_platform_network_init+0x1dc>
 8007a56:	2701      	movs	r7, #1
 8007a58:	e7d8      	b.n	8007a0c <ai_platform_network_init+0x14c>
 8007a5a:	2212      	movs	r2, #18
 8007a5c:	2116      	movs	r1, #22
 8007a5e:	f104 0010 	add.w	r0, r4, #16
 8007a62:	f000 fb61 	bl	8008128 <core_set_error>
 8007a66:	2600      	movs	r6, #0
 8007a68:	e78f      	b.n	800798a <ai_platform_network_init+0xca>
 8007a6a:	f1b9 0f00 	cmp.w	r9, #0
 8007a6e:	d0ce      	beq.n	8007a0e <ai_platform_network_init+0x14e>
 8007a70:	2110      	movs	r1, #16
 8007a72:	2212      	movs	r2, #18
 8007a74:	1860      	adds	r0, r4, r1
 8007a76:	f000 fb57 	bl	8008128 <core_set_error>
 8007a7a:	e786      	b.n	800798a <ai_platform_network_init+0xca>
 8007a7c:	2213      	movs	r2, #19
 8007a7e:	2116      	movs	r1, #22
 8007a80:	f104 0010 	add.w	r0, r4, #16
 8007a84:	f000 fb50 	bl	8008128 <core_set_error>
 8007a88:	462e      	mov	r6, r5
 8007a8a:	e77e      	b.n	800798a <ai_platform_network_init+0xca>
 8007a8c:	463d      	mov	r5, r7
 8007a8e:	e79a      	b.n	80079c6 <ai_platform_network_init+0x106>
 8007a90:	2110      	movs	r1, #16
 8007a92:	2211      	movs	r2, #17
 8007a94:	1860      	adds	r0, r4, r1
 8007a96:	f000 fb47 	bl	8008128 <core_set_error>
 8007a9a:	e776      	b.n	800798a <ai_platform_network_init+0xca>
 8007a9c:	2110      	movs	r1, #16
 8007a9e:	2213      	movs	r2, #19
 8007aa0:	1860      	adds	r0, r4, r1
 8007aa2:	f000 fb41 	bl	8008128 <core_set_error>
 8007aa6:	463e      	mov	r6, r7
 8007aa8:	e76f      	b.n	800798a <ai_platform_network_init+0xca>
 8007aaa:	bf00      	nop
 8007aac:	a1c00100 	.word	0xa1c00100
 8007ab0:	40023000 	.word	0x40023000
 8007ab4:	50023000 	.word	0x50023000
 8007ab8:	f407a5c2 	.word	0xf407a5c2
 8007abc:	b5e8b5cd 	.word	0xb5e8b5cd
 8007ac0:	a1facade 	.word	0xa1facade

08007ac4 <ai_platform_network_post_init>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	b1e8      	cbz	r0, 8007b04 <ai_platform_network_post_init+0x40>
 8007ac8:	4b47      	ldr	r3, [pc, #284]	; (8007be8 <ai_platform_network_post_init+0x124>)
 8007aca:	6802      	ldr	r2, [r0, #0]
 8007acc:	4604      	mov	r4, r0
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d118      	bne.n	8007b04 <ai_platform_network_post_init+0x40>
 8007ad2:	f7ff fae5 	bl	80070a0 <_ai_platform_acquire_crc>
 8007ad6:	4b45      	ldr	r3, [pc, #276]	; (8007bec <ai_platform_network_post_init+0x128>)
 8007ad8:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d038      	beq.n	8007b52 <ai_platform_network_post_init+0x8e>
 8007ae0:	2218      	movs	r2, #24
 8007ae2:	609a      	str	r2, [r3, #8]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	2a18      	cmp	r2, #24
 8007ae8:	d050      	beq.n	8007b8c <ai_platform_network_post_init+0xc8>
 8007aea:	2301      	movs	r3, #1
 8007aec:	4a40      	ldr	r2, [pc, #256]	; (8007bf0 <ai_platform_network_post_init+0x12c>)
 8007aee:	6093      	str	r3, [r2, #8]
 8007af0:	6893      	ldr	r3, [r2, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1fc      	bne.n	8007af0 <ai_platform_network_post_init+0x2c>
 8007af6:	493f      	ldr	r1, [pc, #252]	; (8007bf4 <ai_platform_network_post_init+0x130>)
 8007af8:	4b3f      	ldr	r3, [pc, #252]	; (8007bf8 <ai_platform_network_post_init+0x134>)
 8007afa:	6011      	str	r1, [r2, #0]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d04f      	beq.n	8007ba2 <ai_platform_network_post_init+0xde>
 8007b02:	e7fe      	b.n	8007b02 <ai_platform_network_post_init+0x3e>
 8007b04:	f7ff facc 	bl	80070a0 <_ai_platform_acquire_crc>
 8007b08:	4b38      	ldr	r3, [pc, #224]	; (8007bec <ai_platform_network_post_init+0x128>)
 8007b0a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d011      	beq.n	8007b36 <ai_platform_network_post_init+0x72>
 8007b12:	2218      	movs	r2, #24
 8007b14:	609a      	str	r2, [r3, #8]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	2a18      	cmp	r2, #24
 8007b1a:	d028      	beq.n	8007b6e <ai_platform_network_post_init+0xaa>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4a34      	ldr	r2, [pc, #208]	; (8007bf0 <ai_platform_network_post_init+0x12c>)
 8007b20:	6093      	str	r3, [r2, #8]
 8007b22:	6893      	ldr	r3, [r2, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1fc      	bne.n	8007b22 <ai_platform_network_post_init+0x5e>
 8007b28:	4932      	ldr	r1, [pc, #200]	; (8007bf4 <ai_platform_network_post_init+0x130>)
 8007b2a:	4b33      	ldr	r3, [pc, #204]	; (8007bf8 <ai_platform_network_post_init+0x134>)
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	6812      	ldr	r2, [r2, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d027      	beq.n	8007b84 <ai_platform_network_post_init+0xc0>
 8007b34:	e7fe      	b.n	8007b34 <ai_platform_network_post_init+0x70>
 8007b36:	2301      	movs	r3, #1
 8007b38:	f100 0208 	add.w	r2, r0, #8
 8007b3c:	6083      	str	r3, [r0, #8]
 8007b3e:	6813      	ldr	r3, [r2, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1fc      	bne.n	8007b3e <ai_platform_network_post_init+0x7a>
 8007b44:	4a2b      	ldr	r2, [pc, #172]	; (8007bf4 <ai_platform_network_post_init+0x130>)
 8007b46:	4b2c      	ldr	r3, [pc, #176]	; (8007bf8 <ai_platform_network_post_init+0x134>)
 8007b48:	6002      	str	r2, [r0, #0]
 8007b4a:	6802      	ldr	r2, [r0, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d019      	beq.n	8007b84 <ai_platform_network_post_init+0xc0>
 8007b50:	e7fe      	b.n	8007b50 <ai_platform_network_post_init+0x8c>
 8007b52:	2301      	movs	r3, #1
 8007b54:	f100 0208 	add.w	r2, r0, #8
 8007b58:	6083      	str	r3, [r0, #8]
 8007b5a:	6813      	ldr	r3, [r2, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1fc      	bne.n	8007b5a <ai_platform_network_post_init+0x96>
 8007b60:	4a24      	ldr	r2, [pc, #144]	; (8007bf4 <ai_platform_network_post_init+0x130>)
 8007b62:	4b25      	ldr	r3, [pc, #148]	; (8007bf8 <ai_platform_network_post_init+0x134>)
 8007b64:	6002      	str	r2, [r0, #0]
 8007b66:	6802      	ldr	r2, [r0, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d01a      	beq.n	8007ba2 <ai_platform_network_post_init+0xde>
 8007b6c:	e7fe      	b.n	8007b6c <ai_platform_network_post_init+0xa8>
 8007b6e:	2201      	movs	r2, #1
 8007b70:	609a      	str	r2, [r3, #8]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	d1fc      	bne.n	8007b72 <ai_platform_network_post_init+0xae>
 8007b78:	491e      	ldr	r1, [pc, #120]	; (8007bf4 <ai_platform_network_post_init+0x130>)
 8007b7a:	4a1f      	ldr	r2, [pc, #124]	; (8007bf8 <ai_platform_network_post_init+0x134>)
 8007b7c:	6019      	str	r1, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d126      	bne.n	8007bd2 <ai_platform_network_post_init+0x10e>
 8007b84:	f7ff fa8e 	bl	80070a4 <_ai_platform_release_crc>
 8007b88:	2000      	movs	r0, #0
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	609a      	str	r2, [r3, #8]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	d1fc      	bne.n	8007b90 <ai_platform_network_post_init+0xcc>
 8007b96:	4917      	ldr	r1, [pc, #92]	; (8007bf4 <ai_platform_network_post_init+0x130>)
 8007b98:	4a17      	ldr	r2, [pc, #92]	; (8007bf8 <ai_platform_network_post_init+0x134>)
 8007b9a:	6019      	str	r1, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d118      	bne.n	8007bd4 <ai_platform_network_post_init+0x110>
 8007ba2:	f7ff fa7f 	bl	80070a4 <_ai_platform_release_crc>
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	f013 0502 	ands.w	r5, r3, #2
 8007bac:	d015      	beq.n	8007bda <ai_platform_network_post_init+0x116>
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f000 fafc 	bl	80081ac <ai_layers_post_init_all>
 8007bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bb6:	b173      	cbz	r3, 8007bd6 <ai_platform_network_post_init+0x112>
 8007bb8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007bba:	b165      	cbz	r5, 8007bd6 <ai_platform_network_post_init+0x112>
 8007bbc:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	4798      	blx	r3
 8007bc6:	692b      	ldr	r3, [r5, #16]
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	d004      	beq.n	8007bd6 <ai_platform_network_post_init+0x112>
 8007bcc:	b11b      	cbz	r3, 8007bd6 <ai_platform_network_post_init+0x112>
 8007bce:	461d      	mov	r5, r3
 8007bd0:	e7f3      	b.n	8007bba <ai_platform_network_post_init+0xf6>
 8007bd2:	e7fe      	b.n	8007bd2 <ai_platform_network_post_init+0x10e>
 8007bd4:	e7fe      	b.n	8007bd4 <ai_platform_network_post_init+0x110>
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	bd38      	pop	{r3, r4, r5, pc}
 8007bda:	2210      	movs	r2, #16
 8007bdc:	2111      	movs	r1, #17
 8007bde:	18a0      	adds	r0, r4, r2
 8007be0:	f000 faa2 	bl	8008128 <core_set_error>
 8007be4:	4628      	mov	r0, r5
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	a1c00100 	.word	0xa1c00100
 8007bec:	40023000 	.word	0x40023000
 8007bf0:	50023000 	.word	0x50023000
 8007bf4:	f407a5c2 	.word	0xf407a5c2
 8007bf8:	b5e8b5cd 	.word	0xb5e8b5cd

08007bfc <ai_platform_network_process>:
 8007bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	4605      	mov	r5, r0
 8007c02:	460e      	mov	r6, r1
 8007c04:	4693      	mov	fp, r2
 8007c06:	b085      	sub	sp, #20
 8007c08:	b120      	cbz	r0, 8007c14 <ai_platform_network_process+0x18>
 8007c0a:	4bb2      	ldr	r3, [pc, #712]	; (8007ed4 <ai_platform_network_process+0x2d8>)
 8007c0c:	6802      	ldr	r2, [r0, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	bf18      	it	ne
 8007c12:	2500      	movne	r5, #0
 8007c14:	f7ff fa44 	bl	80070a0 <_ai_platform_acquire_crc>
 8007c18:	4baf      	ldr	r3, [pc, #700]	; (8007ed8 <ai_platform_network_process+0x2dc>)
 8007c1a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d011      	beq.n	8007c46 <ai_platform_network_process+0x4a>
 8007c22:	2218      	movs	r2, #24
 8007c24:	609a      	str	r2, [r3, #8]
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	2a18      	cmp	r2, #24
 8007c2a:	d01a      	beq.n	8007c62 <ai_platform_network_process+0x66>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	4aab      	ldr	r2, [pc, #684]	; (8007edc <ai_platform_network_process+0x2e0>)
 8007c30:	6093      	str	r3, [r2, #8]
 8007c32:	6893      	ldr	r3, [r2, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1fc      	bne.n	8007c32 <ai_platform_network_process+0x36>
 8007c38:	4ba9      	ldr	r3, [pc, #676]	; (8007ee0 <ai_platform_network_process+0x2e4>)
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	4ba9      	ldr	r3, [pc, #676]	; (8007ee4 <ai_platform_network_process+0x2e8>)
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d01a      	beq.n	8007c7a <ai_platform_network_process+0x7e>
 8007c44:	e7fe      	b.n	8007c44 <ai_platform_network_process+0x48>
 8007c46:	2301      	movs	r3, #1
 8007c48:	f100 0208 	add.w	r2, r0, #8
 8007c4c:	6083      	str	r3, [r0, #8]
 8007c4e:	6813      	ldr	r3, [r2, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1fc      	bne.n	8007c4e <ai_platform_network_process+0x52>
 8007c54:	4ba2      	ldr	r3, [pc, #648]	; (8007ee0 <ai_platform_network_process+0x2e4>)
 8007c56:	6003      	str	r3, [r0, #0]
 8007c58:	6802      	ldr	r2, [r0, #0]
 8007c5a:	4ba2      	ldr	r3, [pc, #648]	; (8007ee4 <ai_platform_network_process+0x2e8>)
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d00c      	beq.n	8007c7a <ai_platform_network_process+0x7e>
 8007c60:	e7fe      	b.n	8007c60 <ai_platform_network_process+0x64>
 8007c62:	2201      	movs	r2, #1
 8007c64:	609a      	str	r2, [r3, #8]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d1fc      	bne.n	8007c66 <ai_platform_network_process+0x6a>
 8007c6c:	4a9c      	ldr	r2, [pc, #624]	; (8007ee0 <ai_platform_network_process+0x2e4>)
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b9c      	ldr	r3, [pc, #624]	; (8007ee4 <ai_platform_network_process+0x2e8>)
 8007c74:	429a      	cmp	r2, r3
 8007c76:	f040 812b 	bne.w	8007ed0 <ai_platform_network_process+0x2d4>
 8007c7a:	f7ff fa13 	bl	80070a4 <_ai_platform_release_crc>
 8007c7e:	2d00      	cmp	r5, #0
 8007c80:	f000 8151 	beq.w	8007f26 <ai_platform_network_process+0x32a>
 8007c84:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 812e 	beq.w	8007ee8 <ai_platform_network_process+0x2ec>
 8007c8c:	2700      	movs	r7, #0
 8007c8e:	68eb      	ldr	r3, [r5, #12]
 8007c90:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	616f      	str	r7, [r5, #20]
 8007c9c:	f040 813b 	bne.w	8007f16 <ai_platform_network_process+0x31a>
 8007ca0:	2e00      	cmp	r6, #0
 8007ca2:	f000 8127 	beq.w	8007ef4 <ai_platform_network_process+0x2f8>
 8007ca6:	f1ba 0f00 	cmp.w	sl, #0
 8007caa:	f000 8123 	beq.w	8007ef4 <ai_platform_network_process+0x2f8>
 8007cae:	f8ba 3000 	ldrh.w	r3, [sl]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 811e 	beq.w	8007ef4 <ai_platform_network_process+0x2f8>
 8007cb8:	69b3      	ldr	r3, [r6, #24]
 8007cba:	f8cd b00c 	str.w	fp, [sp, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8007cc4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d071      	beq.n	8007db0 <ai_platform_network_process+0x1b4>
 8007ccc:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007cd0:	2c00      	cmp	r4, #0
 8007cd2:	d06d      	beq.n	8007db0 <ai_platform_network_process+0x1b4>
 8007cd4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007cd8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007cdc:	f8d3 9000 	ldr.w	r9, [r3]
 8007ce0:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007ce4:	f000 81dc 	beq.w	80080a0 <ai_platform_network_process+0x4a4>
 8007ce8:	69a3      	ldr	r3, [r4, #24]
 8007cea:	2101      	movs	r1, #1
 8007cec:	4630      	mov	r0, r6
 8007cee:	685d      	ldr	r5, [r3, #4]
 8007cf0:	f7ff f988 	bl	8007004 <ai_buffer_get_size>
 8007cf4:	4285      	cmp	r5, r0
 8007cf6:	f0c0 8118 	bcc.w	8007f2a <ai_platform_network_process+0x32e>
 8007cfa:	68e0      	ldr	r0, [r4, #12]
 8007cfc:	69b1      	ldr	r1, [r6, #24]
 8007cfe:	68c2      	ldr	r2, [r0, #12]
 8007d00:	68cb      	ldr	r3, [r1, #12]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	f040 8111 	bne.w	8007f2a <ai_platform_network_process+0x32e>
 8007d08:	6882      	ldr	r2, [r0, #8]
 8007d0a:	688b      	ldr	r3, [r1, #8]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	f040 810c 	bne.w	8007f2a <ai_platform_network_process+0x32e>
 8007d12:	6842      	ldr	r2, [r0, #4]
 8007d14:	684b      	ldr	r3, [r1, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	f040 8107 	bne.w	8007f2a <ai_platform_network_process+0x32e>
 8007d1c:	69a3      	ldr	r3, [r4, #24]
 8007d1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d22:	f001 fe47 	bl	80099b4 <ai_array_get_data_byte_size>
 8007d26:	4605      	mov	r5, r0
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f001 fe59 	bl	80099e0 <get_tensor_byte_size>
 8007d2e:	4285      	cmp	r5, r0
 8007d30:	f0c0 80fb 	bcc.w	8007f2a <ai_platform_network_process+0x32e>
 8007d34:	69a3      	ldr	r3, [r4, #24]
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	f001 fda8 	bl	800988c <ai_array_to_buffer_fmt>
 8007d3c:	6833      	ldr	r3, [r6, #0]
 8007d3e:	4058      	eors	r0, r3
 8007d40:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007d44:	f040 81b7 	bne.w	80080b6 <ai_platform_network_process+0x4ba>
 8007d48:	6873      	ldr	r3, [r6, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 81aa 	beq.w	80080a4 <ai_platform_network_process+0x4a8>
 8007d50:	69b3      	ldr	r3, [r6, #24]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 819a 	beq.w	800808e <ai_platform_network_process+0x492>
 8007d5a:	9a01      	ldr	r2, [sp, #4]
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	bf38      	it	cc
 8007d62:	461a      	movcc	r2, r3
 8007d64:	9201      	str	r2, [sp, #4]
 8007d66:	f001 fe3b 	bl	80099e0 <get_tensor_byte_size>
 8007d6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d6e:	69b3      	ldr	r3, [r6, #24]
 8007d70:	3701      	adds	r7, #1
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	361c      	adds	r6, #28
 8007d76:	fb00 f303 	mul.w	r3, r0, r3
 8007d7a:	f8c8 300c 	str.w	r3, [r8, #12]
 8007d7e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007d82:	440b      	add	r3, r1
 8007d84:	f8c8 1004 	str.w	r1, [r8, #4]
 8007d88:	f849 300b 	str.w	r3, [r9, fp]
 8007d8c:	69a0      	ldr	r0, [r4, #24]
 8007d8e:	6803      	ldr	r3, [r0, #0]
 8007d90:	009a      	lsls	r2, r3, #2
 8007d92:	f100 80ba 	bmi.w	8007f0a <ai_platform_network_process+0x30e>
 8007d96:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	4419      	add	r1, r3
 8007d9e:	6081      	str	r1, [r0, #8]
 8007da0:	69a3      	ldr	r3, [r4, #24]
 8007da2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007da6:	60da      	str	r2, [r3, #12]
 8007da8:	f8ba 3000 	ldrh.w	r3, [sl]
 8007dac:	42bb      	cmp	r3, r7
 8007dae:	d889      	bhi.n	8007cc4 <ai_platform_network_process+0xc8>
 8007db0:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8007db4:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007db6:	f1bb 0f00 	cmp.w	fp, #0
 8007dba:	f000 8185 	beq.w	80080c8 <ai_platform_network_process+0x4cc>
 8007dbe:	2a01      	cmp	r2, #1
 8007dc0:	f240 815d 	bls.w	800807e <ai_platform_network_process+0x482>
 8007dc4:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8007dc8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8156 	beq.w	800807e <ai_platform_network_process+0x482>
 8007dd2:	465e      	mov	r6, fp
 8007dd4:	2700      	movs	r7, #0
 8007dd6:	462c      	mov	r4, r5
 8007dd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80b2 	beq.w	8007f46 <ai_platform_network_process+0x34a>
 8007de2:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	f000 80ad 	beq.w	8007f46 <ai_platform_network_process+0x34a>
 8007dec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007df0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007df4:	f8d3 8000 	ldr.w	r8, [r3]
 8007df8:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007dfc:	f000 8170 	beq.w	80080e0 <ai_platform_network_process+0x4e4>
 8007e00:	69ab      	ldr	r3, [r5, #24]
 8007e02:	2101      	movs	r1, #1
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	4630      	mov	r0, r6
 8007e08:	9302      	str	r3, [sp, #8]
 8007e0a:	f7ff f8fb 	bl	8007004 <ai_buffer_get_size>
 8007e0e:	9b02      	ldr	r3, [sp, #8]
 8007e10:	4283      	cmp	r3, r0
 8007e12:	f0c0 8133 	bcc.w	800807c <ai_platform_network_process+0x480>
 8007e16:	68e8      	ldr	r0, [r5, #12]
 8007e18:	69b1      	ldr	r1, [r6, #24]
 8007e1a:	68c2      	ldr	r2, [r0, #12]
 8007e1c:	68cb      	ldr	r3, [r1, #12]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	f040 812c 	bne.w	800807c <ai_platform_network_process+0x480>
 8007e24:	6882      	ldr	r2, [r0, #8]
 8007e26:	688b      	ldr	r3, [r1, #8]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	f040 8127 	bne.w	800807c <ai_platform_network_process+0x480>
 8007e2e:	6842      	ldr	r2, [r0, #4]
 8007e30:	684b      	ldr	r3, [r1, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	f040 8122 	bne.w	800807c <ai_platform_network_process+0x480>
 8007e38:	69ab      	ldr	r3, [r5, #24]
 8007e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e3e:	f001 fdb9 	bl	80099b4 <ai_array_get_data_byte_size>
 8007e42:	4603      	mov	r3, r0
 8007e44:	4628      	mov	r0, r5
 8007e46:	9302      	str	r3, [sp, #8]
 8007e48:	f001 fdca 	bl	80099e0 <get_tensor_byte_size>
 8007e4c:	9b02      	ldr	r3, [sp, #8]
 8007e4e:	4283      	cmp	r3, r0
 8007e50:	f0c0 8114 	bcc.w	800807c <ai_platform_network_process+0x480>
 8007e54:	69ab      	ldr	r3, [r5, #24]
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	f001 fd18 	bl	800988c <ai_array_to_buffer_fmt>
 8007e5c:	6833      	ldr	r3, [r6, #0]
 8007e5e:	4058      	eors	r0, r3
 8007e60:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007e64:	f040 8134 	bne.w	80080d0 <ai_platform_network_process+0x4d4>
 8007e68:	6873      	ldr	r3, [r6, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 814b 	beq.w	8008106 <ai_platform_network_process+0x50a>
 8007e70:	69b3      	ldr	r3, [r6, #24]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 813d 	beq.w	80080f4 <ai_platform_network_process+0x4f8>
 8007e7a:	9a01      	ldr	r2, [sp, #4]
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	bf38      	it	cc
 8007e82:	461a      	movcc	r2, r3
 8007e84:	9201      	str	r2, [sp, #4]
 8007e86:	f001 fdab 	bl	80099e0 <get_tensor_byte_size>
 8007e8a:	f8ca 0008 	str.w	r0, [sl, #8]
 8007e8e:	69b3      	ldr	r3, [r6, #24]
 8007e90:	3701      	adds	r7, #1
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	361c      	adds	r6, #28
 8007e96:	fb00 f303 	mul.w	r3, r0, r3
 8007e9a:	f8ca 300c 	str.w	r3, [sl, #12]
 8007e9e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007ea2:	440b      	add	r3, r1
 8007ea4:	f8ca 1004 	str.w	r1, [sl, #4]
 8007ea8:	f848 300b 	str.w	r3, [r8, fp]
 8007eac:	69a8      	ldr	r0, [r5, #24]
 8007eae:	6803      	ldr	r3, [r0, #0]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	d443      	bmi.n	8007f3c <ai_platform_network_process+0x340>
 8007eb4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	4419      	add	r1, r3
 8007ebc:	6081      	str	r1, [r0, #8]
 8007ebe:	69ab      	ldr	r3, [r5, #24]
 8007ec0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007ec4:	60da      	str	r2, [r3, #12]
 8007ec6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007eca:	429f      	cmp	r7, r3
 8007ecc:	d384      	bcc.n	8007dd8 <ai_platform_network_process+0x1dc>
 8007ece:	e03a      	b.n	8007f46 <ai_platform_network_process+0x34a>
 8007ed0:	e7fe      	b.n	8007ed0 <ai_platform_network_process+0x2d4>
 8007ed2:	bf00      	nop
 8007ed4:	a1c00100 	.word	0xa1c00100
 8007ed8:	40023000 	.word	0x40023000
 8007edc:	50023000 	.word	0x50023000
 8007ee0:	f407a5c2 	.word	0xf407a5c2
 8007ee4:	b5e8b5cd 	.word	0xb5e8b5cd
 8007ee8:	68ea      	ldr	r2, [r5, #12]
 8007eea:	616b      	str	r3, [r5, #20]
 8007eec:	f002 0203 	and.w	r2, r2, #3
 8007ef0:	2a03      	cmp	r2, #3
 8007ef2:	d110      	bne.n	8007f16 <ai_platform_network_process+0x31a>
 8007ef4:	2217      	movs	r2, #23
 8007ef6:	2112      	movs	r1, #18
 8007ef8:	f105 0010 	add.w	r0, r5, #16
 8007efc:	f000 f914 	bl	8008128 <core_set_error>
 8007f00:	2400      	movs	r4, #0
 8007f02:	4620      	mov	r0, r4
 8007f04:	b005      	add	sp, #20
 8007f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0a:	f8ba 3000 	ldrh.w	r3, [sl]
 8007f0e:	429f      	cmp	r7, r3
 8007f10:	f4ff aed8 	bcc.w	8007cc4 <ai_platform_network_process+0xc8>
 8007f14:	e74c      	b.n	8007db0 <ai_platform_network_process+0x1b4>
 8007f16:	2230      	movs	r2, #48	; 0x30
 8007f18:	2111      	movs	r1, #17
 8007f1a:	f105 0010 	add.w	r0, r5, #16
 8007f1e:	f000 f903 	bl	8008128 <core_set_error>
 8007f22:	2400      	movs	r4, #0
 8007f24:	e7ed      	b.n	8007f02 <ai_platform_network_process+0x306>
 8007f26:	462c      	mov	r4, r5
 8007f28:	e7eb      	b.n	8007f02 <ai_platform_network_process+0x306>
 8007f2a:	9d02      	ldr	r5, [sp, #8]
 8007f2c:	2218      	movs	r2, #24
 8007f2e:	2112      	movs	r1, #18
 8007f30:	f105 0010 	add.w	r0, r5, #16
 8007f34:	f000 f8f8 	bl	8008128 <core_set_error>
 8007f38:	2400      	movs	r4, #0
 8007f3a:	e7e2      	b.n	8007f02 <ai_platform_network_process+0x306>
 8007f3c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007f40:	429f      	cmp	r7, r3
 8007f42:	f4ff af49 	bcc.w	8007dd8 <ai_platform_network_process+0x1dc>
 8007f46:	4625      	mov	r5, r4
 8007f48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007f4c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8007f4e:	82a3      	strh	r3, [r4, #20]
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	f040 808d 	bne.w	8008070 <ai_platform_network_process+0x474>
 8007f56:	4616      	mov	r6, r2
 8007f58:	4617      	mov	r7, r2
 8007f5a:	8aec      	ldrh	r4, [r5, #22]
 8007f5c:	429c      	cmp	r4, r3
 8007f5e:	bf38      	it	cc
 8007f60:	46ab      	movcc	fp, r5
 8007f62:	d2ce      	bcs.n	8007f02 <ai_platform_network_process+0x306>
 8007f64:	2e00      	cmp	r6, #0
 8007f66:	d031      	beq.n	8007fcc <ai_platform_network_process+0x3d0>
 8007f68:	f04f 0800 	mov.w	r8, #0
 8007f6c:	e015      	b.n	8007f9a <ai_platform_network_process+0x39e>
 8007f6e:	6882      	ldr	r2, [r0, #8]
 8007f70:	68c5      	ldr	r5, [r0, #12]
 8007f72:	6863      	ldr	r3, [r4, #4]
 8007f74:	1b52      	subs	r2, r2, r5
 8007f76:	4413      	add	r3, r2
 8007f78:	6083      	str	r3, [r0, #8]
 8007f7a:	698b      	ldr	r3, [r1, #24]
 8007f7c:	6862      	ldr	r2, [r4, #4]
 8007f7e:	60da      	str	r2, [r3, #12]
 8007f80:	f859 200a 	ldr.w	r2, [r9, sl]
 8007f84:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007f88:	440b      	add	r3, r1
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	bf28      	it	cs
 8007f8e:	68e3      	ldrcs	r3, [r4, #12]
 8007f90:	f108 0801 	add.w	r8, r8, #1
 8007f94:	bf28      	it	cs
 8007f96:	1ad3      	subcs	r3, r2, r3
 8007f98:	6063      	str	r3, [r4, #4]
 8007f9a:	8833      	ldrh	r3, [r6, #0]
 8007f9c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007fa0:	4543      	cmp	r3, r8
 8007fa2:	d913      	bls.n	8007fcc <ai_platform_network_process+0x3d0>
 8007fa4:	6873      	ldr	r3, [r6, #4]
 8007fa6:	b18b      	cbz	r3, 8007fcc <ai_platform_network_process+0x3d0>
 8007fa8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007fac:	b171      	cbz	r1, 8007fcc <ai_platform_network_process+0x3d0>
 8007fae:	6988      	ldr	r0, [r1, #24]
 8007fb0:	68b2      	ldr	r2, [r6, #8]
 8007fb2:	6803      	ldr	r3, [r0, #0]
 8007fb4:	f8d2 9000 	ldr.w	r9, [r2]
 8007fb8:	009d      	lsls	r5, r3, #2
 8007fba:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007fbe:	d5d6      	bpl.n	8007f6e <ai_platform_network_process+0x372>
 8007fc0:	6881      	ldr	r1, [r0, #8]
 8007fc2:	68a2      	ldr	r2, [r4, #8]
 8007fc4:	6860      	ldr	r0, [r4, #4]
 8007fc6:	f001 fbd9 	bl	800977c <st_int8_copy>
 8007fca:	e7d9      	b.n	8007f80 <ai_platform_network_process+0x384>
 8007fcc:	4658      	mov	r0, fp
 8007fce:	f000 f901 	bl	80081d4 <ai_layers_forward_all>
 8007fd2:	2f00      	cmp	r7, #0
 8007fd4:	d03d      	beq.n	8008052 <ai_platform_network_process+0x456>
 8007fd6:	2400      	movs	r4, #0
 8007fd8:	e016      	b.n	8008008 <ai_platform_network_process+0x40c>
 8007fda:	f859 100a 	ldr.w	r1, [r9, sl]
 8007fde:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	428b      	cmp	r3, r1
 8007fe6:	bf24      	itt	cs
 8007fe8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007fec:	1acb      	subcs	r3, r1, r3
 8007fee:	f8c8 3004 	str.w	r3, [r8, #4]
 8007ff2:	6981      	ldr	r1, [r0, #24]
 8007ff4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007ff8:	1b52      	subs	r2, r2, r5
 8007ffa:	4413      	add	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
 8007ffe:	6983      	ldr	r3, [r0, #24]
 8008000:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008004:	60da      	str	r2, [r3, #12]
 8008006:	3401      	adds	r4, #1
 8008008:	883b      	ldrh	r3, [r7, #0]
 800800a:	42a3      	cmp	r3, r4
 800800c:	d921      	bls.n	8008052 <ai_platform_network_process+0x456>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	b1fb      	cbz	r3, 8008052 <ai_platform_network_process+0x456>
 8008012:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008016:	b1e0      	cbz	r0, 8008052 <ai_platform_network_process+0x456>
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	6983      	ldr	r3, [r0, #24]
 800801c:	f8d2 9000 	ldr.w	r9, [r2]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8008026:	0092      	lsls	r2, r2, #2
 8008028:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800802c:	d5d5      	bpl.n	8007fda <ai_platform_network_process+0x3de>
 800802e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8008032:	6898      	ldr	r0, [r3, #8]
 8008034:	f001 fba2 	bl	800977c <st_int8_copy>
 8008038:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800803c:	f859 200a 	ldr.w	r2, [r9, sl]
 8008040:	440b      	add	r3, r1
 8008042:	4293      	cmp	r3, r2
 8008044:	bf24      	itt	cs
 8008046:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800804a:	1ad3      	subcs	r3, r2, r3
 800804c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008050:	e7d9      	b.n	8008006 <ai_platform_network_process+0x40a>
 8008052:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8008056:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800805a:	3401      	adds	r4, #1
 800805c:	b2a4      	uxth	r4, r4
 800805e:	42a3      	cmp	r3, r4
 8008060:	f8ab 4016 	strh.w	r4, [fp, #22]
 8008064:	f63f af7e 	bhi.w	8007f64 <ai_platform_network_process+0x368>
 8008068:	4620      	mov	r0, r4
 800806a:	b005      	add	sp, #20
 800806c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008070:	2a01      	cmp	r2, #1
 8008072:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8008074:	d03c      	beq.n	80080f0 <ai_platform_network_process+0x4f4>
 8008076:	f106 070c 	add.w	r7, r6, #12
 800807a:	e76e      	b.n	8007f5a <ai_platform_network_process+0x35e>
 800807c:	4625      	mov	r5, r4
 800807e:	2218      	movs	r2, #24
 8008080:	2113      	movs	r1, #19
 8008082:	f105 0010 	add.w	r0, r5, #16
 8008086:	f000 f84f 	bl	8008128 <core_set_error>
 800808a:	2400      	movs	r4, #0
 800808c:	e739      	b.n	8007f02 <ai_platform_network_process+0x306>
 800808e:	9d02      	ldr	r5, [sp, #8]
 8008090:	4604      	mov	r4, r0
 8008092:	2221      	movs	r2, #33	; 0x21
 8008094:	2112      	movs	r1, #18
 8008096:	f105 0010 	add.w	r0, r5, #16
 800809a:	f000 f845 	bl	8008128 <core_set_error>
 800809e:	e730      	b.n	8007f02 <ai_platform_network_process+0x306>
 80080a0:	9d02      	ldr	r5, [sp, #8]
 80080a2:	e727      	b.n	8007ef4 <ai_platform_network_process+0x2f8>
 80080a4:	9d02      	ldr	r5, [sp, #8]
 80080a6:	4604      	mov	r4, r0
 80080a8:	2217      	movs	r2, #23
 80080aa:	2112      	movs	r1, #18
 80080ac:	f105 0010 	add.w	r0, r5, #16
 80080b0:	f000 f83a 	bl	8008128 <core_set_error>
 80080b4:	e725      	b.n	8007f02 <ai_platform_network_process+0x306>
 80080b6:	9d02      	ldr	r5, [sp, #8]
 80080b8:	2219      	movs	r2, #25
 80080ba:	2112      	movs	r1, #18
 80080bc:	f105 0010 	add.w	r0, r5, #16
 80080c0:	f000 f832 	bl	8008128 <core_set_error>
 80080c4:	2400      	movs	r4, #0
 80080c6:	e71c      	b.n	8007f02 <ai_platform_network_process+0x306>
 80080c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80080cc:	82ab      	strh	r3, [r5, #20]
 80080ce:	e73f      	b.n	8007f50 <ai_platform_network_process+0x354>
 80080d0:	f104 0010 	add.w	r0, r4, #16
 80080d4:	2219      	movs	r2, #25
 80080d6:	2113      	movs	r1, #19
 80080d8:	f000 f826 	bl	8008128 <core_set_error>
 80080dc:	2400      	movs	r4, #0
 80080de:	e710      	b.n	8007f02 <ai_platform_network_process+0x306>
 80080e0:	f104 0010 	add.w	r0, r4, #16
 80080e4:	2217      	movs	r2, #23
 80080e6:	2113      	movs	r1, #19
 80080e8:	f000 f81e 	bl	8008128 <core_set_error>
 80080ec:	4654      	mov	r4, sl
 80080ee:	e708      	b.n	8007f02 <ai_platform_network_process+0x306>
 80080f0:	2700      	movs	r7, #0
 80080f2:	e732      	b.n	8007f5a <ai_platform_network_process+0x35e>
 80080f4:	4625      	mov	r5, r4
 80080f6:	2221      	movs	r2, #33	; 0x21
 80080f8:	4604      	mov	r4, r0
 80080fa:	2113      	movs	r1, #19
 80080fc:	f105 0010 	add.w	r0, r5, #16
 8008100:	f000 f812 	bl	8008128 <core_set_error>
 8008104:	e6fd      	b.n	8007f02 <ai_platform_network_process+0x306>
 8008106:	4625      	mov	r5, r4
 8008108:	2217      	movs	r2, #23
 800810a:	4604      	mov	r4, r0
 800810c:	2113      	movs	r1, #19
 800810e:	f105 0010 	add.w	r0, r5, #16
 8008112:	f000 f809 	bl	8008128 <core_set_error>
 8008116:	e6f4      	b.n	8007f02 <ai_platform_network_process+0x306>

08008118 <core_init>:
 8008118:	2001      	movs	r0, #1
 800811a:	4770      	bx	lr

0800811c <core_get_error>:
 800811c:	4603      	mov	r3, r0
 800811e:	2200      	movs	r2, #0
 8008120:	6800      	ldr	r0, [r0, #0]
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop

08008128 <core_set_error>:
 8008128:	4603      	mov	r3, r0
 800812a:	7800      	ldrb	r0, [r0, #0]
 800812c:	b108      	cbz	r0, 8008132 <core_set_error+0xa>
 800812e:	2000      	movs	r0, #0
 8008130:	4770      	bx	lr
 8008132:	7019      	strb	r1, [r3, #0]
 8008134:	6819      	ldr	r1, [r3, #0]
 8008136:	2001      	movs	r0, #1
 8008138:	f362 211f 	bfi	r1, r2, #8, #24
 800813c:	6019      	str	r1, [r3, #0]
 800813e:	4770      	bx	lr

08008140 <ai_check_custom_types>:
 8008140:	4b12      	ldr	r3, [pc, #72]	; (800818c <ai_check_custom_types+0x4c>)
 8008142:	b082      	sub	sp, #8
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	b118      	cbz	r0, 8008150 <ai_check_custom_types+0x10>
 8008148:	7803      	ldrb	r3, [r0, #0]
 800814a:	2b03      	cmp	r3, #3
 800814c:	d002      	beq.n	8008154 <ai_check_custom_types+0x14>
 800814e:	2000      	movs	r0, #0
 8008150:	b002      	add	sp, #8
 8008152:	4770      	bx	lr
 8008154:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <ai_check_custom_types+0x26>
 800815c:	2001      	movs	r0, #1
 800815e:	f080 0001 	eor.w	r0, r0, #1
 8008162:	b002      	add	sp, #8
 8008164:	4770      	bx	lr
 8008166:	7842      	ldrb	r2, [r0, #1]
 8008168:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800816c:	3001      	adds	r0, #1
 800816e:	429a      	cmp	r2, r3
 8008170:	d1f4      	bne.n	800815c <ai_check_custom_types+0x1c>
 8008172:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008176:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800817a:	429a      	cmp	r2, r3
 800817c:	d1ee      	bne.n	800815c <ai_check_custom_types+0x1c>
 800817e:	7842      	ldrb	r2, [r0, #1]
 8008180:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008184:	429a      	cmp	r2, r3
 8008186:	d1e9      	bne.n	800815c <ai_check_custom_types+0x1c>
 8008188:	2000      	movs	r0, #0
 800818a:	e7e8      	b.n	800815e <ai_check_custom_types+0x1e>
 800818c:	84048403 	.word	0x84048403

08008190 <ai_layers_init_all>:
 8008190:	2100      	movs	r1, #0
 8008192:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008194:	b143      	cbz	r3, 80081a8 <ai_layers_init_all+0x18>
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	60d8      	str	r0, [r3, #12]
 800819a:	429a      	cmp	r2, r3
 800819c:	f101 0101 	add.w	r1, r1, #1
 80081a0:	d002      	beq.n	80081a8 <ai_layers_init_all+0x18>
 80081a2:	b10a      	cbz	r2, 80081a8 <ai_layers_init_all+0x18>
 80081a4:	4613      	mov	r3, r2
 80081a6:	e7f5      	b.n	8008194 <ai_layers_init_all+0x4>
 80081a8:	4608      	mov	r0, r1
 80081aa:	4770      	bx	lr

080081ac <ai_layers_post_init_all>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	2500      	movs	r5, #0
 80081b0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80081b2:	b16c      	cbz	r4, 80081d0 <ai_layers_post_init_all+0x24>
 80081b4:	6863      	ldr	r3, [r4, #4]
 80081b6:	07db      	lsls	r3, r3, #31
 80081b8:	d504      	bpl.n	80081c4 <ai_layers_post_init_all+0x18>
 80081ba:	6a23      	ldr	r3, [r4, #32]
 80081bc:	b113      	cbz	r3, 80081c4 <ai_layers_post_init_all+0x18>
 80081be:	4620      	mov	r0, r4
 80081c0:	4798      	blx	r3
 80081c2:	3501      	adds	r5, #1
 80081c4:	6923      	ldr	r3, [r4, #16]
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	d002      	beq.n	80081d0 <ai_layers_post_init_all+0x24>
 80081ca:	b10b      	cbz	r3, 80081d0 <ai_layers_post_init_all+0x24>
 80081cc:	461c      	mov	r4, r3
 80081ce:	e7f0      	b.n	80081b2 <ai_layers_post_init_all+0x6>
 80081d0:	4628      	mov	r0, r5
 80081d2:	bd38      	pop	{r3, r4, r5, pc}

080081d4 <ai_layers_forward_all>:
 80081d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80081dc:	4604      	mov	r4, r0
 80081de:	f1b8 0f00 	cmp.w	r8, #0
 80081e2:	d02c      	beq.n	800823e <ai_layers_forward_all+0x6a>
 80081e4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80081e6:	6381      	str	r1, [r0, #56]	; 0x38
 80081e8:	b329      	cbz	r1, 8008236 <ai_layers_forward_all+0x62>
 80081ea:	2001      	movs	r0, #1
 80081ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081ee:	47c0      	blx	r8
 80081f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80081f2:	b306      	cbz	r6, 8008236 <ai_layers_forward_all+0x62>
 80081f4:	2700      	movs	r7, #0
 80081f6:	4631      	mov	r1, r6
 80081f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081fa:	2002      	movs	r0, #2
 80081fc:	47c0      	blx	r8
 80081fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008200:	4628      	mov	r0, r5
 8008202:	696b      	ldr	r3, [r5, #20]
 8008204:	4798      	blx	r3
 8008206:	692e      	ldr	r6, [r5, #16]
 8008208:	42b5      	cmp	r5, r6
 800820a:	d00a      	beq.n	8008222 <ai_layers_forward_all+0x4e>
 800820c:	2003      	movs	r0, #3
 800820e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008210:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008212:	47c0      	blx	r8
 8008214:	3701      	adds	r7, #1
 8008216:	63a6      	str	r6, [r4, #56]	; 0x38
 8008218:	2e00      	cmp	r6, #0
 800821a:	d1ec      	bne.n	80081f6 <ai_layers_forward_all+0x22>
 800821c:	4638      	mov	r0, r7
 800821e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008222:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008224:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008226:	2003      	movs	r0, #3
 8008228:	47c0      	blx	r8
 800822a:	2300      	movs	r3, #0
 800822c:	3701      	adds	r7, #1
 800822e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008230:	4638      	mov	r0, r7
 8008232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008236:	2700      	movs	r7, #0
 8008238:	4638      	mov	r0, r7
 800823a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800823e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008240:	6385      	str	r5, [r0, #56]	; 0x38
 8008242:	2d00      	cmp	r5, #0
 8008244:	d0f7      	beq.n	8008236 <ai_layers_forward_all+0x62>
 8008246:	4647      	mov	r7, r8
 8008248:	696b      	ldr	r3, [r5, #20]
 800824a:	4628      	mov	r0, r5
 800824c:	4798      	blx	r3
 800824e:	462b      	mov	r3, r5
 8008250:	692d      	ldr	r5, [r5, #16]
 8008252:	429d      	cmp	r5, r3
 8008254:	d004      	beq.n	8008260 <ai_layers_forward_all+0x8c>
 8008256:	63a5      	str	r5, [r4, #56]	; 0x38
 8008258:	3701      	adds	r7, #1
 800825a:	2d00      	cmp	r5, #0
 800825c:	d1f4      	bne.n	8008248 <ai_layers_forward_all+0x74>
 800825e:	e7dd      	b.n	800821c <ai_layers_forward_all+0x48>
 8008260:	2300      	movs	r3, #0
 8008262:	3701      	adds	r7, #1
 8008264:	63a3      	str	r3, [r4, #56]	; 0x38
 8008266:	e7d9      	b.n	800821c <ai_layers_forward_all+0x48>

08008268 <ai_dict_decompress_f32>:
 8008268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800826c:	9d08      	ldr	r5, [sp, #32]
 800826e:	2b04      	cmp	r3, #4
 8008270:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8008274:	d00e      	beq.n	8008294 <ai_dict_decompress_f32+0x2c>
 8008276:	2b08      	cmp	r3, #8
 8008278:	d10a      	bne.n	8008290 <ai_dict_decompress_f32+0x28>
 800827a:	42a8      	cmp	r0, r5
 800827c:	d208      	bcs.n	8008290 <ai_dict_decompress_f32+0x28>
 800827e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008282:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f840 3b04 	str.w	r3, [r0], #4
 800828c:	4285      	cmp	r5, r0
 800828e:	d8f6      	bhi.n	800827e <ai_dict_decompress_f32+0x16>
 8008290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	085e      	lsrs	r6, r3, #1
 8008298:	f003 0701 	and.w	r7, r3, #1
 800829c:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80082a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80082a4:	42a8      	cmp	r0, r5
 80082a6:	d2f3      	bcs.n	8008290 <ai_dict_decompress_f32+0x28>
 80082a8:	b33e      	cbz	r6, 80082fa <ai_dict_decompress_f32+0x92>
 80082aa:	f100 0e08 	add.w	lr, r0, #8
 80082ae:	f101 3cff 	add.w	ip, r1, #4294967295
 80082b2:	eb01 0408 	add.w	r4, r1, r8
 80082b6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80082ba:	f10e 0e08 	add.w	lr, lr, #8
 80082be:	091b      	lsrs	r3, r3, #4
 80082c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4564      	cmp	r4, ip
 80082c8:	f84e 3c10 	str.w	r3, [lr, #-16]
 80082cc:	f89c 3000 	ldrb.w	r3, [ip]
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80082de:	d1ea      	bne.n	80082b6 <ai_dict_decompress_f32+0x4e>
 80082e0:	4431      	add	r1, r6
 80082e2:	4448      	add	r0, r9
 80082e4:	2f00      	cmp	r7, #0
 80082e6:	d0dd      	beq.n	80082a4 <ai_dict_decompress_f32+0x3c>
 80082e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ec:	091b      	lsrs	r3, r3, #4
 80082ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f840 3b04 	str.w	r3, [r0], #4
 80082f8:	e7d4      	b.n	80082a4 <ai_dict_decompress_f32+0x3c>
 80082fa:	2f00      	cmp	r7, #0
 80082fc:	d1f4      	bne.n	80082e8 <ai_dict_decompress_f32+0x80>
 80082fe:	42a8      	cmp	r0, r5
 8008300:	d3fd      	bcc.n	80082fe <ai_dict_decompress_f32+0x96>
 8008302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008306:	bf00      	nop

08008308 <forward_conv2d_if32of32wf32>:
 8008308:	6982      	ldr	r2, [r0, #24]
 800830a:	8813      	ldrh	r3, [r2, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8092 	beq.w	8008436 <forward_conv2d_if32of32wf32+0x12e>
 8008312:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8008316:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800831a:	b102      	cbz	r2, 800831e <forward_conv2d_if32of32wf32+0x16>
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	2b01      	cmp	r3, #1
 8008320:	f000 80b2 	beq.w	8008488 <forward_conv2d_if32of32wf32+0x180>
 8008324:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8008328:	b101      	cbz	r1, 800832c <forward_conv2d_if32of32wf32+0x24>
 800832a:	6809      	ldr	r1, [r1, #0]
 800832c:	2b02      	cmp	r3, #2
 800832e:	f000 8084 	beq.w	800843a <forward_conv2d_if32of32wf32+0x132>
 8008332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008336:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800833a:	b0a1      	sub	sp, #132	; 0x84
 800833c:	2e00      	cmp	r6, #0
 800833e:	f000 809c 	beq.w	800847a <forward_conv2d_if32of32wf32+0x172>
 8008342:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 8008346:	6834      	ldr	r4, [r6, #0]
 8008348:	2d01      	cmp	r5, #1
 800834a:	f240 8098 	bls.w	800847e <forward_conv2d_if32of32wf32+0x176>
 800834e:	6876      	ldr	r6, [r6, #4]
 8008350:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8008354:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008358:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800835c:	6992      	ldr	r2, [r2, #24]
 800835e:	9713      	str	r7, [sp, #76]	; 0x4c
 8008360:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8008364:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8008368:	9714      	str	r7, [sp, #80]	; 0x50
 800836a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800836e:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8008372:	9715      	str	r7, [sp, #84]	; 0x54
 8008374:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8008378:	69a2      	ldr	r2, [r4, #24]
 800837a:	9716      	str	r7, [sp, #88]	; 0x58
 800837c:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8008380:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008384:	9717      	str	r7, [sp, #92]	; 0x5c
 8008386:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800838a:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800838e:	9718      	str	r7, [sp, #96]	; 0x60
 8008390:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8008392:	9719      	str	r7, [sp, #100]	; 0x64
 8008394:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 8008396:	69c0      	ldr	r0, [r0, #28]
 8008398:	971a      	str	r7, [sp, #104]	; 0x68
 800839a:	901f      	str	r0, [sp, #124]	; 0x7c
 800839c:	f8be 0000 	ldrh.w	r0, [lr]
 80083a0:	901b      	str	r0, [sp, #108]	; 0x6c
 80083a2:	f8be 0004 	ldrh.w	r0, [lr, #4]
 80083a6:	901c      	str	r0, [sp, #112]	; 0x70
 80083a8:	b2a8      	uxth	r0, r5
 80083aa:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 80083ae:	901d      	str	r0, [sp, #116]	; 0x74
 80083b0:	b2a0      	uxth	r0, r4
 80083b2:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80083b6:	901e      	str	r0, [sp, #120]	; 0x78
 80083b8:	b10e      	cbz	r6, 80083be <forward_conv2d_if32of32wf32+0xb6>
 80083ba:	69b0      	ldr	r0, [r6, #24]
 80083bc:	6886      	ldr	r6, [r0, #8]
 80083be:	6989      	ldr	r1, [r1, #24]
 80083c0:	b2a4      	uxth	r4, r4
 80083c2:	f108 30ff 	add.w	r0, r8, #4294967295
 80083c6:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80083ca:	b2ad      	uxth	r5, r5
 80083cc:	6811      	ldr	r1, [r2, #0]
 80083ce:	3c01      	subs	r4, #1
 80083d0:	fb00 8404 	mla	r4, r0, r4, r8
 80083d4:	3d01      	subs	r5, #1
 80083d6:	1e78      	subs	r0, r7, #1
 80083d8:	fb00 7505 	mla	r5, r0, r5, r7
 80083dc:	f3c1 4043 	ubfx	r0, r1, #17, #4
 80083e0:	2804      	cmp	r0, #4
 80083e2:	d02d      	beq.n	8008440 <forward_conv2d_if32of32wf32+0x138>
 80083e4:	2808      	cmp	r0, #8
 80083e6:	d02b      	beq.n	8008440 <forward_conv2d_if32of32wf32+0x138>
 80083e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083ea:	940c      	str	r4, [sp, #48]	; 0x30
 80083ec:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 80083f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80083f2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80083f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80083f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083f8:	464a      	mov	r2, r9
 80083fa:	930a      	str	r3, [sp, #40]	; 0x28
 80083fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083fe:	4651      	mov	r1, sl
 8008400:	9309      	str	r3, [sp, #36]	; 0x24
 8008402:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008404:	4658      	mov	r0, fp
 8008406:	e9cd 8307 	strd	r8, r3, [sp, #28]
 800840a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800840c:	9706      	str	r7, [sp, #24]
 800840e:	9305      	str	r3, [sp, #20]
 8008410:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008412:	940f      	str	r4, [sp, #60]	; 0x3c
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008418:	9303      	str	r3, [sp, #12]
 800841a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800841c:	9302      	str	r3, [sp, #8]
 800841e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008428:	9310      	str	r3, [sp, #64]	; 0x40
 800842a:	4633      	mov	r3, r6
 800842c:	f000 ff18 	bl	8009260 <forward_lite_conv2d_if32of32wf32>
 8008430:	b021      	add	sp, #132	; 0x84
 8008432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	deff      	udf	#255	; 0xff
 800843a:	2300      	movs	r3, #0
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	deff      	udf	#255	; 0xff
 8008440:	68d2      	ldr	r2, [r2, #12]
 8008442:	2a00      	cmp	r2, #0
 8008444:	d0d0      	beq.n	80083e8 <forward_conv2d_if32of32wf32+0xe0>
 8008446:	2b03      	cmp	r3, #3
 8008448:	d021      	beq.n	800848e <forward_conv2d_if32of32wf32+0x186>
 800844a:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800844e:	b1c3      	cbz	r3, 8008482 <forward_conv2d_if32of32wf32+0x17a>
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	b1b3      	cbz	r3, 8008482 <forward_conv2d_if32of32wf32+0x17a>
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 8008464:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8008468:	410b      	asrs	r3, r1
 800846a:	b29b      	uxth	r3, r3
 800846c:	4649      	mov	r1, r9
 800846e:	2800      	cmp	r0, #0
 8008470:	bf18      	it	ne
 8008472:	4681      	movne	r9, r0
 8008474:	f7ff fef8 	bl	8008268 <ai_dict_decompress_f32>
 8008478:	e7b6      	b.n	80083e8 <forward_conv2d_if32of32wf32+0xe0>
 800847a:	4634      	mov	r4, r6
 800847c:	e768      	b.n	8008350 <forward_conv2d_if32of32wf32+0x48>
 800847e:	2600      	movs	r6, #0
 8008480:	e766      	b.n	8008350 <forward_conv2d_if32of32wf32+0x48>
 8008482:	2300      	movs	r3, #0
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	deff      	udf	#255	; 0xff
 8008488:	2300      	movs	r3, #0
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	deff      	udf	#255	; 0xff
 800848e:	2300      	movs	r3, #0
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	deff      	udf	#255	; 0xff

08008494 <forward_dense>:
 8008494:	6983      	ldr	r3, [r0, #24]
 8008496:	881a      	ldrh	r2, [r3, #0]
 8008498:	2a00      	cmp	r2, #0
 800849a:	f000 8182 	beq.w	80087a2 <forward_dense+0x30e>
 800849e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a2:	ed2d 8b02 	vpush	{d8}
 80084a6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80084aa:	b095      	sub	sp, #84	; 0x54
 80084ac:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80084b0:	b105      	cbz	r5, 80084b4 <forward_dense+0x20>
 80084b2:	682d      	ldr	r5, [r5, #0]
 80084b4:	2a01      	cmp	r2, #1
 80084b6:	f000 8291 	beq.w	80089dc <forward_dense+0x548>
 80084ba:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80084be:	b106      	cbz	r6, 80084c2 <forward_dense+0x2e>
 80084c0:	6836      	ldr	r6, [r6, #0]
 80084c2:	2a02      	cmp	r2, #2
 80084c4:	f000 816f 	beq.w	80087a6 <forward_dense+0x312>
 80084c8:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80084cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 8276 	beq.w	80089c0 <forward_dense+0x52c>
 80084d4:	4619      	mov	r1, r3
 80084d6:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80084da:	6809      	ldr	r1, [r1, #0]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	910d      	str	r1, [sp, #52]	; 0x34
 80084e0:	f240 8270 	bls.w	80089c4 <forward_dense+0x530>
 80084e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ea:	460b      	mov	r3, r1
 80084ec:	68e8      	ldr	r0, [r5, #12]
 80084ee:	68f7      	ldr	r7, [r6, #12]
 80084f0:	6840      	ldr	r0, [r0, #4]
 80084f2:	6999      	ldr	r1, [r3, #24]
 80084f4:	9013      	str	r0, [sp, #76]	; 0x4c
 80084f6:	680b      	ldr	r3, [r1, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80084fe:	9012      	str	r0, [sp, #72]	; 0x48
 8008500:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8008504:	fb00 f404 	mul.w	r4, r0, r4
 8008508:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800850c:	fa4e f000 	asr.w	r0, lr, r0
 8008510:	2a03      	cmp	r2, #3
 8008512:	9010      	str	r0, [sp, #64]	; 0x40
 8008514:	f000 825f 	beq.w	80089d6 <forward_dense+0x542>
 8008518:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800851c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8008520:	2a00      	cmp	r2, #0
 8008522:	f000 8248 	beq.w	80089b6 <forward_dense+0x522>
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	2a00      	cmp	r2, #0
 800852a:	f000 8244 	beq.w	80089b6 <forward_dense+0x522>
 800852e:	2b04      	cmp	r3, #4
 8008530:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8008534:	f000 822e 	beq.w	8008994 <forward_dense+0x500>
 8008538:	2b08      	cmp	r3, #8
 800853a:	f000 822b 	beq.w	8008994 <forward_dense+0x500>
 800853e:	f04f 0b00 	mov.w	fp, #0
 8008542:	69b2      	ldr	r2, [r6, #24]
 8008544:	fb07 f404 	mul.w	r4, r7, r4
 8008548:	6891      	ldr	r1, [r2, #8]
 800854a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800854c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008550:	6952      	ldr	r2, [r2, #20]
 8008552:	69ab      	ldr	r3, [r5, #24]
 8008554:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8008558:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800855a:	4281      	cmp	r1, r0
 800855c:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	9106      	str	r1, [sp, #24]
 8008564:	900e      	str	r0, [sp, #56]	; 0x38
 8008566:	940c      	str	r4, [sp, #48]	; 0x30
 8008568:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 800856c:	f080 8114 	bcs.w	8008798 <forward_dense+0x304>
 8008570:	465c      	mov	r4, fp
 8008572:	ed9f 8a94 	vldr	s16, [pc, #592]	; 80087c4 <forward_dense+0x330>
 8008576:	46cb      	mov	fp, r9
 8008578:	46c1      	mov	r9, r8
 800857a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800857c:	f021 0201 	bic.w	r2, r1, #1
 8008580:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008584:	9204      	str	r2, [sp, #16]
 8008586:	f001 0201 	and.w	r2, r1, #1
 800858a:	08c8      	lsrs	r0, r1, #3
 800858c:	9208      	str	r2, [sp, #32]
 800858e:	008a      	lsls	r2, r1, #2
 8008590:	f001 0a07 	and.w	sl, r1, #7
 8008594:	920f      	str	r2, [sp, #60]	; 0x3c
 8008596:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800859a:	3320      	adds	r3, #32
 800859c:	9007      	str	r0, [sp, #28]
 800859e:	9205      	str	r2, [sp, #20]
 80085a0:	9302      	str	r3, [sp, #8]
 80085a2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80085a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	9b02      	ldr	r3, [sp, #8]
 80085ae:	3b20      	subs	r3, #32
 80085b0:	930a      	str	r3, [sp, #40]	; 0x28
 80085b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b4:	b10b      	cbz	r3, 80085ba <forward_dense+0x126>
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2c00      	cmp	r4, #0
 80085bc:	f000 81dc 	beq.w	8008978 <forward_dense+0x4e4>
 80085c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80085c2:	2904      	cmp	r1, #4
 80085c4:	9906      	ldr	r1, [sp, #24]
 80085c6:	f000 80ff 	beq.w	80087c8 <forward_dense+0x334>
 80085ca:	4549      	cmp	r1, r9
 80085cc:	f080 80d3 	bcs.w	8008776 <forward_dense+0x2e2>
 80085d0:	460f      	mov	r7, r1
 80085d2:	9907      	ldr	r1, [sp, #28]
 80085d4:	4694      	mov	ip, r2
 80085d6:	468e      	mov	lr, r1
 80085d8:	1c4e      	adds	r6, r1, #1
 80085da:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80085de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80085e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085e4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80df 	beq.w	80087ac <forward_dense+0x318>
 80085ee:	ecb3 0a01 	vldmia	r3!, {s0}
 80085f2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80087c4 <forward_dense+0x330>
 80085f6:	f1be 0f00 	cmp.w	lr, #0
 80085fa:	f000 80df 	beq.w	80087bc <forward_dense+0x328>
 80085fe:	4640      	mov	r0, r8
 8008600:	f10c 0108 	add.w	r1, ip, #8
 8008604:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8008608:	ed10 5a07 	vldr	s10, [r0, #-28]	; 0xffffffe4
 800860c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008610:	edd5 7a00 	vldr	s15, [r5]
 8008614:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8008618:	ed10 6a08 	vldr	s12, [r0, #-32]	; 0xffffffe0
 800861c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008620:	edd5 0a00 	vldr	s1, [r5]
 8008624:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008628:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800862c:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8008630:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008634:	ed95 1a00 	vldr	s2, [r5]
 8008638:	eee0 7a86 	vfma.f32	s15, s1, s12
 800863c:	f811 5c05 	ldrb.w	r5, [r1, #-5]
 8008640:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8008644:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008648:	ed95 2a00 	vldr	s4, [r5]
 800864c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008650:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8008654:	ed50 3a04 	vldr	s7, [r0, #-16]
 8008658:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800865c:	ed95 3a00 	vldr	s6, [r5]
 8008660:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008664:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8008668:	ed50 4a03 	vldr	s9, [r0, #-12]
 800866c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008670:	ed95 4a00 	vldr	s8, [r5]
 8008674:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008678:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 800867c:	ed50 5a02 	vldr	s11, [r0, #-8]
 8008680:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008684:	ed95 5a00 	vldr	s10, [r5]
 8008688:	eee4 7a24 	vfma.f32	s15, s8, s9
 800868c:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008690:	ed50 6a01 	vldr	s13, [r0, #-4]
 8008694:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008698:	ed95 6a00 	vldr	s12, [r5]
 800869c:	eee5 7a25 	vfma.f32	s15, s10, s11
 80086a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80086a4:	3108      	adds	r1, #8
 80086a6:	428e      	cmp	r6, r1
 80086a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086ac:	f100 0020 	add.w	r0, r0, #32
 80086b0:	d1a8      	bne.n	8008604 <forward_dense+0x170>
 80086b2:	4650      	mov	r0, sl
 80086b4:	f1a6 0108 	sub.w	r1, r6, #8
 80086b8:	2a00      	cmp	r2, #0
 80086ba:	d04a      	beq.n	8008752 <forward_dense+0x2be>
 80086bc:	780d      	ldrb	r5, [r1, #0]
 80086be:	edd0 6a00 	vldr	s13, [r0]
 80086c2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086c6:	edd5 7a00 	vldr	s15, [r5]
 80086ca:	2a01      	cmp	r2, #1
 80086cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086d0:	d03f      	beq.n	8008752 <forward_dense+0x2be>
 80086d2:	784d      	ldrb	r5, [r1, #1]
 80086d4:	edd0 6a01 	vldr	s13, [r0, #4]
 80086d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086dc:	edd5 7a00 	vldr	s15, [r5]
 80086e0:	2a02      	cmp	r2, #2
 80086e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086e6:	d034      	beq.n	8008752 <forward_dense+0x2be>
 80086e8:	788d      	ldrb	r5, [r1, #2]
 80086ea:	edd0 6a02 	vldr	s13, [r0, #8]
 80086ee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086f2:	edd5 7a00 	vldr	s15, [r5]
 80086f6:	2a03      	cmp	r2, #3
 80086f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086fc:	d029      	beq.n	8008752 <forward_dense+0x2be>
 80086fe:	78cd      	ldrb	r5, [r1, #3]
 8008700:	edd0 6a03 	vldr	s13, [r0, #12]
 8008704:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008708:	edd5 7a00 	vldr	s15, [r5]
 800870c:	2a04      	cmp	r2, #4
 800870e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008712:	d01e      	beq.n	8008752 <forward_dense+0x2be>
 8008714:	790d      	ldrb	r5, [r1, #4]
 8008716:	edd0 6a04 	vldr	s13, [r0, #16]
 800871a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800871e:	edd5 7a00 	vldr	s15, [r5]
 8008722:	2a05      	cmp	r2, #5
 8008724:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008728:	d013      	beq.n	8008752 <forward_dense+0x2be>
 800872a:	794d      	ldrb	r5, [r1, #5]
 800872c:	edd0 6a05 	vldr	s13, [r0, #20]
 8008730:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008734:	edd5 7a00 	vldr	s15, [r5]
 8008738:	2a06      	cmp	r2, #6
 800873a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800873e:	d008      	beq.n	8008752 <forward_dense+0x2be>
 8008740:	7989      	ldrb	r1, [r1, #6]
 8008742:	edd0 7a06 	vldr	s15, [r0, #24]
 8008746:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800874a:	edd1 6a00 	vldr	s13, [r1]
 800874e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008752:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008756:	eca7 7a01 	vstmia	r7!, {s14}
 800875a:	454f      	cmp	r7, r9
 800875c:	44dc      	add	ip, fp
 800875e:	445e      	add	r6, fp
 8008760:	f4ff af42 	bcc.w	80085e8 <forward_dense+0x154>
 8008764:	9a06      	ldr	r2, [sp, #24]
 8008766:	eba9 0302 	sub.w	r3, r9, r2
 800876a:	3b01      	subs	r3, #1
 800876c:	f023 0303 	bic.w	r3, r3, #3
 8008770:	3304      	adds	r3, #4
 8008772:	18d3      	adds	r3, r2, r3
 8008774:	9306      	str	r3, [sp, #24]
 8008776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008778:	9a05      	ldr	r2, [sp, #20]
 800877a:	4499      	add	r9, r3
 800877c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800877e:	441a      	add	r2, r3
 8008780:	9205      	str	r2, [sp, #20]
 8008782:	9a02      	ldr	r2, [sp, #8]
 8008784:	441a      	add	r2, r3
 8008786:	9202      	str	r2, [sp, #8]
 8008788:	9a04      	ldr	r2, [sp, #16]
 800878a:	441a      	add	r2, r3
 800878c:	9204      	str	r2, [sp, #16]
 800878e:	9b06      	ldr	r3, [sp, #24]
 8008790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008792:	4293      	cmp	r3, r2
 8008794:	f4ff af07 	bcc.w	80085a6 <forward_dense+0x112>
 8008798:	b015      	add	sp, #84	; 0x54
 800879a:	ecbd 8b02 	vpop	{d8}
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	6853      	ldr	r3, [r2, #4]
 80087a4:	deff      	udf	#255	; 0xff
 80087a6:	2300      	movs	r3, #0
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	deff      	udf	#255	; 0xff
 80087ac:	eeb0 0a48 	vmov.f32	s0, s16
 80087b0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80087c4 <forward_dense+0x330>
 80087b4:	f1be 0f00 	cmp.w	lr, #0
 80087b8:	f47f af21 	bne.w	80085fe <forward_dense+0x16a>
 80087bc:	4661      	mov	r1, ip
 80087be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80087c0:	e77a      	b.n	80086b8 <forward_dense+0x224>
 80087c2:	bf00      	nop
 80087c4:	00000000 	.word	0x00000000
 80087c8:	4549      	cmp	r1, r9
 80087ca:	d2d4      	bcs.n	8008776 <forward_dense+0x2e2>
 80087cc:	9103      	str	r1, [sp, #12]
 80087ce:	9907      	ldr	r1, [sp, #28]
 80087d0:	f101 0c01 	add.w	ip, r1, #1
 80087d4:	9904      	ldr	r1, [sp, #16]
 80087d6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80087da:	3901      	subs	r1, #1
 80087dc:	9109      	str	r1, [sp, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f000 80b2 	beq.w	8008948 <forward_dense+0x4b4>
 80087e4:	9907      	ldr	r1, [sp, #28]
 80087e6:	ecf3 8a01 	vldmia	r3!, {s17}
 80087ea:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 80087c4 <forward_dense+0x330>
 80087ee:	2900      	cmp	r1, #0
 80087f0:	f000 80b2 	beq.w	8008958 <forward_dense+0x4c4>
 80087f4:	9902      	ldr	r1, [sp, #8]
 80087f6:	1d10      	adds	r0, r2, #4
 80087f8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80087fc:	ed11 6a07 	vldr	s12, [r1, #-28]	; 0xffffffe4
 8008800:	f006 070f 	and.w	r7, r6, #15
 8008804:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008808:	edd7 7a00 	vldr	s15, [r7]
 800880c:	0936      	lsrs	r6, r6, #4
 800880e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008812:	ed51 0a08 	vldr	s1, [r1, #-32]	; 0xffffffe0
 8008816:	ed96 0a00 	vldr	s0, [r6]
 800881a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800881e:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8008822:	ed51 1a06 	vldr	s3, [r1, #-24]	; 0xffffffe8
 8008826:	092e      	lsrs	r6, r5, #4
 8008828:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800882c:	ed96 1a00 	vldr	s2, [r6]
 8008830:	eee0 7a20 	vfma.f32	s15, s0, s1
 8008834:	f005 050f 	and.w	r5, r5, #15
 8008838:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800883c:	ed51 2a05 	vldr	s5, [r1, #-20]	; 0xffffffec
 8008840:	ed95 2a00 	vldr	s4, [r5]
 8008844:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008848:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800884c:	ed51 3a04 	vldr	s7, [r1, #-16]
 8008850:	0937      	lsrs	r7, r6, #4
 8008852:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008856:	ed97 3a00 	vldr	s6, [r7]
 800885a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800885e:	f006 060f 	and.w	r6, r6, #15
 8008862:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008866:	ed51 4a03 	vldr	s9, [r1, #-12]
 800886a:	ed96 4a00 	vldr	s8, [r6]
 800886e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008872:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8008876:	ed51 5a02 	vldr	s11, [r1, #-8]
 800887a:	092e      	lsrs	r6, r5, #4
 800887c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008880:	ed96 5a00 	vldr	s10, [r6]
 8008884:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008888:	f005 050f 	and.w	r5, r5, #15
 800888c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008890:	ed51 6a01 	vldr	s13, [r1, #-4]
 8008894:	ed95 6a00 	vldr	s12, [r5]
 8008898:	eee5 7a25 	vfma.f32	s15, s10, s11
 800889c:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088a0:	3004      	adds	r0, #4
 80088a2:	4584      	cmp	ip, r0
 80088a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088a8:	f101 0120 	add.w	r1, r1, #32
 80088ac:	d1a4      	bne.n	80087f8 <forward_dense+0x364>
 80088ae:	f8dd e014 	ldr.w	lr, [sp, #20]
 80088b2:	f1ac 0804 	sub.w	r8, ip, #4
 80088b6:	9904      	ldr	r1, [sp, #16]
 80088b8:	458e      	cmp	lr, r1
 80088ba:	d22a      	bcs.n	8008912 <forward_dense+0x47e>
 80088bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088be:	f10e 0008 	add.w	r0, lr, #8
 80088c2:	eba1 070e 	sub.w	r7, r1, lr
 80088c6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 80088ca:	f108 36ff 	add.w	r6, r8, #4294967295
 80088ce:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80088d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088d6:	ed50 5a01 	vldr	s11, [r0, #-4]
 80088da:	f001 050f 	and.w	r5, r1, #15
 80088de:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088e2:	edd5 7a00 	vldr	s15, [r5]
 80088e6:	0909      	lsrs	r1, r1, #4
 80088e8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80088ec:	ed50 6a02 	vldr	s13, [r0, #-8]
 80088f0:	ed91 6a00 	vldr	s12, [r1]
 80088f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80088f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088fc:	42b7      	cmp	r7, r6
 80088fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008902:	f100 0008 	add.w	r0, r0, #8
 8008906:	d1e4      	bne.n	80088d2 <forward_dense+0x43e>
 8008908:	f10a 0a01 	add.w	sl, sl, #1
 800890c:	44d0      	add	r8, sl
 800890e:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8008912:	9908      	ldr	r1, [sp, #32]
 8008914:	b321      	cbz	r1, 8008960 <forward_dense+0x4cc>
 8008916:	f898 1000 	ldrb.w	r1, [r8]
 800891a:	edde 7a00 	vldr	s15, [lr]
 800891e:	0909      	lsrs	r1, r1, #4
 8008920:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008924:	edd1 6a00 	vldr	s13, [r1]
 8008928:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800892c:	ee78 8a87 	vadd.f32	s17, s17, s14
 8008930:	9903      	ldr	r1, [sp, #12]
 8008932:	445a      	add	r2, fp
 8008934:	ece1 8a01 	vstmia	r1!, {s17}
 8008938:	4589      	cmp	r9, r1
 800893a:	44dc      	add	ip, fp
 800893c:	9103      	str	r1, [sp, #12]
 800893e:	f67f af11 	bls.w	8008764 <forward_dense+0x2d0>
 8008942:	2b00      	cmp	r3, #0
 8008944:	f47f af4e 	bne.w	80087e4 <forward_dense+0x350>
 8008948:	9907      	ldr	r1, [sp, #28]
 800894a:	eef0 8a48 	vmov.f32	s17, s16
 800894e:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 80087c4 <forward_dense+0x330>
 8008952:	2900      	cmp	r1, #0
 8008954:	f47f af4e 	bne.w	80087f4 <forward_dense+0x360>
 8008958:	4690      	mov	r8, r2
 800895a:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800895e:	e7aa      	b.n	80088b6 <forward_dense+0x422>
 8008960:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008964:	9903      	ldr	r1, [sp, #12]
 8008966:	445a      	add	r2, fp
 8008968:	eca1 7a01 	vstmia	r1!, {s14}
 800896c:	4549      	cmp	r1, r9
 800896e:	44dc      	add	ip, fp
 8008970:	9103      	str	r1, [sp, #12]
 8008972:	f4ff af34 	bcc.w	80087de <forward_dense+0x34a>
 8008976:	e6f5      	b.n	8008764 <forward_dense+0x2d0>
 8008978:	9812      	ldr	r0, [sp, #72]	; 0x48
 800897a:	9d06      	ldr	r5, [sp, #24]
 800897c:	9001      	str	r0, [sp, #4]
 800897e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008980:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008982:	9000      	str	r0, [sp, #0]
 8008984:	4628      	mov	r0, r5
 8008986:	f000 fdd1 	bl	800952c <forward_lite_dense_if32of32wf32>
 800898a:	462b      	mov	r3, r5
 800898c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800898e:	4413      	add	r3, r2
 8008990:	9306      	str	r3, [sp, #24]
 8008992:	e6f0      	b.n	8008776 <forward_dense+0x2e2>
 8008994:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8008998:	f1b9 0f00 	cmp.w	r9, #0
 800899c:	d016      	beq.n	80089cc <forward_dense+0x538>
 800899e:	e9d9 0100 	ldrd	r0, r1, [r9]
 80089a2:	f000 ffdf 	bl	8009964 <ai_array_get_byte_size>
 80089a6:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80089aa:	4602      	mov	r2, r0
 80089ac:	4659      	mov	r1, fp
 80089ae:	4640      	mov	r0, r8
 80089b0:	f000 fee4 	bl	800977c <st_int8_copy>
 80089b4:	e5c5      	b.n	8008542 <forward_dense+0xae>
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d00a      	beq.n	80089d0 <forward_dense+0x53c>
 80089ba:	f04f 0900 	mov.w	r9, #0
 80089be:	e5bb      	b.n	8008538 <forward_dense+0xa4>
 80089c0:	930d      	str	r3, [sp, #52]	; 0x34
 80089c2:	e593      	b.n	80084ec <forward_dense+0x58>
 80089c4:	2300      	movs	r3, #0
 80089c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80089c8:	460b      	mov	r3, r1
 80089ca:	e58f      	b.n	80084ec <forward_dense+0x58>
 80089cc:	46c3      	mov	fp, r8
 80089ce:	e5b8      	b.n	8008542 <forward_dense+0xae>
 80089d0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80089d4:	e5b5      	b.n	8008542 <forward_dense+0xae>
 80089d6:	2300      	movs	r3, #0
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	deff      	udf	#255	; 0xff
 80089dc:	2300      	movs	r3, #0
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	deff      	udf	#255	; 0xff
 80089e2:	bf00      	nop

080089e4 <forward_relu>:
 80089e4:	6982      	ldr	r2, [r0, #24]
 80089e6:	8813      	ldrh	r3, [r2, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d05c      	beq.n	8008aa6 <forward_relu+0xc2>
 80089ec:	6851      	ldr	r1, [r2, #4]
 80089ee:	684a      	ldr	r2, [r1, #4]
 80089f0:	b102      	cbz	r2, 80089f4 <forward_relu+0x10>
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	f000 811e 	beq.w	8008c36 <forward_relu+0x252>
 80089fa:	b470      	push	{r4, r5, r6}
 80089fc:	6909      	ldr	r1, [r1, #16]
 80089fe:	b101      	cbz	r1, 8008a02 <forward_relu+0x1e>
 8008a00:	6809      	ldr	r1, [r1, #0]
 8008a02:	69c6      	ldr	r6, [r0, #28]
 8008a04:	2e00      	cmp	r6, #0
 8008a06:	f000 8098 	beq.w	8008b3a <forward_relu+0x156>
 8008a0a:	6873      	ldr	r3, [r6, #4]
 8008a0c:	6988      	ldr	r0, [r1, #24]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	6991      	ldr	r1, [r2, #24]
 8008a12:	f000 80bc 	beq.w	8008b8e <forward_relu+0x1aa>
 8008a16:	6893      	ldr	r3, [r2, #8]
 8008a18:	6880      	ldr	r0, [r0, #8]
 8008a1a:	0a1b      	lsrs	r3, r3, #8
 8008a1c:	688c      	ldr	r4, [r1, #8]
 8008a1e:	f000 80ed 	beq.w	8008bfc <forward_relu+0x218>
 8008a22:	68d5      	ldr	r5, [r2, #12]
 8008a24:	2201      	movs	r2, #1
 8008a26:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008a2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a2e:	42ab      	cmp	r3, r5
 8008a30:	fb01 f202 	mul.w	r2, r1, r2
 8008a34:	d1f9      	bne.n	8008a2a <forward_relu+0x46>
 8008a36:	68b3      	ldr	r3, [r6, #8]
 8008a38:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008a3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a48:	f102 32ff 	add.w	r2, r2, #4294967295
 8008a4c:	edd3 6a00 	vldr	s13, [r3]
 8008a50:	ed93 6a01 	vldr	s12, [r3, #4]
 8008a54:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008a58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a5c:	d425      	bmi.n	8008aaa <forward_relu+0xc6>
 8008a5e:	429c      	cmp	r4, r3
 8008a60:	d81f      	bhi.n	8008aa2 <forward_relu+0xbe>
 8008a62:	1d1a      	adds	r2, r3, #4
 8008a64:	1d01      	adds	r1, r0, #4
 8008a66:	e00d      	b.n	8008a84 <forward_relu+0xa0>
 8008a68:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a70:	db03      	blt.n	8008a7a <forward_relu+0x96>
 8008a72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a76:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008a7a:	3b08      	subs	r3, #8
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008a82:	d80e      	bhi.n	8008aa2 <forward_relu+0xbe>
 8008a84:	4613      	mov	r3, r2
 8008a86:	ed72 7a01 	vldmdb	r2!, {s15}
 8008a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a92:	d9e9      	bls.n	8008a68 <forward_relu+0x84>
 8008a94:	eef0 7a47 	vmov.f32	s15, s14
 8008a98:	3b08      	subs	r3, #8
 8008a9a:	429c      	cmp	r4, r3
 8008a9c:	ed61 7a01 	vstmdb	r1!, {s15}
 8008aa0:	d9f0      	bls.n	8008a84 <forward_relu+0xa0>
 8008aa2:	bc70      	pop	{r4, r5, r6}
 8008aa4:	4770      	bx	lr
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	deff      	udf	#255	; 0xff
 8008aaa:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab2:	d11f      	bne.n	8008af4 <forward_relu+0x110>
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	d8f4      	bhi.n	8008aa2 <forward_relu+0xbe>
 8008ab8:	2500      	movs	r5, #0
 8008aba:	1b1c      	subs	r4, r3, r4
 8008abc:	f024 0403 	bic.w	r4, r4, #3
 8008ac0:	1d1a      	adds	r2, r3, #4
 8008ac2:	1d01      	adds	r1, r0, #4
 8008ac4:	1b1b      	subs	r3, r3, r4
 8008ac6:	ed72 7a01 	vldmdb	r2!, {s15}
 8008aca:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad2:	dc0a      	bgt.n	8008aea <forward_relu+0x106>
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	f841 5d04 	str.w	r5, [r1, #-4]!
 8008ada:	d0e2      	beq.n	8008aa2 <forward_relu+0xbe>
 8008adc:	ed72 7a01 	vldmdb	r2!, {s15}
 8008ae0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae8:	ddf4      	ble.n	8008ad4 <forward_relu+0xf0>
 8008aea:	429a      	cmp	r2, r3
 8008aec:	ed61 7a01 	vstmdb	r1!, {s15}
 8008af0:	d1e9      	bne.n	8008ac6 <forward_relu+0xe2>
 8008af2:	e7d6      	b.n	8008aa2 <forward_relu+0xbe>
 8008af4:	429c      	cmp	r4, r3
 8008af6:	d8d4      	bhi.n	8008aa2 <forward_relu+0xbe>
 8008af8:	1b1c      	subs	r4, r3, r4
 8008afa:	f024 0403 	bic.w	r4, r4, #3
 8008afe:	1d1a      	adds	r2, r3, #4
 8008b00:	1d01      	adds	r1, r0, #4
 8008b02:	1b1b      	subs	r3, r3, r4
 8008b04:	ed72 7a01 	vldmdb	r2!, {s15}
 8008b08:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b10:	db0e      	blt.n	8008b30 <forward_relu+0x14c>
 8008b12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	ed61 7a01 	vstmdb	r1!, {s15}
 8008b20:	d0bf      	beq.n	8008aa2 <forward_relu+0xbe>
 8008b22:	ed72 7a01 	vldmdb	r2!, {s15}
 8008b26:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2e:	daf0      	bge.n	8008b12 <forward_relu+0x12e>
 8008b30:	4293      	cmp	r3, r2
 8008b32:	ed61 7a01 	vstmdb	r1!, {s15}
 8008b36:	d1e5      	bne.n	8008b04 <forward_relu+0x120>
 8008b38:	e7b3      	b.n	8008aa2 <forward_relu+0xbe>
 8008b3a:	6893      	ldr	r3, [r2, #8]
 8008b3c:	6988      	ldr	r0, [r1, #24]
 8008b3e:	6991      	ldr	r1, [r2, #24]
 8008b40:	0a1b      	lsrs	r3, r3, #8
 8008b42:	6880      	ldr	r0, [r0, #8]
 8008b44:	688c      	ldr	r4, [r1, #8]
 8008b46:	d06f      	beq.n	8008c28 <forward_relu+0x244>
 8008b48:	2101      	movs	r1, #1
 8008b4a:	68d5      	ldr	r5, [r2, #12]
 8008b4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008b50:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008b54:	429d      	cmp	r5, r3
 8008b56:	fb02 f101 	mul.w	r1, r2, r1
 8008b5a:	d1f9      	bne.n	8008b50 <forward_relu+0x16c>
 8008b5c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8008b60:	3901      	subs	r1, #1
 8008b62:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 8008b66:	4294      	cmp	r4, r2
 8008b68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008b6c:	d899      	bhi.n	8008aa2 <forward_relu+0xbe>
 8008b6e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8008c3c <forward_relu+0x258>
 8008b72:	3204      	adds	r2, #4
 8008b74:	1d01      	adds	r1, r0, #4
 8008b76:	4613      	mov	r3, r2
 8008b78:	ed72 7a01 	vldmdb	r2!, {s15}
 8008b7c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008b80:	3b08      	subs	r3, #8
 8008b82:	429c      	cmp	r4, r3
 8008b84:	ed61 7a01 	vstmdb	r1!, {s15}
 8008b88:	d9f5      	bls.n	8008b76 <forward_relu+0x192>
 8008b8a:	bc70      	pop	{r4, r5, r6}
 8008b8c:	4770      	bx	lr
 8008b8e:	688c      	ldr	r4, [r1, #8]
 8008b90:	6891      	ldr	r1, [r2, #8]
 8008b92:	6880      	ldr	r0, [r0, #8]
 8008b94:	0a09      	lsrs	r1, r1, #8
 8008b96:	d049      	beq.n	8008c2c <forward_relu+0x248>
 8008b98:	68d5      	ldr	r5, [r2, #12]
 8008b9a:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8008b9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008ba2:	42aa      	cmp	r2, r5
 8008ba4:	fb01 f303 	mul.w	r3, r1, r3
 8008ba8:	d1f9      	bne.n	8008b9e <forward_relu+0x1ba>
 8008baa:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8008bae:	3a01      	subs	r2, #1
 8008bb0:	68b1      	ldr	r1, [r6, #8]
 8008bb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bb6:	429c      	cmp	r4, r3
 8008bb8:	ed91 7a00 	vldr	s14, [r1]
 8008bbc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008bc0:	f63f af6f 	bhi.w	8008aa2 <forward_relu+0xbe>
 8008bc4:	2500      	movs	r5, #0
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	1d02      	adds	r2, r0, #4
 8008bca:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd6:	f1a3 0104 	sub.w	r1, r3, #4
 8008bda:	f1a3 0308 	sub.w	r3, r3, #8
 8008bde:	d406      	bmi.n	8008bee <forward_relu+0x20a>
 8008be0:	429c      	cmp	r4, r3
 8008be2:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008be6:	f63f af5c 	bhi.w	8008aa2 <forward_relu+0xbe>
 8008bea:	460b      	mov	r3, r1
 8008bec:	e7ed      	b.n	8008bca <forward_relu+0x1e6>
 8008bee:	429c      	cmp	r4, r3
 8008bf0:	ed62 7a01 	vstmdb	r2!, {s15}
 8008bf4:	f63f af55 	bhi.w	8008aa2 <forward_relu+0xbe>
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	e7e6      	b.n	8008bca <forward_relu+0x1e6>
 8008bfc:	68b3      	ldr	r3, [r6, #8]
 8008bfe:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c02:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c0a:	edd3 6a00 	vldr	s13, [r3]
 8008c0e:	ed93 6a01 	vldr	s12, [r3, #4]
 8008c12:	d401      	bmi.n	8008c18 <forward_relu+0x234>
 8008c14:	4623      	mov	r3, r4
 8008c16:	e724      	b.n	8008a62 <forward_relu+0x7e>
 8008c18:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c20:	4623      	mov	r3, r4
 8008c22:	f47f af69 	bne.w	8008af8 <forward_relu+0x114>
 8008c26:	e747      	b.n	8008ab8 <forward_relu+0xd4>
 8008c28:	4622      	mov	r2, r4
 8008c2a:	e7a0      	b.n	8008b6e <forward_relu+0x18a>
 8008c2c:	68b2      	ldr	r2, [r6, #8]
 8008c2e:	4623      	mov	r3, r4
 8008c30:	ed92 7a00 	vldr	s14, [r2]
 8008c34:	e7c6      	b.n	8008bc4 <forward_relu+0x1e0>
 8008c36:	2300      	movs	r3, #0
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	deff      	udf	#255	; 0xff
 8008c3c:	00000000 	.word	0x00000000

08008c40 <forward_sm>:
 8008c40:	6982      	ldr	r2, [r0, #24]
 8008c42:	8813      	ldrh	r3, [r2, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d077      	beq.n	8008d38 <forward_sm+0xf8>
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	ed2d 8b04 	vpush	{d8-d9}
 8008c50:	6852      	ldr	r2, [r2, #4]
 8008c52:	b085      	sub	sp, #20
 8008c54:	6854      	ldr	r4, [r2, #4]
 8008c56:	b104      	cbz	r4, 8008c5a <forward_sm+0x1a>
 8008c58:	6824      	ldr	r4, [r4, #0]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d071      	beq.n	8008d42 <forward_sm+0x102>
 8008c5e:	6913      	ldr	r3, [r2, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d071      	beq.n	8008d48 <forward_sm+0x108>
 8008c64:	681e      	ldr	r6, [r3, #0]
 8008c66:	68a3      	ldr	r3, [r4, #8]
 8008c68:	68e0      	ldr	r0, [r4, #12]
 8008c6a:	68f2      	ldr	r2, [r6, #12]
 8008c6c:	0a1b      	lsrs	r3, r3, #8
 8008c6e:	6845      	ldr	r5, [r0, #4]
 8008c70:	6857      	ldr	r7, [r2, #4]
 8008c72:	d063      	beq.n	8008d3c <forward_sm+0xfc>
 8008c74:	2201      	movs	r2, #1
 8008c76:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008c7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c7e:	4298      	cmp	r0, r3
 8008c80:	fb01 f202 	mul.w	r2, r1, r2
 8008c84:	d1f9      	bne.n	8008c7a <forward_sm+0x3a>
 8008c86:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8008c8a:	69a2      	ldr	r2, [r4, #24]
 8008c8c:	69b3      	ldr	r3, [r6, #24]
 8008c8e:	6892      	ldr	r2, [r2, #8]
 8008c90:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008c94:	eb02 0309 	add.w	r3, r2, r9
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	d247      	bcs.n	8008d2e <forward_sm+0xee>
 8008c9e:	00bb      	lsls	r3, r7, #2
 8008ca0:	9303      	str	r3, [sp, #12]
 8008ca2:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8008ca6:	00ab      	lsls	r3, r5, #2
 8008ca8:	2d01      	cmp	r5, #1
 8008caa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008cae:	463e      	mov	r6, r7
 8008cb0:	ed92 8a00 	vldr	s16, [r2]
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	d937      	bls.n	8008d28 <forward_sm+0xe8>
 8008cb8:	1d13      	adds	r3, r2, #4
 8008cba:	ecf3 7a01 	vldmia	r3!, {s15}
 8008cbe:	429e      	cmp	r6, r3
 8008cc0:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8008cc4:	d1f9      	bne.n	8008cba <forward_sm+0x7a>
 8008cc6:	4692      	mov	sl, r2
 8008cc8:	46c3      	mov	fp, r8
 8008cca:	46c1      	mov	r9, r8
 8008ccc:	eddf 8a1f 	vldr	s17, [pc, #124]	; 8008d4c <forward_sm+0x10c>
 8008cd0:	2400      	movs	r4, #0
 8008cd2:	ecba 0a01 	vldmia	sl!, {s0}
 8008cd6:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008cda:	f001 fb47 	bl	800a36c <expf>
 8008cde:	3401      	adds	r4, #1
 8008ce0:	42a5      	cmp	r5, r4
 8008ce2:	eca9 0a01 	vstmia	r9!, {s0}
 8008ce6:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008cea:	d8f2      	bhi.n	8008cd2 <forward_sm+0x92>
 8008cec:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf4:	d00b      	beq.n	8008d0e <forward_sm+0xce>
 8008cf6:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	eddb 7a00 	vldr	s15, [fp]
 8008d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d04:	3301      	adds	r3, #1
 8008d06:	429d      	cmp	r5, r3
 8008d08:	eceb 7a01 	vstmia	fp!, {s15}
 8008d0c:	d8f6      	bhi.n	8008cfc <forward_sm+0xbc>
 8008d0e:	9b03      	ldr	r3, [sp, #12]
 8008d10:	9901      	ldr	r1, [sp, #4]
 8008d12:	4498      	add	r8, r3
 8008d14:	9b02      	ldr	r3, [sp, #8]
 8008d16:	42b9      	cmp	r1, r7
 8008d18:	463a      	mov	r2, r7
 8008d1a:	441e      	add	r6, r3
 8008d1c:	d907      	bls.n	8008d2e <forward_sm+0xee>
 8008d1e:	2d01      	cmp	r5, #1
 8008d20:	ed92 8a00 	vldr	s16, [r2]
 8008d24:	441f      	add	r7, r3
 8008d26:	d8c7      	bhi.n	8008cb8 <forward_sm+0x78>
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	d0f0      	beq.n	8008d0e <forward_sm+0xce>
 8008d2c:	e7cb      	b.n	8008cc6 <forward_sm+0x86>
 8008d2e:	b005      	add	sp, #20
 8008d30:	ecbd 8b04 	vpop	{d8-d9}
 8008d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	deff      	udf	#255	; 0xff
 8008d3c:	f04f 0904 	mov.w	r9, #4
 8008d40:	e7a3      	b.n	8008c8a <forward_sm+0x4a>
 8008d42:	2300      	movs	r3, #0
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	deff      	udf	#255	; 0xff
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	deff      	udf	#255	; 0xff
 8008d4c:	00000000 	.word	0x00000000

08008d50 <forward_bn>:
 8008d50:	6982      	ldr	r2, [r0, #24]
 8008d52:	8813      	ldrh	r3, [r2, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d056      	beq.n	8008e06 <forward_bn+0xb6>
 8008d58:	6852      	ldr	r2, [r2, #4]
 8008d5a:	6850      	ldr	r0, [r2, #4]
 8008d5c:	b100      	cbz	r0, 8008d60 <forward_bn+0x10>
 8008d5e:	6800      	ldr	r0, [r0, #0]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	f000 809e 	beq.w	8008ea2 <forward_bn+0x152>
 8008d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d6a:	6915      	ldr	r5, [r2, #16]
 8008d6c:	b105      	cbz	r5, 8008d70 <forward_bn+0x20>
 8008d6e:	682d      	ldr	r5, [r5, #0]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d04a      	beq.n	8008e0a <forward_bn+0xba>
 8008d74:	69d1      	ldr	r1, [r2, #28]
 8008d76:	2900      	cmp	r1, #0
 8008d78:	d04a      	beq.n	8008e10 <forward_bn+0xc0>
 8008d7a:	8b13      	ldrh	r3, [r2, #24]
 8008d7c:	f8d1 c000 	ldr.w	ip, [r1]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d946      	bls.n	8008e12 <forward_bn+0xc2>
 8008d84:	6883      	ldr	r3, [r0, #8]
 8008d86:	684f      	ldr	r7, [r1, #4]
 8008d88:	0a1b      	lsrs	r3, r3, #8
 8008d8a:	d079      	beq.n	8008e80 <forward_bn+0x130>
 8008d8c:	2401      	movs	r4, #1
 8008d8e:	68c1      	ldr	r1, [r0, #12]
 8008d90:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008d94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	fb02 f404 	mul.w	r4, r2, r4
 8008d9e:	d1f9      	bne.n	8008d94 <forward_bn+0x44>
 8008da0:	69aa      	ldr	r2, [r5, #24]
 8008da2:	6981      	ldr	r1, [r0, #24]
 8008da4:	685d      	ldr	r5, [r3, #4]
 8008da6:	6888      	ldr	r0, [r1, #8]
 8008da8:	6896      	ldr	r6, [r2, #8]
 8008daa:	2f00      	cmp	r7, #0
 8008dac:	d042      	beq.n	8008e34 <forward_bn+0xe4>
 8008dae:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8008db8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008dbc:	b30c      	cbz	r4, 8008e02 <forward_bn+0xb2>
 8008dbe:	f04f 0e00 	mov.w	lr, #0
 8008dc2:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 8008dc6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008dca:	00bf      	lsls	r7, r7, #2
 8008dcc:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8008dd0:	4672      	mov	r2, lr
 8008dd2:	44ae      	add	lr, r5
 8008dd4:	4596      	cmp	lr, r2
 8008dd6:	d911      	bls.n	8008dfc <forward_bn+0xac>
 8008dd8:	4648      	mov	r0, r9
 8008dda:	4641      	mov	r1, r8
 8008ddc:	eb07 030c 	add.w	r3, r7, ip
 8008de0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008de4:	ecf3 6a01 	vldmia	r3!, {s13}
 8008de8:	ecb0 7a01 	vldmia	r0!, {s14}
 8008dec:	ecf1 7a01 	vldmia	r1!, {s15}
 8008df0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008df4:	4563      	cmp	r3, ip
 8008df6:	ece2 7a01 	vstmia	r2!, {s15}
 8008dfa:	d1f3      	bne.n	8008de4 <forward_bn+0x94>
 8008dfc:	4574      	cmp	r4, lr
 8008dfe:	44d4      	add	ip, sl
 8008e00:	d8e6      	bhi.n	8008dd0 <forward_bn+0x80>
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	deff      	udf	#255	; 0xff
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	deff      	udf	#255	; 0xff
 8008e10:	468c      	mov	ip, r1
 8008e12:	6883      	ldr	r3, [r0, #8]
 8008e14:	0a1b      	lsrs	r3, r3, #8
 8008e16:	bf18      	it	ne
 8008e18:	2700      	movne	r7, #0
 8008e1a:	d1b7      	bne.n	8008d8c <forward_bn+0x3c>
 8008e1c:	68c1      	ldr	r1, [r0, #12]
 8008e1e:	69ab      	ldr	r3, [r5, #24]
 8008e20:	6982      	ldr	r2, [r0, #24]
 8008e22:	684d      	ldr	r5, [r1, #4]
 8008e24:	6890      	ldr	r0, [r2, #8]
 8008e26:	689e      	ldr	r6, [r3, #8]
 8008e28:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8008e2c:	2401      	movs	r4, #1
 8008e2e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008e32:	e005      	b.n	8008e40 <forward_bn+0xf0>
 8008e34:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8008e38:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008e3c:	2c00      	cmp	r4, #0
 8008e3e:	d0e0      	beq.n	8008e02 <forward_bn+0xb2>
 8008e40:	f04f 0c00 	mov.w	ip, #0
 8008e44:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 8008e48:	46b6      	mov	lr, r6
 8008e4a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8008e4e:	00bf      	lsls	r7, r7, #2
 8008e50:	00ae      	lsls	r6, r5, #2
 8008e52:	4663      	mov	r3, ip
 8008e54:	44ac      	add	ip, r5
 8008e56:	4563      	cmp	r3, ip
 8008e58:	d20c      	bcs.n	8008e74 <forward_bn+0x124>
 8008e5a:	4641      	mov	r1, r8
 8008e5c:	4672      	mov	r2, lr
 8008e5e:	19c3      	adds	r3, r0, r7
 8008e60:	ecf3 7a01 	vldmia	r3!, {s15}
 8008e64:	ecb1 7a01 	vldmia	r1!, {s14}
 8008e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e6c:	4298      	cmp	r0, r3
 8008e6e:	ece2 7a01 	vstmia	r2!, {s15}
 8008e72:	d1f5      	bne.n	8008e60 <forward_bn+0x110>
 8008e74:	4564      	cmp	r4, ip
 8008e76:	44b6      	add	lr, r6
 8008e78:	4430      	add	r0, r6
 8008e7a:	d8ea      	bhi.n	8008e52 <forward_bn+0x102>
 8008e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e80:	68c1      	ldr	r1, [r0, #12]
 8008e82:	69ab      	ldr	r3, [r5, #24]
 8008e84:	6982      	ldr	r2, [r0, #24]
 8008e86:	684d      	ldr	r5, [r1, #4]
 8008e88:	6890      	ldr	r0, [r2, #8]
 8008e8a:	689e      	ldr	r6, [r3, #8]
 8008e8c:	2f00      	cmp	r7, #0
 8008e8e:	d0cb      	beq.n	8008e28 <forward_bn+0xd8>
 8008e90:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2401      	movs	r4, #1
 8008e98:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8008e9c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008ea0:	e78d      	b.n	8008dbe <forward_bn+0x6e>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	deff      	udf	#255	; 0xff

08008ea8 <forward_mp>:
 8008ea8:	6983      	ldr	r3, [r0, #24]
 8008eaa:	881a      	ldrh	r2, [r3, #0]
 8008eac:	2a00      	cmp	r2, #0
 8008eae:	f000 80b9 	beq.w	8009024 <forward_mp+0x17c>
 8008eb2:	6859      	ldr	r1, [r3, #4]
 8008eb4:	684b      	ldr	r3, [r1, #4]
 8008eb6:	b103      	cbz	r3, 8008eba <forward_mp+0x12>
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2a01      	cmp	r2, #1
 8008ebc:	f000 80b4 	beq.w	8009028 <forward_mp+0x180>
 8008ec0:	690a      	ldr	r2, [r1, #16]
 8008ec2:	2a00      	cmp	r2, #0
 8008ec4:	f000 80b3 	beq.w	800902e <forward_mp+0x186>
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	6811      	ldr	r1, [r2, #0]
 8008ece:	b093      	sub	sp, #76	; 0x4c
 8008ed0:	68ca      	ldr	r2, [r1, #12]
 8008ed2:	6989      	ldr	r1, [r1, #24]
 8008ed4:	68d4      	ldr	r4, [r2, #12]
 8008ed6:	6895      	ldr	r5, [r2, #8]
 8008ed8:	688a      	ldr	r2, [r1, #8]
 8008eda:	68d9      	ldr	r1, [r3, #12]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	9200      	str	r2, [sp, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008ee4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ee6:	e9d2 3600 	ldrd	r3, r6, [r2]
 8008eea:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 8008eee:	9705      	str	r7, [sp, #20]
 8008ef0:	684f      	ldr	r7, [r1, #4]
 8008ef2:	69c1      	ldr	r1, [r0, #28]
 8008ef4:	9409      	str	r4, [sp, #36]	; 0x24
 8008ef6:	910a      	str	r1, [sp, #40]	; 0x28
 8008ef8:	6a01      	ldr	r1, [r0, #32]
 8008efa:	9504      	str	r5, [sp, #16]
 8008efc:	910b      	str	r1, [sp, #44]	; 0x2c
 8008efe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008f00:	960e      	str	r6, [sp, #56]	; 0x38
 8008f02:	910c      	str	r1, [sp, #48]	; 0x30
 8008f04:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008f06:	f1c3 0900 	rsb	r9, r3, #0
 8008f0a:	910d      	str	r1, [sp, #52]	; 0x34
 8008f0c:	2c00      	cmp	r4, #0
 8008f0e:	f000 8086 	beq.w	800901e <forward_mp+0x176>
 8008f12:	441a      	add	r2, r3
 8008f14:	9201      	str	r2, [sp, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	9b05      	ldr	r3, [sp, #20]
 8008f1a:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8008f1e:	fb07 f303 	mul.w	r3, r7, r3
 8008f22:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8008f26:	fb05 f30b 	mul.w	r3, r5, fp
 8008f2a:	9310      	str	r3, [sp, #64]	; 0x40
 8008f2c:	4273      	negs	r3, r6
 8008f2e:	9206      	str	r2, [sp, #24]
 8008f30:	9311      	str	r3, [sp, #68]	; 0x44
 8008f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f34:	9a01      	ldr	r2, [sp, #4]
 8008f36:	4293      	cmp	r3, r2
 8008f38:	bf94      	ite	ls
 8008f3a:	eb09 0e03 	addls.w	lr, r9, r3
 8008f3e:	eb09 0e02 	addhi.w	lr, r9, r2
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
 8008f48:	9208      	str	r2, [sp, #32]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d05c      	beq.n	8009008 <forward_mp+0x160>
 8008f4e:	2100      	movs	r1, #0
 8008f50:	9107      	str	r1, [sp, #28]
 8008f52:	9905      	ldr	r1, [sp, #20]
 8008f54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f56:	fb01 f202 	mul.w	r2, r1, r2
 8008f5a:	9203      	str	r2, [sp, #12]
 8008f5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f5e:	9d00      	ldr	r5, [sp, #0]
 8008f60:	188a      	adds	r2, r1, r2
 8008f62:	9202      	str	r2, [sp, #8]
 8008f64:	469a      	mov	sl, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfaa      	itet	ge
 8008f6a:	9a03      	ldrge	r2, [sp, #12]
 8008f6c:	9e03      	ldrlt	r6, [sp, #12]
 8008f6e:	18d6      	addge	r6, r2, r3
 8008f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f72:	9902      	ldr	r1, [sp, #8]
 8008f74:	fb06 260b 	mla	r6, r6, fp, r2
 8008f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f7a:	bfb8      	it	lt
 8008f7c:	2300      	movlt	r3, #0
 8008f7e:	428a      	cmp	r2, r1
 8008f80:	bf94      	ite	ls
 8008f82:	eb0a 0402 	addls.w	r4, sl, r2
 8008f86:	eb0a 0401 	addhi.w	r4, sl, r1
 8008f8a:	1ae4      	subs	r4, r4, r3
 8008f8c:	b14f      	cbz	r7, 8008fa2 <forward_mp+0xfa>
 8008f8e:	4633      	mov	r3, r6
 8008f90:	462a      	mov	r2, r5
 8008f92:	eb0b 0106 	add.w	r1, fp, r6
 8008f96:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	f842 0b04 	str.w	r0, [r2], #4
 8008fa0:	d1f9      	bne.n	8008f96 <forward_mp+0xee>
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	459e      	cmp	lr, r3
 8008fa6:	dd1e      	ble.n	8008fe6 <forward_mp+0x13e>
 8008fa8:	469c      	mov	ip, r3
 8008faa:	fb0b 6404 	mla	r4, fp, r4, r6
 8008fae:	42a6      	cmp	r6, r4
 8008fb0:	d213      	bcs.n	8008fda <forward_mp+0x132>
 8008fb2:	b197      	cbz	r7, 8008fda <forward_mp+0x132>
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	eb06 010b 	add.w	r1, r6, fp
 8008fba:	4602      	mov	r2, r0
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	ecf2 7a01 	vldmia	r2!, {s15}
 8008fc2:	ed93 7a00 	vldr	s14, [r3]
 8008fc6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008fca:	428a      	cmp	r2, r1
 8008fcc:	ece3 7a01 	vstmia	r3!, {s15}
 8008fd0:	d1f5      	bne.n	8008fbe <forward_mp+0x116>
 8008fd2:	4458      	add	r0, fp
 8008fd4:	42a0      	cmp	r0, r4
 8008fd6:	4459      	add	r1, fp
 8008fd8:	d3ef      	bcc.n	8008fba <forward_mp+0x112>
 8008fda:	f10c 0c01 	add.w	ip, ip, #1
 8008fde:	45e6      	cmp	lr, ip
 8008fe0:	4446      	add	r6, r8
 8008fe2:	4444      	add	r4, r8
 8008fe4:	d1e3      	bne.n	8008fae <forward_mp+0x106>
 8008fe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fe8:	9802      	ldr	r0, [sp, #8]
 8008fea:	9a07      	ldr	r2, [sp, #28]
 8008fec:	eb01 030a 	add.w	r3, r1, sl
 8008ff0:	1a41      	subs	r1, r0, r1
 8008ff2:	9102      	str	r1, [sp, #8]
 8008ff4:	9904      	ldr	r1, [sp, #16]
 8008ff6:	3201      	adds	r2, #1
 8008ff8:	4291      	cmp	r1, r2
 8008ffa:	9207      	str	r2, [sp, #28]
 8008ffc:	445d      	add	r5, fp
 8008ffe:	d1b1      	bne.n	8008f64 <forward_mp+0xbc>
 8009000:	9b00      	ldr	r3, [sp, #0]
 8009002:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009004:	4413      	add	r3, r2
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800900a:	9901      	ldr	r1, [sp, #4]
 800900c:	9b06      	ldr	r3, [sp, #24]
 800900e:	4491      	add	r9, r2
 8009010:	1a8a      	subs	r2, r1, r2
 8009012:	9201      	str	r2, [sp, #4]
 8009014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009016:	3301      	adds	r3, #1
 8009018:	429a      	cmp	r2, r3
 800901a:	9306      	str	r3, [sp, #24]
 800901c:	d189      	bne.n	8008f32 <forward_mp+0x8a>
 800901e:	b013      	add	sp, #76	; 0x4c
 8009020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009024:	6853      	ldr	r3, [r2, #4]
 8009026:	deff      	udf	#255	; 0xff
 8009028:	2300      	movs	r3, #0
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	deff      	udf	#255	; 0xff
 800902e:	68d3      	ldr	r3, [r2, #12]
 8009030:	deff      	udf	#255	; 0xff
 8009032:	bf00      	nop

08009034 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8009034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009038:	ed2d 8b10 	vpush	{d8-d15}
 800903c:	b08f      	sub	sp, #60	; 0x3c
 800903e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
 8009042:	fb05 f404 	mul.w	r4, r5, r4
 8009046:	9004      	str	r0, [sp, #16]
 8009048:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800904a:	f8bd 00bc 	ldrh.w	r0, [sp, #188]	; 0xbc
 800904e:	9405      	str	r4, [sp, #20]
 8009050:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8009054:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8009056:	f8dd b0b4 	ldr.w	fp, [sp, #180]	; 0xb4
 800905a:	910d      	str	r1, [sp, #52]	; 0x34
 800905c:	9208      	str	r2, [sp, #32]
 800905e:	930a      	str	r3, [sp, #40]	; 0x28
 8009060:	900b      	str	r0, [sp, #44]	; 0x2c
 8009062:	2d00      	cmp	r5, #0
 8009064:	f000 80f1 	beq.w	800924a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8009068:	461a      	mov	r2, r3
 800906a:	00a4      	lsls	r4, r4, #2
 800906c:	9406      	str	r4, [sp, #24]
 800906e:	2400      	movs	r4, #0
 8009070:	fb00 f303 	mul.w	r3, r0, r3
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	9307      	str	r3, [sp, #28]
 8009078:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800907a:	9403      	str	r4, [sp, #12]
 800907c:	fb03 f302 	mul.w	r3, r3, r2
 8009080:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009084:	9302      	str	r3, [sp, #8]
 8009086:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009088:	425b      	negs	r3, r3
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	0093      	lsls	r3, r2, #2
 800908e:	930c      	str	r3, [sp, #48]	; 0x30
 8009090:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009092:	2b00      	cmp	r3, #0
 8009094:	f2c0 80de 	blt.w	8009254 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x220>
 8009098:	f04f 0e00 	mov.w	lr, #0
 800909c:	9e02      	ldr	r6, [sp, #8]
 800909e:	9d05      	ldr	r5, [sp, #20]
 80090a0:	9b08      	ldr	r3, [sp, #32]
 80090a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090a4:	9901      	ldr	r1, [sp, #4]
 80090a6:	fb05 3502 	mla	r5, r5, r2, r3
 80090aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80090ac:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 80090b0:	440b      	add	r3, r1
 80090b2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80090b4:	428b      	cmp	r3, r1
 80090b6:	bf94      	ite	ls
 80090b8:	ebce 0e03 	rsbls	lr, lr, r3
 80090bc:	ebce 0e01 	rsbhi	lr, lr, r1
 80090c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c2:	f1bb 0f00 	cmp.w	fp, #0
 80090c6:	fb0e f003 	mul.w	r0, lr, r3
 80090ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80090cc:	eba3 0a0e 	sub.w	sl, r3, lr
 80090d0:	eba1 0e0e 	sub.w	lr, r1, lr
 80090d4:	f340 80a1 	ble.w	800921a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1e6>
 80090d8:	f04f 0c00 	mov.w	ip, #0
 80090dc:	f020 040f 	bic.w	r4, r0, #15
 80090e0:	f104 39ff 	add.w	r9, r4, #4294967295
 80090e4:	fb02 fa0a 	mul.w	sl, r2, sl
 80090e8:	fb02 fe0e 	mul.w	lr, r2, lr
 80090ec:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80090f0:	f109 0901 	add.w	r9, r9, #1
 80090f4:	ea4f 1889 	mov.w	r8, r9, lsl #6
 80090f8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80090fc:	2c00      	cmp	r4, #0
 80090fe:	bfd8      	it	le
 8009100:	2700      	movle	r7, #0
 8009102:	dd70      	ble.n	80091e6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8009104:	2100      	movs	r1, #0
 8009106:	f106 0240 	add.w	r2, r6, #64	; 0x40
 800910a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800910e:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8009112:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009116:	ed52 fa10 	vldr	s31, [r2, #-64]	; 0xffffffc0
 800911a:	ed13 fa10 	vldr	s30, [r3, #-64]	; 0xffffffc0
 800911e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009122:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 8009126:	ed13 ea0e 	vldr	s28, [r3, #-56]	; 0xffffffc8
 800912a:	eeef 7a8f 	vfma.f32	s15, s31, s30
 800912e:	ed52 da0d 	vldr	s27, [r2, #-52]	; 0xffffffcc
 8009132:	ed13 da0d 	vldr	s26, [r3, #-52]	; 0xffffffcc
 8009136:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800913a:	ed52 ca0c 	vldr	s25, [r2, #-48]	; 0xffffffd0
 800913e:	ed13 ca0c 	vldr	s24, [r3, #-48]	; 0xffffffd0
 8009142:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009146:	ed52 ba0b 	vldr	s23, [r2, #-44]	; 0xffffffd4
 800914a:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800914e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009152:	ed52 aa0a 	vldr	s21, [r2, #-40]	; 0xffffffd8
 8009156:	ed13 aa0a 	vldr	s20, [r3, #-40]	; 0xffffffd8
 800915a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800915e:	ed52 9a09 	vldr	s19, [r2, #-36]	; 0xffffffdc
 8009162:	ed13 9a09 	vldr	s18, [r3, #-36]	; 0xffffffdc
 8009166:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800916a:	ed52 8a08 	vldr	s17, [r2, #-32]	; 0xffffffe0
 800916e:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8009172:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009176:	ed12 0a07 	vldr	s0, [r2, #-28]	; 0xffffffe4
 800917a:	ed53 0a07 	vldr	s1, [r3, #-28]	; 0xffffffe4
 800917e:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009182:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8009186:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800918a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800918e:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8009192:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8009196:	eee1 7a21 	vfma.f32	s15, s2, s3
 800919a:	ed12 3a04 	vldr	s6, [r2, #-16]
 800919e:	ed53 3a04 	vldr	s7, [r3, #-16]
 80091a2:	eee2 7a22 	vfma.f32	s15, s4, s5
 80091a6:	ed12 4a03 	vldr	s8, [r2, #-12]
 80091aa:	ed53 4a03 	vldr	s9, [r3, #-12]
 80091ae:	eee3 7a23 	vfma.f32	s15, s6, s7
 80091b2:	ed12 5a02 	vldr	s10, [r2, #-8]
 80091b6:	ed53 5a02 	vldr	s11, [r3, #-8]
 80091ba:	eee4 7a24 	vfma.f32	s15, s8, s9
 80091be:	ed12 6a01 	vldr	s12, [r2, #-4]
 80091c2:	ed53 6a01 	vldr	s13, [r3, #-4]
 80091c6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80091ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 80091ce:	3110      	adds	r1, #16
 80091d0:	42a1      	cmp	r1, r4
 80091d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091d6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80091da:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80091de:	db96      	blt.n	800910e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xda>
 80091e0:	464f      	mov	r7, r9
 80091e2:	4446      	add	r6, r8
 80091e4:	4445      	add	r5, r8
 80091e6:	42b8      	cmp	r0, r7
 80091e8:	dd10      	ble.n	800920c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1d8>
 80091ea:	463b      	mov	r3, r7
 80091ec:	4631      	mov	r1, r6
 80091ee:	462a      	mov	r2, r5
 80091f0:	ecf2 6a01 	vldmia	r2!, {s13}
 80091f4:	ecf1 7a01 	vldmia	r1!, {s15}
 80091f8:	3301      	adds	r3, #1
 80091fa:	4298      	cmp	r0, r3
 80091fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009200:	d1f6      	bne.n	80091f0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1bc>
 8009202:	1bc7      	subs	r7, r0, r7
 8009204:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8009208:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800920c:	f10c 0c01 	add.w	ip, ip, #1
 8009210:	45dc      	cmp	ip, fp
 8009212:	4456      	add	r6, sl
 8009214:	4475      	add	r5, lr
 8009216:	f47f af71 	bne.w	80090fc <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc8>
 800921a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800921c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800921e:	9a04      	ldr	r2, [sp, #16]
 8009220:	4401      	add	r1, r0
 8009222:	912e      	str	r1, [sp, #184]	; 0xb8
 8009224:	9906      	ldr	r1, [sp, #24]
 8009226:	ed82 7a00 	vstr	s14, [r2]
 800922a:	440a      	add	r2, r1
 800922c:	9204      	str	r2, [sp, #16]
 800922e:	9a01      	ldr	r2, [sp, #4]
 8009230:	9907      	ldr	r1, [sp, #28]
 8009232:	1a12      	subs	r2, r2, r0
 8009234:	9201      	str	r2, [sp, #4]
 8009236:	9a02      	ldr	r2, [sp, #8]
 8009238:	9b03      	ldr	r3, [sp, #12]
 800923a:	440a      	add	r2, r1
 800923c:	9202      	str	r2, [sp, #8]
 800923e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009240:	3301      	adds	r3, #1
 8009242:	4293      	cmp	r3, r2
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	f47f af23 	bne.w	8009090 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x5c>
 800924a:	b00f      	add	sp, #60	; 0x3c
 800924c:	ecbd 8b10 	vpop	{d8-d15}
 8009250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009254:	9a01      	ldr	r2, [sp, #4]
 8009256:	9b05      	ldr	r3, [sp, #20]
 8009258:	4696      	mov	lr, r2
 800925a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800925c:	189d      	adds	r5, r3, r2
 800925e:	e71f      	b.n	80090a0 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x6c>

08009260 <forward_lite_conv2d_if32of32wf32>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	ed2d 8b02 	vpush	{d8}
 8009268:	b09f      	sub	sp, #124	; 0x7c
 800926a:	461e      	mov	r6, r3
 800926c:	af08      	add	r7, sp, #32
 800926e:	f8b7 50ac 	ldrh.w	r5, [r7, #172]	; 0xac
 8009272:	62b9      	str	r1, [r7, #40]	; 0x28
 8009274:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8009278:	4686      	mov	lr, r0
 800927a:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 800927e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8009280:	4269      	negs	r1, r5
 8009282:	6038      	str	r0, [r7, #0]
 8009284:	63fe      	str	r6, [r7, #60]	; 0x3c
 8009286:	4608      	mov	r0, r1
 8009288:	f8b7 60b4 	ldrh.w	r6, [r7, #180]	; 0xb4
 800928c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800928e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009292:	4694      	mov	ip, r2
 8009294:	60fa      	str	r2, [r7, #12]
 8009296:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800929a:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 800929e:	613e      	str	r6, [r7, #16]
 80092a0:	2900      	cmp	r1, #0
 80092a2:	f000 8092 	beq.w	80093ca <forward_lite_conv2d_if32of32wf32+0x16a>
 80092a6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80092aa:	633d      	str	r5, [r7, #48]	; 0x30
 80092ac:	fb01 f404 	mul.w	r4, r1, r4
 80092b0:	4251      	negs	r1, r2
 80092b2:	6539      	str	r1, [r7, #80]	; 0x50
 80092b4:	2100      	movs	r1, #0
 80092b6:	fb03 f404 	mul.w	r4, r3, r4
 80092ba:	6239      	str	r1, [r7, #32]
 80092bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092c4:	fb03 f201 	mul.w	r2, r3, r1
 80092c8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80092cc:	4655      	mov	r5, sl
 80092ce:	fb01 f10a 	mul.w	r1, r1, sl
 80092d2:	ed9f 8a95 	vldr	s16, [pc, #596]	; 8009528 <forward_lite_conv2d_if32of32wf32+0x2c8>
 80092d6:	46da      	mov	sl, fp
 80092d8:	0089      	lsls	r1, r1, #2
 80092da:	6179      	str	r1, [r7, #20]
 80092dc:	fb06 f102 	mul.w	r1, r6, r2
 80092e0:	fb00 f202 	mul.w	r2, r0, r2
 80092e4:	0089      	lsls	r1, r1, #2
 80092e6:	61b9      	str	r1, [r7, #24]
 80092e8:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 80092ec:	f10b 0207 	add.w	r2, fp, #7
 80092f0:	6279      	str	r1, [r7, #36]	; 0x24
 80092f2:	f022 0107 	bic.w	r1, r2, #7
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 80092fc:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 8009300:	637c      	str	r4, [r7, #52]	; 0x34
 8009302:	61f9      	str	r1, [r7, #28]
 8009304:	607a      	str	r2, [r7, #4]
 8009306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009308:	2a00      	cmp	r2, #0
 800930a:	f2c0 80d9 	blt.w	80094c0 <forward_lite_conv2d_if32of32wf32+0x260>
 800930e:	2200      	movs	r2, #0
 8009310:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8009314:	657a      	str	r2, [r7, #84]	; 0x54
 8009316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009318:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800931c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8009320:	440a      	add	r2, r1
 8009322:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009324:	4282      	cmp	r2, r0
 8009326:	bf94      	ite	ls
 8009328:	ebc1 0102 	rsbls	r1, r1, r2
 800932c:	ebc1 0100 	rsbhi	r1, r1, r0
 8009330:	69fa      	ldr	r2, [r7, #28]
 8009332:	6439      	str	r1, [r7, #64]	; 0x40
 8009334:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009338:	d24d      	bcs.n	80093d6 <forward_lite_conv2d_if32of32wf32+0x176>
 800933a:	b385      	cbz	r5, 800939e <forward_lite_conv2d_if32of32wf32+0x13e>
 800933c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800933e:	2a00      	cmp	r2, #0
 8009340:	f000 80c3 	beq.w	80094ca <forward_lite_conv2d_if32of32wf32+0x26a>
 8009344:	4691      	mov	r9, r2
 8009346:	2400      	movs	r4, #0
 8009348:	4659      	mov	r1, fp
 800934a:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
 800934e:	46d3      	mov	fp, sl
 8009350:	68fe      	ldr	r6, [r7, #12]
 8009352:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8009356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009358:	ecb9 0a01 	vldmia	r9!, {s0}
 800935c:	9207      	str	r2, [sp, #28]
 800935e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009360:	4640      	mov	r0, r8
 8009362:	e9cd a205 	strd	sl, r2, [sp, #20]
 8009366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009368:	3401      	adds	r4, #1
 800936a:	9204      	str	r2, [sp, #16]
 800936c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009370:	f108 0804 	add.w	r8, r8, #4
 8009374:	9203      	str	r2, [sp, #12]
 8009376:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800937a:	9202      	str	r2, [sp, #8]
 800937c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009380:	e9cd 5200 	strd	r5, r2, [sp]
 8009384:	4632      	mov	r2, r6
 8009386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800938a:	64b9      	str	r1, [r7, #72]	; 0x48
 800938c:	f7ff fe52 	bl	8009034 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8009390:	42a5      	cmp	r5, r4
 8009392:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009398:	445e      	add	r6, fp
 800939a:	d1dc      	bne.n	8009356 <forward_lite_conv2d_if32of32wf32+0xf6>
 800939c:	46da      	mov	sl, fp
 800939e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093a0:	6978      	ldr	r0, [r7, #20]
 80093a2:	6a3a      	ldr	r2, [r7, #32]
 80093a4:	4401      	add	r1, r0
 80093a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80093a8:	6938      	ldr	r0, [r7, #16]
 80093aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093ac:	3201      	adds	r2, #1
 80093ae:	4401      	add	r1, r0
 80093b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80093b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093b4:	623a      	str	r2, [r7, #32]
 80093b6:	1a09      	subs	r1, r1, r0
 80093b8:	6339      	str	r1, [r7, #48]	; 0x30
 80093ba:	69b8      	ldr	r0, [r7, #24]
 80093bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093be:	4401      	add	r1, r0
 80093c0:	6279      	str	r1, [r7, #36]	; 0x24
 80093c2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80093c6:	4291      	cmp	r1, r2
 80093c8:	d19d      	bne.n	8009306 <forward_lite_conv2d_if32of32wf32+0xa6>
 80093ca:	375c      	adds	r7, #92	; 0x5c
 80093cc:	46bd      	mov	sp, r7
 80093ce:	ecbd 8b02 	vpop	{d8}
 80093d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d6:	466a      	mov	r2, sp
 80093d8:	ee08 2a90 	vmov	s17, r2
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	ebad 0d02 	sub.w	sp, sp, r2
 80093e2:	aa08      	add	r2, sp, #32
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	d067      	beq.n	80094b8 <forward_lite_conv2d_if32of32wf32+0x258>
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	4659      	mov	r1, fp
 80093ec:	f04f 0800 	mov.w	r8, #0
 80093f0:	46ab      	mov	fp, r5
 80093f2:	4605      	mov	r5, r0
 80093f4:	687c      	ldr	r4, [r7, #4]
 80093f6:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
 80093fa:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 80093fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093fe:	b138      	cbz	r0, 8009410 <forward_lite_conv2d_if32of32wf32+0x1b0>
 8009400:	4628      	mov	r0, r5
 8009402:	4694      	mov	ip, r2
 8009404:	f850 eb04 	ldr.w	lr, [r0], #4
 8009408:	42a0      	cmp	r0, r4
 800940a:	f84c eb04 	str.w	lr, [ip], #4
 800940e:	d1f9      	bne.n	8009404 <forward_lite_conv2d_if32of32wf32+0x1a4>
 8009410:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009412:	b348      	cbz	r0, 8009468 <forward_lite_conv2d_if32of32wf32+0x208>
 8009414:	ecb6 0a01 	vldmia	r6!, {s0}
 8009418:	63be      	str	r6, [r7, #56]	; 0x38
 800941a:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800941c:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8009420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009424:	9607      	str	r6, [sp, #28]
 8009426:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8009428:	4648      	mov	r0, r9
 800942a:	9606      	str	r6, [sp, #24]
 800942c:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800942e:	f108 0801 	add.w	r8, r8, #1
 8009432:	9605      	str	r6, [sp, #20]
 8009434:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 8009436:	4455      	add	r5, sl
 8009438:	9604      	str	r6, [sp, #16]
 800943a:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800943e:	4454      	add	r4, sl
 8009440:	9603      	str	r6, [sp, #12]
 8009442:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8009446:	f109 0904 	add.w	r9, r9, #4
 800944a:	9602      	str	r6, [sp, #8]
 800944c:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
 8009450:	e9cd b600 	strd	fp, r6, [sp]
 8009454:	f7ff fdee 	bl	8009034 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8009458:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 800945c:	45d8      	cmp	r8, fp
 800945e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009462:	d028      	beq.n	80094b6 <forward_lite_conv2d_if32of32wf32+0x256>
 8009464:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8009466:	e7c9      	b.n	80093fc <forward_lite_conv2d_if32of32wf32+0x19c>
 8009468:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800946a:	eeb0 0a48 	vmov.f32	s0, s16
 800946e:	9007      	str	r0, [sp, #28]
 8009470:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009472:	f108 0801 	add.w	r8, r8, #1
 8009476:	9006      	str	r0, [sp, #24]
 8009478:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800947a:	4455      	add	r5, sl
 800947c:	9005      	str	r0, [sp, #20]
 800947e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009480:	4454      	add	r4, sl
 8009482:	9004      	str	r0, [sp, #16]
 8009484:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009488:	9003      	str	r0, [sp, #12]
 800948a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800948e:	9002      	str	r0, [sp, #8]
 8009490:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8009494:	e9cd b000 	strd	fp, r0, [sp]
 8009498:	4648      	mov	r0, r9
 800949a:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 800949e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094a2:	f7ff fdc7 	bl	8009034 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80094a6:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 80094aa:	45c3      	cmp	fp, r8
 80094ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094b0:	f109 0904 	add.w	r9, r9, #4
 80094b4:	d1a2      	bne.n	80093fc <forward_lite_conv2d_if32of32wf32+0x19c>
 80094b6:	465d      	mov	r5, fp
 80094b8:	ee18 2a90 	vmov	r2, s17
 80094bc:	4695      	mov	sp, r2
 80094be:	e76e      	b.n	800939e <forward_lite_conv2d_if32of32wf32+0x13e>
 80094c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094c2:	f8d7 b000 	ldr.w	fp, [r7]
 80094c6:	657a      	str	r2, [r7, #84]	; 0x54
 80094c8:	e725      	b.n	8009316 <forward_lite_conv2d_if32of32wf32+0xb6>
 80094ca:	4614      	mov	r4, r2
 80094cc:	4659      	mov	r1, fp
 80094ce:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
 80094d2:	46d3      	mov	fp, sl
 80094d4:	68fe      	ldr	r6, [r7, #12]
 80094d6:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 80094da:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 80094de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094e0:	4640      	mov	r0, r8
 80094e2:	9207      	str	r2, [sp, #28]
 80094e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094e6:	f8cd 9010 	str.w	r9, [sp, #16]
 80094ea:	e9cd a205 	strd	sl, r2, [sp, #20]
 80094ee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80094f2:	eeb0 0a48 	vmov.f32	s0, s16
 80094f6:	9203      	str	r2, [sp, #12]
 80094f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80094fc:	3401      	adds	r4, #1
 80094fe:	9202      	str	r2, [sp, #8]
 8009500:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009504:	f108 0804 	add.w	r8, r8, #4
 8009508:	e9cd 5200 	strd	r5, r2, [sp]
 800950c:	4632      	mov	r2, r6
 800950e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009512:	6579      	str	r1, [r7, #84]	; 0x54
 8009514:	f7ff fd8e 	bl	8009034 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8009518:	42a5      	cmp	r5, r4
 800951a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800951c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009520:	445e      	add	r6, fp
 8009522:	d1dc      	bne.n	80094de <forward_lite_conv2d_if32of32wf32+0x27e>
 8009524:	e73a      	b.n	800939c <forward_lite_conv2d_if32of32wf32+0x13c>
 8009526:	bf00      	nop
 8009528:	00000000 	.word	0x00000000

0800952c <forward_lite_dense_if32of32wf32>:
 800952c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	ed2d 8b10 	vpush	{d8-d15}
 8009534:	e9dd 6419 	ldrd	r6, r4, [sp, #100]	; 0x64
 8009538:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800953c:	4287      	cmp	r7, r0
 800953e:	f240 8106 	bls.w	800974e <forward_lite_dense_if32of32wf32+0x222>
 8009542:	4605      	mov	r5, r0
 8009544:	f1a6 0810 	sub.w	r8, r6, #16
 8009548:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800954c:	f108 0801 	add.w	r8, r8, #1
 8009550:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009554:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8009558:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800955c:	f006 0a0f 	and.w	sl, r6, #15
 8009560:	2e0f      	cmp	r6, #15
 8009562:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8009778 <forward_lite_dense_if32of32wf32+0x24c>
 8009566:	f240 8103 	bls.w	8009770 <forward_lite_dense_if32of32wf32+0x244>
 800956a:	46b6      	mov	lr, r6
 800956c:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8009570:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8009574:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8009578:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800957c:	ed5c fa10 	vldr	s31, [ip, #-64]	; 0xffffffc0
 8009580:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8009584:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009588:	ed5c ea0e 	vldr	s29, [ip, #-56]	; 0xffffffc8
 800958c:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8009590:	eeef 7a8f 	vfma.f32	s15, s31, s30
 8009594:	ed5c da0d 	vldr	s27, [ip, #-52]	; 0xffffffcc
 8009598:	ed14 da0d 	vldr	s26, [r4, #-52]	; 0xffffffcc
 800959c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80095a0:	ed5c ca0c 	vldr	s25, [ip, #-48]	; 0xffffffd0
 80095a4:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80095a8:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80095ac:	ed5c ba0b 	vldr	s23, [ip, #-44]	; 0xffffffd4
 80095b0:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80095b4:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80095b8:	ed5c aa0a 	vldr	s21, [ip, #-40]	; 0xffffffd8
 80095bc:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 80095c0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80095c4:	ed5c 9a09 	vldr	s19, [ip, #-36]	; 0xffffffdc
 80095c8:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 80095cc:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80095d0:	ed5c 8a08 	vldr	s17, [ip, #-32]	; 0xffffffe0
 80095d4:	ed14 8a08 	vldr	s16, [r4, #-32]	; 0xffffffe0
 80095d8:	eee9 7a89 	vfma.f32	s15, s19, s18
 80095dc:	ed1c 0a07 	vldr	s0, [ip, #-28]	; 0xffffffe4
 80095e0:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 80095e4:	eee8 7a88 	vfma.f32	s15, s17, s16
 80095e8:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80095ec:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80095f0:	eee0 7a20 	vfma.f32	s15, s0, s1
 80095f4:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80095f8:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80095fc:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009600:	ed1c 3a04 	vldr	s6, [ip, #-16]
 8009604:	ed54 3a04 	vldr	s7, [r4, #-16]
 8009608:	eee2 7a22 	vfma.f32	s15, s4, s5
 800960c:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8009610:	ed54 4a03 	vldr	s9, [r4, #-12]
 8009614:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009618:	ed1c 5a02 	vldr	s10, [ip, #-8]
 800961c:	ed54 5a02 	vldr	s11, [r4, #-8]
 8009620:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009624:	ed1c 6a01 	vldr	s12, [ip, #-4]
 8009628:	ed54 6a01 	vldr	s13, [r4, #-4]
 800962c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009630:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009634:	f1ae 0e10 	sub.w	lr, lr, #16
 8009638:	f1be 0f0f 	cmp.w	lr, #15
 800963c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009640:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8009644:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009648:	d894      	bhi.n	8009574 <forward_lite_dense_if32of32wf32+0x48>
 800964a:	4654      	mov	r4, sl
 800964c:	46c4      	mov	ip, r8
 800964e:	eb02 0e0b 	add.w	lr, r2, fp
 8009652:	2c00      	cmp	r4, #0
 8009654:	d075      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 8009656:	eddc 6a00 	vldr	s13, [ip]
 800965a:	edde 7a00 	vldr	s15, [lr]
 800965e:	2c01      	cmp	r4, #1
 8009660:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009664:	d06d      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 8009666:	eddc 6a01 	vldr	s13, [ip, #4]
 800966a:	edde 7a01 	vldr	s15, [lr, #4]
 800966e:	2c02      	cmp	r4, #2
 8009670:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009674:	d065      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 8009676:	eddc 6a02 	vldr	s13, [ip, #8]
 800967a:	edde 7a02 	vldr	s15, [lr, #8]
 800967e:	2c03      	cmp	r4, #3
 8009680:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009684:	d05d      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 8009686:	eddc 6a03 	vldr	s13, [ip, #12]
 800968a:	edde 7a03 	vldr	s15, [lr, #12]
 800968e:	2c04      	cmp	r4, #4
 8009690:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009694:	d055      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 8009696:	eddc 6a04 	vldr	s13, [ip, #16]
 800969a:	edde 7a04 	vldr	s15, [lr, #16]
 800969e:	2c05      	cmp	r4, #5
 80096a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096a4:	d04d      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 80096a6:	eddc 6a05 	vldr	s13, [ip, #20]
 80096aa:	edde 7a05 	vldr	s15, [lr, #20]
 80096ae:	2c06      	cmp	r4, #6
 80096b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096b4:	d045      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 80096b6:	eddc 6a06 	vldr	s13, [ip, #24]
 80096ba:	edde 7a06 	vldr	s15, [lr, #24]
 80096be:	2c07      	cmp	r4, #7
 80096c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096c4:	d03d      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 80096c6:	eddc 6a07 	vldr	s13, [ip, #28]
 80096ca:	edde 7a07 	vldr	s15, [lr, #28]
 80096ce:	2c08      	cmp	r4, #8
 80096d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096d4:	d035      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 80096d6:	eddc 6a08 	vldr	s13, [ip, #32]
 80096da:	edde 7a08 	vldr	s15, [lr, #32]
 80096de:	2c09      	cmp	r4, #9
 80096e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096e4:	d02d      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 80096e6:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80096ea:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80096ee:	2c0a      	cmp	r4, #10
 80096f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096f4:	d025      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 80096f6:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80096fa:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80096fe:	2c0b      	cmp	r4, #11
 8009700:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009704:	d01d      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 8009706:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800970a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800970e:	2c0c      	cmp	r4, #12
 8009710:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009714:	d015      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 8009716:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800971a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800971e:	3c0d      	subs	r4, #13
 8009720:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009724:	d00d      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 8009726:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800972a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800972e:	2c01      	cmp	r4, #1
 8009730:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009734:	d005      	beq.n	8009742 <forward_lite_dense_if32of32wf32+0x216>
 8009736:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800973a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800973e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009742:	eca5 7a01 	vstmia	r5!, {s14}
 8009746:	42af      	cmp	r7, r5
 8009748:	444a      	add	r2, r9
 800974a:	f63f af09 	bhi.w	8009560 <forward_lite_dense_if32of32wf32+0x34>
 800974e:	b15b      	cbz	r3, 8009768 <forward_lite_dense_if32of32wf32+0x23c>
 8009750:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009752:	b14a      	cbz	r2, 8009768 <forward_lite_dense_if32of32wf32+0x23c>
 8009754:	edd0 7a00 	vldr	s15, [r0]
 8009758:	ecb3 7a01 	vldmia	r3!, {s14}
 800975c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009760:	ece0 7a01 	vstmia	r0!, {s15}
 8009764:	4287      	cmp	r7, r0
 8009766:	d1f5      	bne.n	8009754 <forward_lite_dense_if32of32wf32+0x228>
 8009768:	ecbd 8b10 	vpop	{d8-d15}
 800976c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009770:	4634      	mov	r4, r6
 8009772:	4696      	mov	lr, r2
 8009774:	468c      	mov	ip, r1
 8009776:	e76c      	b.n	8009652 <forward_lite_dense_if32of32wf32+0x126>
 8009778:	00000000 	.word	0x00000000

0800977c <st_int8_copy>:
 800977c:	4288      	cmp	r0, r1
 800977e:	d056      	beq.n	800982e <st_int8_copy+0xb2>
 8009780:	2a00      	cmp	r2, #0
 8009782:	d054      	beq.n	800982e <st_int8_copy+0xb2>
 8009784:	4288      	cmp	r0, r1
 8009786:	d353      	bcc.n	8009830 <st_int8_copy+0xb4>
 8009788:	078b      	lsls	r3, r1, #30
 800978a:	d102      	bne.n	8009792 <st_int8_copy+0x16>
 800978c:	e008      	b.n	80097a0 <st_int8_copy+0x24>
 800978e:	2a00      	cmp	r2, #0
 8009790:	d05b      	beq.n	800984a <st_int8_copy+0xce>
 8009792:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8009796:	3a01      	subs	r2, #1
 8009798:	f801 3b01 	strb.w	r3, [r1], #1
 800979c:	078b      	lsls	r3, r1, #30
 800979e:	d1f6      	bne.n	800978e <st_int8_copy+0x12>
 80097a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a4:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80097a8:	d06c      	beq.n	8009884 <st_int8_copy+0x108>
 80097aa:	ea41 0300 	orr.w	r3, r1, r0
 80097ae:	075b      	lsls	r3, r3, #29
 80097b0:	d14c      	bne.n	800984c <st_int8_copy+0xd0>
 80097b2:	f10e 33ff 	add.w	r3, lr, #4294967295
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d948      	bls.n	800984c <st_int8_copy+0xd0>
 80097ba:	f100 0310 	add.w	r3, r0, #16
 80097be:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80097c2:	f101 0c10 	add.w	ip, r1, #16
 80097c6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80097ca:	ed13 6b04 	vldr	d6, [r3, #-16]
 80097ce:	ed13 7b02 	vldr	d7, [r3, #-8]
 80097d2:	3310      	adds	r3, #16
 80097d4:	4573      	cmp	r3, lr
 80097d6:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80097da:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80097de:	f10c 0c10 	add.w	ip, ip, #16
 80097e2:	d1f2      	bne.n	80097ca <st_int8_copy+0x4e>
 80097e4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80097e8:	4421      	add	r1, r4
 80097ea:	4420      	add	r0, r4
 80097ec:	f002 0203 	and.w	r2, r2, #3
 80097f0:	b16b      	cbz	r3, 800980e <st_int8_copy+0x92>
 80097f2:	6804      	ldr	r4, [r0, #0]
 80097f4:	600c      	str	r4, [r1, #0]
 80097f6:	1e5c      	subs	r4, r3, #1
 80097f8:	d005      	beq.n	8009806 <st_int8_copy+0x8a>
 80097fa:	6845      	ldr	r5, [r0, #4]
 80097fc:	2c01      	cmp	r4, #1
 80097fe:	604d      	str	r5, [r1, #4]
 8009800:	bf1c      	itt	ne
 8009802:	6884      	ldrne	r4, [r0, #8]
 8009804:	608c      	strne	r4, [r1, #8]
 8009806:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800980a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800980e:	b162      	cbz	r2, 800982a <st_int8_copy+0xae>
 8009810:	f990 3000 	ldrsb.w	r3, [r0]
 8009814:	3a01      	subs	r2, #1
 8009816:	700b      	strb	r3, [r1, #0]
 8009818:	d007      	beq.n	800982a <st_int8_copy+0xae>
 800981a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800981e:	2a01      	cmp	r2, #1
 8009820:	704b      	strb	r3, [r1, #1]
 8009822:	bf1c      	itt	ne
 8009824:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8009828:	708b      	strbne	r3, [r1, #2]
 800982a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982e:	4770      	bx	lr
 8009830:	1883      	adds	r3, r0, r2
 8009832:	428b      	cmp	r3, r1
 8009834:	d9a8      	bls.n	8009788 <st_int8_copy+0xc>
 8009836:	4283      	cmp	r3, r0
 8009838:	440a      	add	r2, r1
 800983a:	d9f8      	bls.n	800982e <st_int8_copy+0xb2>
 800983c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8009840:	4283      	cmp	r3, r0
 8009842:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009846:	d1f9      	bne.n	800983c <st_int8_copy+0xc0>
 8009848:	4770      	bx	lr
 800984a:	4770      	bx	lr
 800984c:	460b      	mov	r3, r1
 800984e:	4684      	mov	ip, r0
 8009850:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009854:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8009858:	f8dc 8000 	ldr.w	r8, [ip]
 800985c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8009860:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8009864:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8009868:	3310      	adds	r3, #16
 800986a:	f843 8c10 	str.w	r8, [r3, #-16]
 800986e:	f843 7c0c 	str.w	r7, [r3, #-12]
 8009872:	f843 6c08 	str.w	r6, [r3, #-8]
 8009876:	f843 5c04 	str.w	r5, [r3, #-4]
 800987a:	459e      	cmp	lr, r3
 800987c:	f10c 0c10 	add.w	ip, ip, #16
 8009880:	d1ea      	bne.n	8009858 <st_int8_copy+0xdc>
 8009882:	e7af      	b.n	80097e4 <st_int8_copy+0x68>
 8009884:	0893      	lsrs	r3, r2, #2
 8009886:	f002 0203 	and.w	r2, r2, #3
 800988a:	e7b1      	b.n	80097f0 <st_int8_copy+0x74>

0800988c <ai_array_to_buffer_fmt>:
 800988c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009890:	2b02      	cmp	r3, #2
 8009892:	d050      	beq.n	8009936 <ai_array_to_buffer_fmt+0xaa>
 8009894:	4b2a      	ldr	r3, [pc, #168]	; (8009940 <ai_array_to_buffer_fmt+0xb4>)
 8009896:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800989a:	429a      	cmp	r2, r3
 800989c:	d00b      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 800989e:	dc1c      	bgt.n	80098da <ai_array_to_buffer_fmt+0x4e>
 80098a0:	4b28      	ldr	r3, [pc, #160]	; (8009944 <ai_array_to_buffer_fmt+0xb8>)
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d007      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 80098a6:	dd0b      	ble.n	80098c0 <ai_array_to_buffer_fmt+0x34>
 80098a8:	4b27      	ldr	r3, [pc, #156]	; (8009948 <ai_array_to_buffer_fmt+0xbc>)
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d003      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 80098ae:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d131      	bne.n	800991a <ai_array_to_buffer_fmt+0x8e>
 80098b6:	4613      	mov	r3, r2
 80098b8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80098bc:	4318      	orrs	r0, r3
 80098be:	4770      	bx	lr
 80098c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d0f6      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 80098c8:	dd2c      	ble.n	8009924 <ai_array_to_buffer_fmt+0x98>
 80098ca:	4b20      	ldr	r3, [pc, #128]	; (800994c <ai_array_to_buffer_fmt+0xc0>)
 80098cc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80098d0:	429a      	cmp	r2, r3
 80098d2:	bf18      	it	ne
 80098d4:	2340      	movne	r3, #64	; 0x40
 80098d6:	4318      	orrs	r0, r3
 80098d8:	4770      	bx	lr
 80098da:	4b1d      	ldr	r3, [pc, #116]	; (8009950 <ai_array_to_buffer_fmt+0xc4>)
 80098dc:	429a      	cmp	r2, r3
 80098de:	d0ea      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 80098e0:	dd0e      	ble.n	8009900 <ai_array_to_buffer_fmt+0x74>
 80098e2:	4b1c      	ldr	r3, [pc, #112]	; (8009954 <ai_array_to_buffer_fmt+0xc8>)
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d0e6      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 80098e8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d0e2      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 80098f0:	4b19      	ldr	r3, [pc, #100]	; (8009958 <ai_array_to_buffer_fmt+0xcc>)
 80098f2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80098f6:	429a      	cmp	r2, r3
 80098f8:	bf18      	it	ne
 80098fa:	2340      	movne	r3, #64	; 0x40
 80098fc:	4318      	orrs	r0, r3
 80098fe:	4770      	bx	lr
 8009900:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009904:	429a      	cmp	r2, r3
 8009906:	d0d6      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 8009908:	3307      	adds	r3, #7
 800990a:	429a      	cmp	r2, r3
 800990c:	d0d3      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 800990e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8009912:	429a      	cmp	r2, r3
 8009914:	bf18      	it	ne
 8009916:	2340      	movne	r3, #64	; 0x40
 8009918:	e7ce      	b.n	80098b8 <ai_array_to_buffer_fmt+0x2c>
 800991a:	4b10      	ldr	r3, [pc, #64]	; (800995c <ai_array_to_buffer_fmt+0xd0>)
 800991c:	429a      	cmp	r2, r3
 800991e:	bf18      	it	ne
 8009920:	2340      	movne	r3, #64	; 0x40
 8009922:	e7c9      	b.n	80098b8 <ai_array_to_buffer_fmt+0x2c>
 8009924:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009928:	429a      	cmp	r2, r3
 800992a:	d0c4      	beq.n	80098b6 <ai_array_to_buffer_fmt+0x2a>
 800992c:	3380      	adds	r3, #128	; 0x80
 800992e:	429a      	cmp	r2, r3
 8009930:	bf18      	it	ne
 8009932:	2340      	movne	r3, #64	; 0x40
 8009934:	e7c0      	b.n	80098b8 <ai_array_to_buffer_fmt+0x2c>
 8009936:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <ai_array_to_buffer_fmt+0xd4>)
 8009938:	4003      	ands	r3, r0
 800993a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800993e:	e7bb      	b.n	80098b8 <ai_array_to_buffer_fmt+0x2c>
 8009940:	00840040 	.word	0x00840040
 8009944:	00040840 	.word	0x00040840
 8009948:	00041040 	.word	0x00041040
 800994c:	00040447 	.word	0x00040447
 8009950:	00840840 	.word	0x00840840
 8009954:	00841040 	.word	0x00841040
 8009958:	0084084f 	.word	0x0084084f
 800995c:	0004084f 	.word	0x0004084f
 8009960:	00803fff 	.word	0x00803fff

08009964 <ai_array_get_byte_size>:
 8009964:	b319      	cbz	r1, 80099ae <ai_array_get_byte_size+0x4a>
 8009966:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800996a:	fb03 f101 	mul.w	r1, r3, r1
 800996e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8009972:	3107      	adds	r1, #7
 8009974:	f3c0 5341 	ubfx	r3, r0, #21, #2
 8009978:	f021 0107 	bic.w	r1, r1, #7
 800997c:	2a04      	cmp	r2, #4
 800997e:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8009982:	fa21 f103 	lsr.w	r1, r1, r3
 8009986:	d00b      	beq.n	80099a0 <ai_array_get_byte_size+0x3c>
 8009988:	2a08      	cmp	r2, #8
 800998a:	d002      	beq.n	8009992 <ai_array_get_byte_size+0x2e>
 800998c:	3107      	adds	r1, #7
 800998e:	08c8      	lsrs	r0, r1, #3
 8009990:	4770      	bx	lr
 8009992:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009996:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800999a:	3107      	adds	r1, #7
 800999c:	08c8      	lsrs	r0, r1, #3
 800999e:	4770      	bx	lr
 80099a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80099a4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80099a8:	3107      	adds	r1, #7
 80099aa:	08c8      	lsrs	r0, r1, #3
 80099ac:	4770      	bx	lr
 80099ae:	4608      	mov	r0, r1
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop

080099b4 <ai_array_get_data_byte_size>:
 80099b4:	b161      	cbz	r1, 80099d0 <ai_array_get_data_byte_size+0x1c>
 80099b6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80099ba:	fb03 f101 	mul.w	r1, r3, r1
 80099be:	f3c0 5341 	ubfx	r3, r0, #21, #2
 80099c2:	1dc8      	adds	r0, r1, #7
 80099c4:	f020 0007 	bic.w	r0, r0, #7
 80099c8:	40d8      	lsrs	r0, r3
 80099ca:	3007      	adds	r0, #7
 80099cc:	08c0      	lsrs	r0, r0, #3
 80099ce:	4770      	bx	lr
 80099d0:	4608      	mov	r0, r1
 80099d2:	4770      	bx	lr

080099d4 <ai_version_get>:
 80099d4:	0212      	lsls	r2, r2, #8
 80099d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80099da:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80099de:	4770      	bx	lr

080099e0 <get_tensor_byte_size>:
 80099e0:	b410      	push	{r4}
 80099e2:	68c4      	ldr	r4, [r0, #12]
 80099e4:	6941      	ldr	r1, [r0, #20]
 80099e6:	6983      	ldr	r3, [r0, #24]
 80099e8:	68c9      	ldr	r1, [r1, #12]
 80099ea:	68e0      	ldr	r0, [r4, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	fb01 f000 	mul.w	r0, r1, r0
 80099f2:	4a06      	ldr	r2, [pc, #24]	; (8009a0c <get_tensor_byte_size+0x2c>)
 80099f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80099f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80099fc:	4293      	cmp	r3, r2
 80099fe:	bf04      	itt	eq
 8009a00:	3007      	addeq	r0, #7
 8009a02:	08c0      	lsreq	r0, r0, #3
 8009a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	000400c0 	.word	0x000400c0

08009a10 <__errno>:
 8009a10:	4b01      	ldr	r3, [pc, #4]	; (8009a18 <__errno+0x8>)
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20001c88 	.word	0x20001c88

08009a1c <__libc_init_array>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	4d0d      	ldr	r5, [pc, #52]	; (8009a54 <__libc_init_array+0x38>)
 8009a20:	2600      	movs	r6, #0
 8009a22:	4c0d      	ldr	r4, [pc, #52]	; (8009a58 <__libc_init_array+0x3c>)
 8009a24:	1b64      	subs	r4, r4, r5
 8009a26:	10a4      	asrs	r4, r4, #2
 8009a28:	42a6      	cmp	r6, r4
 8009a2a:	d109      	bne.n	8009a40 <__libc_init_array+0x24>
 8009a2c:	4d0b      	ldr	r5, [pc, #44]	; (8009a5c <__libc_init_array+0x40>)
 8009a2e:	2600      	movs	r6, #0
 8009a30:	4c0b      	ldr	r4, [pc, #44]	; (8009a60 <__libc_init_array+0x44>)
 8009a32:	f000 fdcf 	bl	800a5d4 <_init>
 8009a36:	1b64      	subs	r4, r4, r5
 8009a38:	10a4      	asrs	r4, r4, #2
 8009a3a:	42a6      	cmp	r6, r4
 8009a3c:	d105      	bne.n	8009a4a <__libc_init_array+0x2e>
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a44:	3601      	adds	r6, #1
 8009a46:	4798      	blx	r3
 8009a48:	e7ee      	b.n	8009a28 <__libc_init_array+0xc>
 8009a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a4e:	3601      	adds	r6, #1
 8009a50:	4798      	blx	r3
 8009a52:	e7f2      	b.n	8009a3a <__libc_init_array+0x1e>
 8009a54:	080b0014 	.word	0x080b0014
 8009a58:	080b0014 	.word	0x080b0014
 8009a5c:	080b0014 	.word	0x080b0014
 8009a60:	080b0018 	.word	0x080b0018

08009a64 <memcpy>:
 8009a64:	440a      	add	r2, r1
 8009a66:	1e43      	subs	r3, r0, #1
 8009a68:	4291      	cmp	r1, r2
 8009a6a:	d100      	bne.n	8009a6e <memcpy+0xa>
 8009a6c:	4770      	bx	lr
 8009a6e:	b510      	push	{r4, lr}
 8009a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a74:	4291      	cmp	r1, r2
 8009a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a7a:	d1f9      	bne.n	8009a70 <memcpy+0xc>
 8009a7c:	bd10      	pop	{r4, pc}

08009a7e <memset>:
 8009a7e:	4402      	add	r2, r0
 8009a80:	4603      	mov	r3, r0
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d100      	bne.n	8009a88 <memset+0xa>
 8009a86:	4770      	bx	lr
 8009a88:	f803 1b01 	strb.w	r1, [r3], #1
 8009a8c:	e7f9      	b.n	8009a82 <memset+0x4>
	...

08009a90 <_free_r>:
 8009a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a92:	2900      	cmp	r1, #0
 8009a94:	d043      	beq.n	8009b1e <_free_r+0x8e>
 8009a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a9a:	1f0c      	subs	r4, r1, #4
 8009a9c:	9001      	str	r0, [sp, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bfb8      	it	lt
 8009aa2:	18e4      	addlt	r4, r4, r3
 8009aa4:	f000 f904 	bl	8009cb0 <__malloc_lock>
 8009aa8:	4a1e      	ldr	r2, [pc, #120]	; (8009b24 <_free_r+0x94>)
 8009aaa:	9801      	ldr	r0, [sp, #4]
 8009aac:	6813      	ldr	r3, [r2, #0]
 8009aae:	b933      	cbnz	r3, 8009abe <_free_r+0x2e>
 8009ab0:	6063      	str	r3, [r4, #4]
 8009ab2:	6014      	str	r4, [r2, #0]
 8009ab4:	b003      	add	sp, #12
 8009ab6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009aba:	f000 b8ff 	b.w	8009cbc <__malloc_unlock>
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	d908      	bls.n	8009ad4 <_free_r+0x44>
 8009ac2:	6825      	ldr	r5, [r4, #0]
 8009ac4:	1961      	adds	r1, r4, r5
 8009ac6:	428b      	cmp	r3, r1
 8009ac8:	bf01      	itttt	eq
 8009aca:	6819      	ldreq	r1, [r3, #0]
 8009acc:	685b      	ldreq	r3, [r3, #4]
 8009ace:	1949      	addeq	r1, r1, r5
 8009ad0:	6021      	streq	r1, [r4, #0]
 8009ad2:	e7ed      	b.n	8009ab0 <_free_r+0x20>
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	b10b      	cbz	r3, 8009ade <_free_r+0x4e>
 8009ada:	42a3      	cmp	r3, r4
 8009adc:	d9fa      	bls.n	8009ad4 <_free_r+0x44>
 8009ade:	6811      	ldr	r1, [r2, #0]
 8009ae0:	1855      	adds	r5, r2, r1
 8009ae2:	42a5      	cmp	r5, r4
 8009ae4:	d10b      	bne.n	8009afe <_free_r+0x6e>
 8009ae6:	6824      	ldr	r4, [r4, #0]
 8009ae8:	4421      	add	r1, r4
 8009aea:	1854      	adds	r4, r2, r1
 8009aec:	6011      	str	r1, [r2, #0]
 8009aee:	42a3      	cmp	r3, r4
 8009af0:	d1e0      	bne.n	8009ab4 <_free_r+0x24>
 8009af2:	681c      	ldr	r4, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	4421      	add	r1, r4
 8009af8:	6053      	str	r3, [r2, #4]
 8009afa:	6011      	str	r1, [r2, #0]
 8009afc:	e7da      	b.n	8009ab4 <_free_r+0x24>
 8009afe:	d902      	bls.n	8009b06 <_free_r+0x76>
 8009b00:	230c      	movs	r3, #12
 8009b02:	6003      	str	r3, [r0, #0]
 8009b04:	e7d6      	b.n	8009ab4 <_free_r+0x24>
 8009b06:	6825      	ldr	r5, [r4, #0]
 8009b08:	1961      	adds	r1, r4, r5
 8009b0a:	428b      	cmp	r3, r1
 8009b0c:	bf02      	ittt	eq
 8009b0e:	6819      	ldreq	r1, [r3, #0]
 8009b10:	685b      	ldreq	r3, [r3, #4]
 8009b12:	1949      	addeq	r1, r1, r5
 8009b14:	6063      	str	r3, [r4, #4]
 8009b16:	bf08      	it	eq
 8009b18:	6021      	streq	r1, [r4, #0]
 8009b1a:	6054      	str	r4, [r2, #4]
 8009b1c:	e7ca      	b.n	8009ab4 <_free_r+0x24>
 8009b1e:	b003      	add	sp, #12
 8009b20:	bd30      	pop	{r4, r5, pc}
 8009b22:	bf00      	nop
 8009b24:	2002db68 	.word	0x2002db68

08009b28 <sbrk_aligned>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4e0e      	ldr	r6, [pc, #56]	; (8009b64 <sbrk_aligned+0x3c>)
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	4605      	mov	r5, r0
 8009b30:	6831      	ldr	r1, [r6, #0]
 8009b32:	b911      	cbnz	r1, 8009b3a <sbrk_aligned+0x12>
 8009b34:	f000 f88c 	bl	8009c50 <_sbrk_r>
 8009b38:	6030      	str	r0, [r6, #0]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f000 f887 	bl	8009c50 <_sbrk_r>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	d00a      	beq.n	8009b5c <sbrk_aligned+0x34>
 8009b46:	1cc4      	adds	r4, r0, #3
 8009b48:	f024 0403 	bic.w	r4, r4, #3
 8009b4c:	42a0      	cmp	r0, r4
 8009b4e:	d007      	beq.n	8009b60 <sbrk_aligned+0x38>
 8009b50:	1a21      	subs	r1, r4, r0
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 f87c 	bl	8009c50 <_sbrk_r>
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d101      	bne.n	8009b60 <sbrk_aligned+0x38>
 8009b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009b60:	4620      	mov	r0, r4
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	2002db6c 	.word	0x2002db6c

08009b68 <_malloc_r>:
 8009b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6c:	1ccd      	adds	r5, r1, #3
 8009b6e:	4607      	mov	r7, r0
 8009b70:	f025 0503 	bic.w	r5, r5, #3
 8009b74:	3508      	adds	r5, #8
 8009b76:	2d0c      	cmp	r5, #12
 8009b78:	bf38      	it	cc
 8009b7a:	250c      	movcc	r5, #12
 8009b7c:	2d00      	cmp	r5, #0
 8009b7e:	db01      	blt.n	8009b84 <_malloc_r+0x1c>
 8009b80:	42a9      	cmp	r1, r5
 8009b82:	d905      	bls.n	8009b90 <_malloc_r+0x28>
 8009b84:	230c      	movs	r3, #12
 8009b86:	2600      	movs	r6, #0
 8009b88:	603b      	str	r3, [r7, #0]
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b90:	4e2e      	ldr	r6, [pc, #184]	; (8009c4c <_malloc_r+0xe4>)
 8009b92:	f000 f88d 	bl	8009cb0 <__malloc_lock>
 8009b96:	6833      	ldr	r3, [r6, #0]
 8009b98:	461c      	mov	r4, r3
 8009b9a:	bb34      	cbnz	r4, 8009bea <_malloc_r+0x82>
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f7ff ffc2 	bl	8009b28 <sbrk_aligned>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	d14d      	bne.n	8009c46 <_malloc_r+0xde>
 8009baa:	6834      	ldr	r4, [r6, #0]
 8009bac:	4626      	mov	r6, r4
 8009bae:	2e00      	cmp	r6, #0
 8009bb0:	d140      	bne.n	8009c34 <_malloc_r+0xcc>
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	eb04 0803 	add.w	r8, r4, r3
 8009bbc:	f000 f848 	bl	8009c50 <_sbrk_r>
 8009bc0:	4580      	cmp	r8, r0
 8009bc2:	d13a      	bne.n	8009c3a <_malloc_r+0xd2>
 8009bc4:	6821      	ldr	r1, [r4, #0]
 8009bc6:	3503      	adds	r5, #3
 8009bc8:	4638      	mov	r0, r7
 8009bca:	1a6d      	subs	r5, r5, r1
 8009bcc:	f025 0503 	bic.w	r5, r5, #3
 8009bd0:	3508      	adds	r5, #8
 8009bd2:	2d0c      	cmp	r5, #12
 8009bd4:	bf38      	it	cc
 8009bd6:	250c      	movcc	r5, #12
 8009bd8:	4629      	mov	r1, r5
 8009bda:	f7ff ffa5 	bl	8009b28 <sbrk_aligned>
 8009bde:	3001      	adds	r0, #1
 8009be0:	d02b      	beq.n	8009c3a <_malloc_r+0xd2>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	442b      	add	r3, r5
 8009be6:	6023      	str	r3, [r4, #0]
 8009be8:	e00e      	b.n	8009c08 <_malloc_r+0xa0>
 8009bea:	6822      	ldr	r2, [r4, #0]
 8009bec:	1b52      	subs	r2, r2, r5
 8009bee:	d41e      	bmi.n	8009c2e <_malloc_r+0xc6>
 8009bf0:	2a0b      	cmp	r2, #11
 8009bf2:	d916      	bls.n	8009c22 <_malloc_r+0xba>
 8009bf4:	1961      	adds	r1, r4, r5
 8009bf6:	42a3      	cmp	r3, r4
 8009bf8:	6025      	str	r5, [r4, #0]
 8009bfa:	bf18      	it	ne
 8009bfc:	6059      	strne	r1, [r3, #4]
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	bf08      	it	eq
 8009c02:	6031      	streq	r1, [r6, #0]
 8009c04:	5162      	str	r2, [r4, r5]
 8009c06:	604b      	str	r3, [r1, #4]
 8009c08:	f104 060b 	add.w	r6, r4, #11
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	f000 f855 	bl	8009cbc <__malloc_unlock>
 8009c12:	1d23      	adds	r3, r4, #4
 8009c14:	f026 0607 	bic.w	r6, r6, #7
 8009c18:	1af2      	subs	r2, r6, r3
 8009c1a:	d0b6      	beq.n	8009b8a <_malloc_r+0x22>
 8009c1c:	1b9b      	subs	r3, r3, r6
 8009c1e:	50a3      	str	r3, [r4, r2]
 8009c20:	e7b3      	b.n	8009b8a <_malloc_r+0x22>
 8009c22:	6862      	ldr	r2, [r4, #4]
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	bf0c      	ite	eq
 8009c28:	6032      	streq	r2, [r6, #0]
 8009c2a:	605a      	strne	r2, [r3, #4]
 8009c2c:	e7ec      	b.n	8009c08 <_malloc_r+0xa0>
 8009c2e:	4623      	mov	r3, r4
 8009c30:	6864      	ldr	r4, [r4, #4]
 8009c32:	e7b2      	b.n	8009b9a <_malloc_r+0x32>
 8009c34:	4634      	mov	r4, r6
 8009c36:	6876      	ldr	r6, [r6, #4]
 8009c38:	e7b9      	b.n	8009bae <_malloc_r+0x46>
 8009c3a:	230c      	movs	r3, #12
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	f000 f83c 	bl	8009cbc <__malloc_unlock>
 8009c44:	e7a1      	b.n	8009b8a <_malloc_r+0x22>
 8009c46:	6025      	str	r5, [r4, #0]
 8009c48:	e7de      	b.n	8009c08 <_malloc_r+0xa0>
 8009c4a:	bf00      	nop
 8009c4c:	2002db68 	.word	0x2002db68

08009c50 <_sbrk_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	2300      	movs	r3, #0
 8009c54:	4d05      	ldr	r5, [pc, #20]	; (8009c6c <_sbrk_r+0x1c>)
 8009c56:	4604      	mov	r4, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	f7f7 f960 	bl	8000f20 <_sbrk>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_sbrk_r+0x1a>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_sbrk_r+0x1a>
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	2002db70 	.word	0x2002db70

08009c70 <siprintf>:
 8009c70:	b40e      	push	{r1, r2, r3}
 8009c72:	b500      	push	{lr}
 8009c74:	b09c      	sub	sp, #112	; 0x70
 8009c76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8009c7c:	9002      	str	r0, [sp, #8]
 8009c7e:	9006      	str	r0, [sp, #24]
 8009c80:	9107      	str	r1, [sp, #28]
 8009c82:	9104      	str	r1, [sp, #16]
 8009c84:	4808      	ldr	r0, [pc, #32]	; (8009ca8 <siprintf+0x38>)
 8009c86:	4909      	ldr	r1, [pc, #36]	; (8009cac <siprintf+0x3c>)
 8009c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c8c:	9105      	str	r1, [sp, #20]
 8009c8e:	a902      	add	r1, sp, #8
 8009c90:	6800      	ldr	r0, [r0, #0]
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	f000 f8a2 	bl	8009ddc <_svfiprintf_r>
 8009c98:	9b02      	ldr	r3, [sp, #8]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	b01c      	add	sp, #112	; 0x70
 8009ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ca4:	b003      	add	sp, #12
 8009ca6:	4770      	bx	lr
 8009ca8:	20001c88 	.word	0x20001c88
 8009cac:	ffff0208 	.word	0xffff0208

08009cb0 <__malloc_lock>:
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <__malloc_lock+0x8>)
 8009cb2:	f000 bb29 	b.w	800a308 <__retarget_lock_acquire_recursive>
 8009cb6:	bf00      	nop
 8009cb8:	2002db74 	.word	0x2002db74

08009cbc <__malloc_unlock>:
 8009cbc:	4801      	ldr	r0, [pc, #4]	; (8009cc4 <__malloc_unlock+0x8>)
 8009cbe:	f000 bb24 	b.w	800a30a <__retarget_lock_release_recursive>
 8009cc2:	bf00      	nop
 8009cc4:	2002db74 	.word	0x2002db74

08009cc8 <_realloc_r>:
 8009cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ccc:	4680      	mov	r8, r0
 8009cce:	4614      	mov	r4, r2
 8009cd0:	460e      	mov	r6, r1
 8009cd2:	b921      	cbnz	r1, 8009cde <_realloc_r+0x16>
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cda:	f7ff bf45 	b.w	8009b68 <_malloc_r>
 8009cde:	b92a      	cbnz	r2, 8009cec <_realloc_r+0x24>
 8009ce0:	4625      	mov	r5, r4
 8009ce2:	f7ff fed5 	bl	8009a90 <_free_r>
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cec:	f000 fb36 	bl	800a35c <_malloc_usable_size_r>
 8009cf0:	4284      	cmp	r4, r0
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	d802      	bhi.n	8009cfc <_realloc_r+0x34>
 8009cf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cfa:	d812      	bhi.n	8009d22 <_realloc_r+0x5a>
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	4640      	mov	r0, r8
 8009d00:	f7ff ff32 	bl	8009b68 <_malloc_r>
 8009d04:	4605      	mov	r5, r0
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d0ed      	beq.n	8009ce6 <_realloc_r+0x1e>
 8009d0a:	42bc      	cmp	r4, r7
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	4631      	mov	r1, r6
 8009d10:	bf28      	it	cs
 8009d12:	463a      	movcs	r2, r7
 8009d14:	f7ff fea6 	bl	8009a64 <memcpy>
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	f7ff feb8 	bl	8009a90 <_free_r>
 8009d20:	e7e1      	b.n	8009ce6 <_realloc_r+0x1e>
 8009d22:	4635      	mov	r5, r6
 8009d24:	e7df      	b.n	8009ce6 <_realloc_r+0x1e>

08009d26 <__ssputs_r>:
 8009d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2a:	688e      	ldr	r6, [r1, #8]
 8009d2c:	4682      	mov	sl, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	4690      	mov	r8, r2
 8009d32:	429e      	cmp	r6, r3
 8009d34:	461f      	mov	r7, r3
 8009d36:	d838      	bhi.n	8009daa <__ssputs_r+0x84>
 8009d38:	898a      	ldrh	r2, [r1, #12]
 8009d3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d3e:	d032      	beq.n	8009da6 <__ssputs_r+0x80>
 8009d40:	6825      	ldr	r5, [r4, #0]
 8009d42:	3301      	adds	r3, #1
 8009d44:	6909      	ldr	r1, [r1, #16]
 8009d46:	eba5 0901 	sub.w	r9, r5, r1
 8009d4a:	6965      	ldr	r5, [r4, #20]
 8009d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d50:	444b      	add	r3, r9
 8009d52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d56:	106d      	asrs	r5, r5, #1
 8009d58:	429d      	cmp	r5, r3
 8009d5a:	bf38      	it	cc
 8009d5c:	461d      	movcc	r5, r3
 8009d5e:	0553      	lsls	r3, r2, #21
 8009d60:	d531      	bpl.n	8009dc6 <__ssputs_r+0xa0>
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7ff ff00 	bl	8009b68 <_malloc_r>
 8009d68:	4606      	mov	r6, r0
 8009d6a:	b950      	cbnz	r0, 8009d82 <__ssputs_r+0x5c>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	f8ca 3000 	str.w	r3, [sl]
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d82:	464a      	mov	r2, r9
 8009d84:	6921      	ldr	r1, [r4, #16]
 8009d86:	f7ff fe6d 	bl	8009a64 <memcpy>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	6126      	str	r6, [r4, #16]
 8009d98:	444e      	add	r6, r9
 8009d9a:	6165      	str	r5, [r4, #20]
 8009d9c:	eba5 0509 	sub.w	r5, r5, r9
 8009da0:	6026      	str	r6, [r4, #0]
 8009da2:	463e      	mov	r6, r7
 8009da4:	60a5      	str	r5, [r4, #8]
 8009da6:	42be      	cmp	r6, r7
 8009da8:	d900      	bls.n	8009dac <__ssputs_r+0x86>
 8009daa:	463e      	mov	r6, r7
 8009dac:	4632      	mov	r2, r6
 8009dae:	4641      	mov	r1, r8
 8009db0:	6820      	ldr	r0, [r4, #0]
 8009db2:	f000 fab9 	bl	800a328 <memmove>
 8009db6:	68a3      	ldr	r3, [r4, #8]
 8009db8:	2000      	movs	r0, #0
 8009dba:	1b9b      	subs	r3, r3, r6
 8009dbc:	60a3      	str	r3, [r4, #8]
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	4433      	add	r3, r6
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	e7db      	b.n	8009d7e <__ssputs_r+0x58>
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	f7ff ff7e 	bl	8009cc8 <_realloc_r>
 8009dcc:	4606      	mov	r6, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d1e1      	bne.n	8009d96 <__ssputs_r+0x70>
 8009dd2:	6921      	ldr	r1, [r4, #16]
 8009dd4:	4650      	mov	r0, sl
 8009dd6:	f7ff fe5b 	bl	8009a90 <_free_r>
 8009dda:	e7c7      	b.n	8009d6c <__ssputs_r+0x46>

08009ddc <_svfiprintf_r>:
 8009ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de0:	4698      	mov	r8, r3
 8009de2:	898b      	ldrh	r3, [r1, #12]
 8009de4:	b09d      	sub	sp, #116	; 0x74
 8009de6:	4607      	mov	r7, r0
 8009de8:	061b      	lsls	r3, r3, #24
 8009dea:	460d      	mov	r5, r1
 8009dec:	4614      	mov	r4, r2
 8009dee:	d50e      	bpl.n	8009e0e <_svfiprintf_r+0x32>
 8009df0:	690b      	ldr	r3, [r1, #16]
 8009df2:	b963      	cbnz	r3, 8009e0e <_svfiprintf_r+0x32>
 8009df4:	2140      	movs	r1, #64	; 0x40
 8009df6:	f7ff feb7 	bl	8009b68 <_malloc_r>
 8009dfa:	6028      	str	r0, [r5, #0]
 8009dfc:	6128      	str	r0, [r5, #16]
 8009dfe:	b920      	cbnz	r0, 8009e0a <_svfiprintf_r+0x2e>
 8009e00:	230c      	movs	r3, #12
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	f04f 30ff 	mov.w	r0, #4294967295
 8009e08:	e0d1      	b.n	8009fae <_svfiprintf_r+0x1d2>
 8009e0a:	2340      	movs	r3, #64	; 0x40
 8009e0c:	616b      	str	r3, [r5, #20]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e14:	f04f 0901 	mov.w	r9, #1
 8009e18:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009fc8 <_svfiprintf_r+0x1ec>
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	2320      	movs	r3, #32
 8009e20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e24:	2330      	movs	r3, #48	; 0x30
 8009e26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e2a:	4623      	mov	r3, r4
 8009e2c:	469a      	mov	sl, r3
 8009e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e32:	b10a      	cbz	r2, 8009e38 <_svfiprintf_r+0x5c>
 8009e34:	2a25      	cmp	r2, #37	; 0x25
 8009e36:	d1f9      	bne.n	8009e2c <_svfiprintf_r+0x50>
 8009e38:	ebba 0b04 	subs.w	fp, sl, r4
 8009e3c:	d00b      	beq.n	8009e56 <_svfiprintf_r+0x7a>
 8009e3e:	465b      	mov	r3, fp
 8009e40:	4622      	mov	r2, r4
 8009e42:	4629      	mov	r1, r5
 8009e44:	4638      	mov	r0, r7
 8009e46:	f7ff ff6e 	bl	8009d26 <__ssputs_r>
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	f000 80aa 	beq.w	8009fa4 <_svfiprintf_r+0x1c8>
 8009e50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e52:	445a      	add	r2, fp
 8009e54:	9209      	str	r2, [sp, #36]	; 0x24
 8009e56:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f000 80a2 	beq.w	8009fa4 <_svfiprintf_r+0x1c8>
 8009e60:	2300      	movs	r3, #0
 8009e62:	f04f 32ff 	mov.w	r2, #4294967295
 8009e66:	f10a 0a01 	add.w	sl, sl, #1
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	9307      	str	r3, [sp, #28]
 8009e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e72:	931a      	str	r3, [sp, #104]	; 0x68
 8009e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e78:	4654      	mov	r4, sl
 8009e7a:	2205      	movs	r2, #5
 8009e7c:	4852      	ldr	r0, [pc, #328]	; (8009fc8 <_svfiprintf_r+0x1ec>)
 8009e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e82:	f000 fa43 	bl	800a30c <memchr>
 8009e86:	9a04      	ldr	r2, [sp, #16]
 8009e88:	b9d8      	cbnz	r0, 8009ec2 <_svfiprintf_r+0xe6>
 8009e8a:	06d0      	lsls	r0, r2, #27
 8009e8c:	bf44      	itt	mi
 8009e8e:	2320      	movmi	r3, #32
 8009e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e94:	0711      	lsls	r1, r2, #28
 8009e96:	bf44      	itt	mi
 8009e98:	232b      	movmi	r3, #43	; 0x2b
 8009e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea4:	d015      	beq.n	8009ed2 <_svfiprintf_r+0xf6>
 8009ea6:	9a07      	ldr	r2, [sp, #28]
 8009ea8:	4654      	mov	r4, sl
 8009eaa:	2000      	movs	r0, #0
 8009eac:	f04f 0c0a 	mov.w	ip, #10
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb6:	3b30      	subs	r3, #48	; 0x30
 8009eb8:	2b09      	cmp	r3, #9
 8009eba:	d94e      	bls.n	8009f5a <_svfiprintf_r+0x17e>
 8009ebc:	b1b0      	cbz	r0, 8009eec <_svfiprintf_r+0x110>
 8009ebe:	9207      	str	r2, [sp, #28]
 8009ec0:	e014      	b.n	8009eec <_svfiprintf_r+0x110>
 8009ec2:	eba0 0308 	sub.w	r3, r0, r8
 8009ec6:	46a2      	mov	sl, r4
 8009ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	e7d2      	b.n	8009e78 <_svfiprintf_r+0x9c>
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	1d19      	adds	r1, r3, #4
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	9103      	str	r1, [sp, #12]
 8009edc:	bfbb      	ittet	lt
 8009ede:	425b      	neglt	r3, r3
 8009ee0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee4:	9307      	strge	r3, [sp, #28]
 8009ee6:	9307      	strlt	r3, [sp, #28]
 8009ee8:	bfb8      	it	lt
 8009eea:	9204      	strlt	r2, [sp, #16]
 8009eec:	7823      	ldrb	r3, [r4, #0]
 8009eee:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef0:	d10c      	bne.n	8009f0c <_svfiprintf_r+0x130>
 8009ef2:	7863      	ldrb	r3, [r4, #1]
 8009ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef6:	d135      	bne.n	8009f64 <_svfiprintf_r+0x188>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	3402      	adds	r4, #2
 8009efc:	1d1a      	adds	r2, r3, #4
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	9203      	str	r2, [sp, #12]
 8009f04:	bfb8      	it	lt
 8009f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f0a:	9305      	str	r3, [sp, #20]
 8009f0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fd8 <_svfiprintf_r+0x1fc>
 8009f10:	2203      	movs	r2, #3
 8009f12:	7821      	ldrb	r1, [r4, #0]
 8009f14:	4650      	mov	r0, sl
 8009f16:	f000 f9f9 	bl	800a30c <memchr>
 8009f1a:	b140      	cbz	r0, 8009f2e <_svfiprintf_r+0x152>
 8009f1c:	2340      	movs	r3, #64	; 0x40
 8009f1e:	eba0 000a 	sub.w	r0, r0, sl
 8009f22:	3401      	adds	r4, #1
 8009f24:	fa03 f000 	lsl.w	r0, r3, r0
 8009f28:	9b04      	ldr	r3, [sp, #16]
 8009f2a:	4303      	orrs	r3, r0
 8009f2c:	9304      	str	r3, [sp, #16]
 8009f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f32:	2206      	movs	r2, #6
 8009f34:	4825      	ldr	r0, [pc, #148]	; (8009fcc <_svfiprintf_r+0x1f0>)
 8009f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f3a:	f000 f9e7 	bl	800a30c <memchr>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d038      	beq.n	8009fb4 <_svfiprintf_r+0x1d8>
 8009f42:	4b23      	ldr	r3, [pc, #140]	; (8009fd0 <_svfiprintf_r+0x1f4>)
 8009f44:	bb1b      	cbnz	r3, 8009f8e <_svfiprintf_r+0x1b2>
 8009f46:	9b03      	ldr	r3, [sp, #12]
 8009f48:	3307      	adds	r3, #7
 8009f4a:	f023 0307 	bic.w	r3, r3, #7
 8009f4e:	3308      	adds	r3, #8
 8009f50:	9303      	str	r3, [sp, #12]
 8009f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f54:	4433      	add	r3, r6
 8009f56:	9309      	str	r3, [sp, #36]	; 0x24
 8009f58:	e767      	b.n	8009e2a <_svfiprintf_r+0x4e>
 8009f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f5e:	460c      	mov	r4, r1
 8009f60:	2001      	movs	r0, #1
 8009f62:	e7a5      	b.n	8009eb0 <_svfiprintf_r+0xd4>
 8009f64:	2300      	movs	r3, #0
 8009f66:	3401      	adds	r4, #1
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	9305      	str	r3, [sp, #20]
 8009f70:	4620      	mov	r0, r4
 8009f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f76:	3a30      	subs	r2, #48	; 0x30
 8009f78:	2a09      	cmp	r2, #9
 8009f7a:	d903      	bls.n	8009f84 <_svfiprintf_r+0x1a8>
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d0c5      	beq.n	8009f0c <_svfiprintf_r+0x130>
 8009f80:	9105      	str	r1, [sp, #20]
 8009f82:	e7c3      	b.n	8009f0c <_svfiprintf_r+0x130>
 8009f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f88:	4604      	mov	r4, r0
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e7f0      	b.n	8009f70 <_svfiprintf_r+0x194>
 8009f8e:	ab03      	add	r3, sp, #12
 8009f90:	462a      	mov	r2, r5
 8009f92:	a904      	add	r1, sp, #16
 8009f94:	4638      	mov	r0, r7
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	4b0e      	ldr	r3, [pc, #56]	; (8009fd4 <_svfiprintf_r+0x1f8>)
 8009f9a:	e000      	b.n	8009f9e <_svfiprintf_r+0x1c2>
 8009f9c:	bf00      	nop
 8009f9e:	1c42      	adds	r2, r0, #1
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	d1d6      	bne.n	8009f52 <_svfiprintf_r+0x176>
 8009fa4:	89ab      	ldrh	r3, [r5, #12]
 8009fa6:	065b      	lsls	r3, r3, #25
 8009fa8:	f53f af2c 	bmi.w	8009e04 <_svfiprintf_r+0x28>
 8009fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fae:	b01d      	add	sp, #116	; 0x74
 8009fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb4:	ab03      	add	r3, sp, #12
 8009fb6:	462a      	mov	r2, r5
 8009fb8:	a904      	add	r1, sp, #16
 8009fba:	4638      	mov	r0, r7
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <_svfiprintf_r+0x1f8>)
 8009fc0:	f000 f87c 	bl	800a0bc <_printf_i>
 8009fc4:	e7eb      	b.n	8009f9e <_svfiprintf_r+0x1c2>
 8009fc6:	bf00      	nop
 8009fc8:	080affc0 	.word	0x080affc0
 8009fcc:	080affca 	.word	0x080affca
 8009fd0:	00000000 	.word	0x00000000
 8009fd4:	08009d27 	.word	0x08009d27
 8009fd8:	080affc6 	.word	0x080affc6

08009fdc <_printf_common>:
 8009fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	4699      	mov	r9, r3
 8009fe4:	688a      	ldr	r2, [r1, #8]
 8009fe6:	4607      	mov	r7, r0
 8009fe8:	690b      	ldr	r3, [r1, #16]
 8009fea:	460c      	mov	r4, r1
 8009fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	bfb8      	it	lt
 8009ff4:	4613      	movlt	r3, r2
 8009ff6:	6033      	str	r3, [r6, #0]
 8009ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ffc:	b10a      	cbz	r2, 800a002 <_printf_common+0x26>
 8009ffe:	3301      	adds	r3, #1
 800a000:	6033      	str	r3, [r6, #0]
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	0699      	lsls	r1, r3, #26
 800a006:	bf42      	ittt	mi
 800a008:	6833      	ldrmi	r3, [r6, #0]
 800a00a:	3302      	addmi	r3, #2
 800a00c:	6033      	strmi	r3, [r6, #0]
 800a00e:	6825      	ldr	r5, [r4, #0]
 800a010:	f015 0506 	ands.w	r5, r5, #6
 800a014:	d106      	bne.n	800a024 <_printf_common+0x48>
 800a016:	f104 0a19 	add.w	sl, r4, #25
 800a01a:	68e3      	ldr	r3, [r4, #12]
 800a01c:	6832      	ldr	r2, [r6, #0]
 800a01e:	1a9b      	subs	r3, r3, r2
 800a020:	42ab      	cmp	r3, r5
 800a022:	dc29      	bgt.n	800a078 <_printf_common+0x9c>
 800a024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a028:	1e13      	subs	r3, r2, #0
 800a02a:	6822      	ldr	r2, [r4, #0]
 800a02c:	bf18      	it	ne
 800a02e:	2301      	movne	r3, #1
 800a030:	0692      	lsls	r2, r2, #26
 800a032:	d42e      	bmi.n	800a092 <_printf_common+0xb6>
 800a034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a038:	4649      	mov	r1, r9
 800a03a:	4638      	mov	r0, r7
 800a03c:	47c0      	blx	r8
 800a03e:	3001      	adds	r0, #1
 800a040:	d021      	beq.n	800a086 <_printf_common+0xaa>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	341a      	adds	r4, #26
 800a046:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800a04a:	f003 0306 	and.w	r3, r3, #6
 800a04e:	6832      	ldr	r2, [r6, #0]
 800a050:	2600      	movs	r6, #0
 800a052:	2b04      	cmp	r3, #4
 800a054:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a058:	bf08      	it	eq
 800a05a:	1aad      	subeq	r5, r5, r2
 800a05c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a060:	bf14      	ite	ne
 800a062:	2500      	movne	r5, #0
 800a064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a068:	4293      	cmp	r3, r2
 800a06a:	bfc4      	itt	gt
 800a06c:	1a9b      	subgt	r3, r3, r2
 800a06e:	18ed      	addgt	r5, r5, r3
 800a070:	42b5      	cmp	r5, r6
 800a072:	d11a      	bne.n	800a0aa <_printf_common+0xce>
 800a074:	2000      	movs	r0, #0
 800a076:	e008      	b.n	800a08a <_printf_common+0xae>
 800a078:	2301      	movs	r3, #1
 800a07a:	4652      	mov	r2, sl
 800a07c:	4649      	mov	r1, r9
 800a07e:	4638      	mov	r0, r7
 800a080:	47c0      	blx	r8
 800a082:	3001      	adds	r0, #1
 800a084:	d103      	bne.n	800a08e <_printf_common+0xb2>
 800a086:	f04f 30ff 	mov.w	r0, #4294967295
 800a08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08e:	3501      	adds	r5, #1
 800a090:	e7c3      	b.n	800a01a <_printf_common+0x3e>
 800a092:	18e1      	adds	r1, r4, r3
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	2030      	movs	r0, #48	; 0x30
 800a098:	3302      	adds	r3, #2
 800a09a:	4422      	add	r2, r4
 800a09c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0a8:	e7c4      	b.n	800a034 <_printf_common+0x58>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4622      	mov	r2, r4
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	47c0      	blx	r8
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d0e6      	beq.n	800a086 <_printf_common+0xaa>
 800a0b8:	3601      	adds	r6, #1
 800a0ba:	e7d9      	b.n	800a070 <_printf_common+0x94>

0800a0bc <_printf_i>:
 800a0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c0:	7e0f      	ldrb	r7, [r1, #24]
 800a0c2:	4691      	mov	r9, r2
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	2f78      	cmp	r7, #120	; 0x78
 800a0ca:	469a      	mov	sl, r3
 800a0cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0d2:	d807      	bhi.n	800a0e4 <_printf_i+0x28>
 800a0d4:	2f62      	cmp	r7, #98	; 0x62
 800a0d6:	d80a      	bhi.n	800a0ee <_printf_i+0x32>
 800a0d8:	2f00      	cmp	r7, #0
 800a0da:	f000 80d8 	beq.w	800a28e <_printf_i+0x1d2>
 800a0de:	2f58      	cmp	r7, #88	; 0x58
 800a0e0:	f000 80a3 	beq.w	800a22a <_printf_i+0x16e>
 800a0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0ec:	e03a      	b.n	800a164 <_printf_i+0xa8>
 800a0ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0f2:	2b15      	cmp	r3, #21
 800a0f4:	d8f6      	bhi.n	800a0e4 <_printf_i+0x28>
 800a0f6:	a101      	add	r1, pc, #4	; (adr r1, 800a0fc <_printf_i+0x40>)
 800a0f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0fc:	0800a155 	.word	0x0800a155
 800a100:	0800a169 	.word	0x0800a169
 800a104:	0800a0e5 	.word	0x0800a0e5
 800a108:	0800a0e5 	.word	0x0800a0e5
 800a10c:	0800a0e5 	.word	0x0800a0e5
 800a110:	0800a0e5 	.word	0x0800a0e5
 800a114:	0800a169 	.word	0x0800a169
 800a118:	0800a0e5 	.word	0x0800a0e5
 800a11c:	0800a0e5 	.word	0x0800a0e5
 800a120:	0800a0e5 	.word	0x0800a0e5
 800a124:	0800a0e5 	.word	0x0800a0e5
 800a128:	0800a275 	.word	0x0800a275
 800a12c:	0800a199 	.word	0x0800a199
 800a130:	0800a257 	.word	0x0800a257
 800a134:	0800a0e5 	.word	0x0800a0e5
 800a138:	0800a0e5 	.word	0x0800a0e5
 800a13c:	0800a297 	.word	0x0800a297
 800a140:	0800a0e5 	.word	0x0800a0e5
 800a144:	0800a199 	.word	0x0800a199
 800a148:	0800a0e5 	.word	0x0800a0e5
 800a14c:	0800a0e5 	.word	0x0800a0e5
 800a150:	0800a25f 	.word	0x0800a25f
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	602a      	str	r2, [r5, #0]
 800a15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a164:	2301      	movs	r3, #1
 800a166:	e0a3      	b.n	800a2b0 <_printf_i+0x1f4>
 800a168:	6820      	ldr	r0, [r4, #0]
 800a16a:	6829      	ldr	r1, [r5, #0]
 800a16c:	0606      	lsls	r6, r0, #24
 800a16e:	f101 0304 	add.w	r3, r1, #4
 800a172:	d50a      	bpl.n	800a18a <_printf_i+0xce>
 800a174:	680e      	ldr	r6, [r1, #0]
 800a176:	602b      	str	r3, [r5, #0]
 800a178:	2e00      	cmp	r6, #0
 800a17a:	da03      	bge.n	800a184 <_printf_i+0xc8>
 800a17c:	232d      	movs	r3, #45	; 0x2d
 800a17e:	4276      	negs	r6, r6
 800a180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a184:	485e      	ldr	r0, [pc, #376]	; (800a300 <_printf_i+0x244>)
 800a186:	230a      	movs	r3, #10
 800a188:	e019      	b.n	800a1be <_printf_i+0x102>
 800a18a:	680e      	ldr	r6, [r1, #0]
 800a18c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a190:	602b      	str	r3, [r5, #0]
 800a192:	bf18      	it	ne
 800a194:	b236      	sxthne	r6, r6
 800a196:	e7ef      	b.n	800a178 <_printf_i+0xbc>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	6820      	ldr	r0, [r4, #0]
 800a19c:	1d19      	adds	r1, r3, #4
 800a19e:	6029      	str	r1, [r5, #0]
 800a1a0:	0601      	lsls	r1, r0, #24
 800a1a2:	d501      	bpl.n	800a1a8 <_printf_i+0xec>
 800a1a4:	681e      	ldr	r6, [r3, #0]
 800a1a6:	e002      	b.n	800a1ae <_printf_i+0xf2>
 800a1a8:	0646      	lsls	r6, r0, #25
 800a1aa:	d5fb      	bpl.n	800a1a4 <_printf_i+0xe8>
 800a1ac:	881e      	ldrh	r6, [r3, #0]
 800a1ae:	2f6f      	cmp	r7, #111	; 0x6f
 800a1b0:	4853      	ldr	r0, [pc, #332]	; (800a300 <_printf_i+0x244>)
 800a1b2:	bf0c      	ite	eq
 800a1b4:	2308      	moveq	r3, #8
 800a1b6:	230a      	movne	r3, #10
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1be:	6865      	ldr	r5, [r4, #4]
 800a1c0:	2d00      	cmp	r5, #0
 800a1c2:	60a5      	str	r5, [r4, #8]
 800a1c4:	bfa2      	ittt	ge
 800a1c6:	6821      	ldrge	r1, [r4, #0]
 800a1c8:	f021 0104 	bicge.w	r1, r1, #4
 800a1cc:	6021      	strge	r1, [r4, #0]
 800a1ce:	b90e      	cbnz	r6, 800a1d4 <_printf_i+0x118>
 800a1d0:	2d00      	cmp	r5, #0
 800a1d2:	d04d      	beq.n	800a270 <_printf_i+0x1b4>
 800a1d4:	4615      	mov	r5, r2
 800a1d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1da:	fb03 6711 	mls	r7, r3, r1, r6
 800a1de:	5dc7      	ldrb	r7, [r0, r7]
 800a1e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1e4:	4637      	mov	r7, r6
 800a1e6:	460e      	mov	r6, r1
 800a1e8:	42bb      	cmp	r3, r7
 800a1ea:	d9f4      	bls.n	800a1d6 <_printf_i+0x11a>
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d10b      	bne.n	800a208 <_printf_i+0x14c>
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	07de      	lsls	r6, r3, #31
 800a1f4:	d508      	bpl.n	800a208 <_printf_i+0x14c>
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	6861      	ldr	r1, [r4, #4]
 800a1fa:	4299      	cmp	r1, r3
 800a1fc:	bfde      	ittt	le
 800a1fe:	2330      	movle	r3, #48	; 0x30
 800a200:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a204:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a208:	1b52      	subs	r2, r2, r5
 800a20a:	6122      	str	r2, [r4, #16]
 800a20c:	464b      	mov	r3, r9
 800a20e:	aa03      	add	r2, sp, #12
 800a210:	4621      	mov	r1, r4
 800a212:	4640      	mov	r0, r8
 800a214:	f8cd a000 	str.w	sl, [sp]
 800a218:	f7ff fee0 	bl	8009fdc <_printf_common>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d14c      	bne.n	800a2ba <_printf_i+0x1fe>
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	b004      	add	sp, #16
 800a226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22a:	4835      	ldr	r0, [pc, #212]	; (800a300 <_printf_i+0x244>)
 800a22c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a230:	6829      	ldr	r1, [r5, #0]
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	f851 6b04 	ldr.w	r6, [r1], #4
 800a238:	6029      	str	r1, [r5, #0]
 800a23a:	061d      	lsls	r5, r3, #24
 800a23c:	d514      	bpl.n	800a268 <_printf_i+0x1ac>
 800a23e:	07df      	lsls	r7, r3, #31
 800a240:	bf44      	itt	mi
 800a242:	f043 0320 	orrmi.w	r3, r3, #32
 800a246:	6023      	strmi	r3, [r4, #0]
 800a248:	b91e      	cbnz	r6, 800a252 <_printf_i+0x196>
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	f023 0320 	bic.w	r3, r3, #32
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	2310      	movs	r3, #16
 800a254:	e7b0      	b.n	800a1b8 <_printf_i+0xfc>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	f043 0320 	orr.w	r3, r3, #32
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	2378      	movs	r3, #120	; 0x78
 800a260:	4828      	ldr	r0, [pc, #160]	; (800a304 <_printf_i+0x248>)
 800a262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a266:	e7e3      	b.n	800a230 <_printf_i+0x174>
 800a268:	0659      	lsls	r1, r3, #25
 800a26a:	bf48      	it	mi
 800a26c:	b2b6      	uxthmi	r6, r6
 800a26e:	e7e6      	b.n	800a23e <_printf_i+0x182>
 800a270:	4615      	mov	r5, r2
 800a272:	e7bb      	b.n	800a1ec <_printf_i+0x130>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	6826      	ldr	r6, [r4, #0]
 800a278:	1d18      	adds	r0, r3, #4
 800a27a:	6961      	ldr	r1, [r4, #20]
 800a27c:	6028      	str	r0, [r5, #0]
 800a27e:	0635      	lsls	r5, r6, #24
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	d501      	bpl.n	800a288 <_printf_i+0x1cc>
 800a284:	6019      	str	r1, [r3, #0]
 800a286:	e002      	b.n	800a28e <_printf_i+0x1d2>
 800a288:	0670      	lsls	r0, r6, #25
 800a28a:	d5fb      	bpl.n	800a284 <_printf_i+0x1c8>
 800a28c:	8019      	strh	r1, [r3, #0]
 800a28e:	2300      	movs	r3, #0
 800a290:	4615      	mov	r5, r2
 800a292:	6123      	str	r3, [r4, #16]
 800a294:	e7ba      	b.n	800a20c <_printf_i+0x150>
 800a296:	682b      	ldr	r3, [r5, #0]
 800a298:	2100      	movs	r1, #0
 800a29a:	1d1a      	adds	r2, r3, #4
 800a29c:	602a      	str	r2, [r5, #0]
 800a29e:	681d      	ldr	r5, [r3, #0]
 800a2a0:	6862      	ldr	r2, [r4, #4]
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f000 f832 	bl	800a30c <memchr>
 800a2a8:	b108      	cbz	r0, 800a2ae <_printf_i+0x1f2>
 800a2aa:	1b40      	subs	r0, r0, r5
 800a2ac:	6060      	str	r0, [r4, #4]
 800a2ae:	6863      	ldr	r3, [r4, #4]
 800a2b0:	6123      	str	r3, [r4, #16]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b8:	e7a8      	b.n	800a20c <_printf_i+0x150>
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	462a      	mov	r2, r5
 800a2be:	4649      	mov	r1, r9
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	47d0      	blx	sl
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d0ab      	beq.n	800a220 <_printf_i+0x164>
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	079b      	lsls	r3, r3, #30
 800a2cc:	d413      	bmi.n	800a2f6 <_printf_i+0x23a>
 800a2ce:	68e0      	ldr	r0, [r4, #12]
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	4298      	cmp	r0, r3
 800a2d4:	bfb8      	it	lt
 800a2d6:	4618      	movlt	r0, r3
 800a2d8:	e7a4      	b.n	800a224 <_printf_i+0x168>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4632      	mov	r2, r6
 800a2de:	4649      	mov	r1, r9
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	47d0      	blx	sl
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d09b      	beq.n	800a220 <_printf_i+0x164>
 800a2e8:	3501      	adds	r5, #1
 800a2ea:	68e3      	ldr	r3, [r4, #12]
 800a2ec:	9903      	ldr	r1, [sp, #12]
 800a2ee:	1a5b      	subs	r3, r3, r1
 800a2f0:	42ab      	cmp	r3, r5
 800a2f2:	dcf2      	bgt.n	800a2da <_printf_i+0x21e>
 800a2f4:	e7eb      	b.n	800a2ce <_printf_i+0x212>
 800a2f6:	2500      	movs	r5, #0
 800a2f8:	f104 0619 	add.w	r6, r4, #25
 800a2fc:	e7f5      	b.n	800a2ea <_printf_i+0x22e>
 800a2fe:	bf00      	nop
 800a300:	080affd1 	.word	0x080affd1
 800a304:	080affe2 	.word	0x080affe2

0800a308 <__retarget_lock_acquire_recursive>:
 800a308:	4770      	bx	lr

0800a30a <__retarget_lock_release_recursive>:
 800a30a:	4770      	bx	lr

0800a30c <memchr>:
 800a30c:	b2c9      	uxtb	r1, r1
 800a30e:	4402      	add	r2, r0
 800a310:	b510      	push	{r4, lr}
 800a312:	4290      	cmp	r0, r2
 800a314:	4603      	mov	r3, r0
 800a316:	d101      	bne.n	800a31c <memchr+0x10>
 800a318:	2300      	movs	r3, #0
 800a31a:	e003      	b.n	800a324 <memchr+0x18>
 800a31c:	781c      	ldrb	r4, [r3, #0]
 800a31e:	3001      	adds	r0, #1
 800a320:	428c      	cmp	r4, r1
 800a322:	d1f6      	bne.n	800a312 <memchr+0x6>
 800a324:	4618      	mov	r0, r3
 800a326:	bd10      	pop	{r4, pc}

0800a328 <memmove>:
 800a328:	4288      	cmp	r0, r1
 800a32a:	b510      	push	{r4, lr}
 800a32c:	eb01 0402 	add.w	r4, r1, r2
 800a330:	d902      	bls.n	800a338 <memmove+0x10>
 800a332:	4284      	cmp	r4, r0
 800a334:	4623      	mov	r3, r4
 800a336:	d807      	bhi.n	800a348 <memmove+0x20>
 800a338:	1e43      	subs	r3, r0, #1
 800a33a:	42a1      	cmp	r1, r4
 800a33c:	d008      	beq.n	800a350 <memmove+0x28>
 800a33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a346:	e7f8      	b.n	800a33a <memmove+0x12>
 800a348:	4402      	add	r2, r0
 800a34a:	4601      	mov	r1, r0
 800a34c:	428a      	cmp	r2, r1
 800a34e:	d100      	bne.n	800a352 <memmove+0x2a>
 800a350:	bd10      	pop	{r4, pc}
 800a352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a35a:	e7f7      	b.n	800a34c <memmove+0x24>

0800a35c <_malloc_usable_size_r>:
 800a35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a360:	1f18      	subs	r0, r3, #4
 800a362:	2b00      	cmp	r3, #0
 800a364:	bfbc      	itt	lt
 800a366:	580b      	ldrlt	r3, [r1, r0]
 800a368:	18c0      	addlt	r0, r0, r3
 800a36a:	4770      	bx	lr

0800a36c <expf>:
 800a36c:	b508      	push	{r3, lr}
 800a36e:	ed2d 8b02 	vpush	{d8}
 800a372:	eef0 8a40 	vmov.f32	s17, s0
 800a376:	f000 f82f 	bl	800a3d8 <__ieee754_expf>
 800a37a:	eeb0 8a40 	vmov.f32	s16, s0
 800a37e:	eeb0 0a68 	vmov.f32	s0, s17
 800a382:	f000 f919 	bl	800a5b8 <finitef>
 800a386:	b160      	cbz	r0, 800a3a2 <expf+0x36>
 800a388:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a3c8 <expf+0x5c>
 800a38c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a394:	dd0a      	ble.n	800a3ac <expf+0x40>
 800a396:	f7ff fb3b 	bl	8009a10 <__errno>
 800a39a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800a3cc <expf+0x60>
 800a39e:	2322      	movs	r3, #34	; 0x22
 800a3a0:	6003      	str	r3, [r0, #0]
 800a3a2:	eeb0 0a48 	vmov.f32	s0, s16
 800a3a6:	ecbd 8b02 	vpop	{d8}
 800a3aa:	bd08      	pop	{r3, pc}
 800a3ac:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a3d0 <expf+0x64>
 800a3b0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b8:	d5f3      	bpl.n	800a3a2 <expf+0x36>
 800a3ba:	f7ff fb29 	bl	8009a10 <__errno>
 800a3be:	2322      	movs	r3, #34	; 0x22
 800a3c0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800a3d4 <expf+0x68>
 800a3c4:	6003      	str	r3, [r0, #0]
 800a3c6:	e7ec      	b.n	800a3a2 <expf+0x36>
 800a3c8:	42b17180 	.word	0x42b17180
 800a3cc:	7f800000 	.word	0x7f800000
 800a3d0:	c2cff1b5 	.word	0xc2cff1b5
 800a3d4:	00000000 	.word	0x00000000

0800a3d8 <__ieee754_expf>:
 800a3d8:	ee10 2a10 	vmov	r2, s0
 800a3dc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a3e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a3e4:	d902      	bls.n	800a3ec <__ieee754_expf+0x14>
 800a3e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a3ea:	4770      	bx	lr
 800a3ec:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800a3f0:	d105      	bne.n	800a3fe <__ieee754_expf+0x26>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a52c <__ieee754_expf+0x154>
 800a3f8:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800a3fc:	4770      	bx	lr
 800a3fe:	484c      	ldr	r0, [pc, #304]	; (800a530 <__ieee754_expf+0x158>)
 800a400:	4282      	cmp	r2, r0
 800a402:	dd02      	ble.n	800a40a <__ieee754_expf+0x32>
 800a404:	2000      	movs	r0, #0
 800a406:	f000 b8d1 	b.w	800a5ac <__math_oflowf>
 800a40a:	2a00      	cmp	r2, #0
 800a40c:	da05      	bge.n	800a41a <__ieee754_expf+0x42>
 800a40e:	4a49      	ldr	r2, [pc, #292]	; (800a534 <__ieee754_expf+0x15c>)
 800a410:	4291      	cmp	r1, r2
 800a412:	d902      	bls.n	800a41a <__ieee754_expf+0x42>
 800a414:	2000      	movs	r0, #0
 800a416:	f000 b8c3 	b.w	800a5a0 <__math_uflowf>
 800a41a:	4a47      	ldr	r2, [pc, #284]	; (800a538 <__ieee754_expf+0x160>)
 800a41c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a420:	4291      	cmp	r1, r2
 800a422:	d952      	bls.n	800a4ca <__ieee754_expf+0xf2>
 800a424:	4a45      	ldr	r2, [pc, #276]	; (800a53c <__ieee754_expf+0x164>)
 800a426:	4291      	cmp	r1, r2
 800a428:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a42c:	d834      	bhi.n	800a498 <__ieee754_expf+0xc0>
 800a42e:	4944      	ldr	r1, [pc, #272]	; (800a540 <__ieee754_expf+0x168>)
 800a430:	4411      	add	r1, r2
 800a432:	ed91 7a00 	vldr	s14, [r1]
 800a436:	4943      	ldr	r1, [pc, #268]	; (800a544 <__ieee754_expf+0x16c>)
 800a438:	ee30 7a47 	vsub.f32	s14, s0, s14
 800a43c:	440a      	add	r2, r1
 800a43e:	edd2 7a00 	vldr	s15, [r2]
 800a442:	f1c3 0201 	rsb	r2, r3, #1
 800a446:	1ad2      	subs	r2, r2, r3
 800a448:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a44c:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a450:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800a548 <__ieee754_expf+0x170>
 800a454:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a54c <__ieee754_expf+0x174>
 800a458:	eee6 6a05 	vfma.f32	s13, s12, s10
 800a45c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800a550 <__ieee754_expf+0x178>
 800a460:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a464:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a554 <__ieee754_expf+0x17c>
 800a468:	eee5 6a06 	vfma.f32	s13, s10, s12
 800a46c:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800a558 <__ieee754_expf+0x180>
 800a470:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a474:	eef0 6a40 	vmov.f32	s13, s0
 800a478:	eee5 6a46 	vfms.f32	s13, s10, s12
 800a47c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a480:	ee20 5a26 	vmul.f32	s10, s0, s13
 800a484:	bb92      	cbnz	r2, 800a4ec <__ieee754_expf+0x114>
 800a486:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a48a:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a48e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a492:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800a496:	4770      	bx	lr
 800a498:	4b30      	ldr	r3, [pc, #192]	; (800a55c <__ieee754_expf+0x184>)
 800a49a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a560 <__ieee754_expf+0x188>
 800a49e:	4413      	add	r3, r2
 800a4a0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a564 <__ieee754_expf+0x18c>
 800a4a4:	edd3 7a00 	vldr	s15, [r3]
 800a4a8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a4ac:	eeb0 7a40 	vmov.f32	s14, s0
 800a4b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4b4:	ee17 2a90 	vmov	r2, s15
 800a4b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4bc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a4c0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a568 <__ieee754_expf+0x190>
 800a4c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a4c8:	e7be      	b.n	800a448 <__ieee754_expf+0x70>
 800a4ca:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800a4ce:	d20b      	bcs.n	800a4e8 <__ieee754_expf+0x110>
 800a4d0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a56c <__ieee754_expf+0x194>
 800a4d4:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a4d8:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e0:	dd02      	ble.n	800a4e8 <__ieee754_expf+0x110>
 800a4e2:	ee30 0a25 	vadd.f32	s0, s0, s11
 800a4e6:	4770      	bx	lr
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	e7af      	b.n	800a44c <__ieee754_expf+0x74>
 800a4ec:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a4f0:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800a4f4:	bfb8      	it	lt
 800a4f6:	3264      	addlt	r2, #100	; 0x64
 800a4f8:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800a4fc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a500:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a504:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800a508:	ee17 3a90 	vmov	r3, s15
 800a50c:	bfb5      	itete	lt
 800a50e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800a570 <__ieee754_expf+0x198>
 800a512:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a516:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a51a:	ee00 3a10 	vmovge	s0, r3
 800a51e:	bfbc      	itt	lt
 800a520:	ee00 3a10 	vmovlt	s0, r3
 800a524:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	00000000 	.word	0x00000000
 800a530:	42b17217 	.word	0x42b17217
 800a534:	42cff1b5 	.word	0x42cff1b5
 800a538:	3eb17218 	.word	0x3eb17218
 800a53c:	3f851591 	.word	0x3f851591
 800a540:	080afffc 	.word	0x080afffc
 800a544:	080b0004 	.word	0x080b0004
 800a548:	3331bb4c 	.word	0x3331bb4c
 800a54c:	b5ddea0e 	.word	0xb5ddea0e
 800a550:	388ab355 	.word	0x388ab355
 800a554:	bb360b61 	.word	0xbb360b61
 800a558:	3e2aaaab 	.word	0x3e2aaaab
 800a55c:	080afff4 	.word	0x080afff4
 800a560:	3fb8aa3b 	.word	0x3fb8aa3b
 800a564:	3f317180 	.word	0x3f317180
 800a568:	3717f7d1 	.word	0x3717f7d1
 800a56c:	7149f2ca 	.word	0x7149f2ca
 800a570:	0d800000 	.word	0x0d800000

0800a574 <with_errnof>:
 800a574:	b513      	push	{r0, r1, r4, lr}
 800a576:	4604      	mov	r4, r0
 800a578:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a57c:	f7ff fa48 	bl	8009a10 <__errno>
 800a580:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a584:	6004      	str	r4, [r0, #0]
 800a586:	b002      	add	sp, #8
 800a588:	bd10      	pop	{r4, pc}

0800a58a <xflowf>:
 800a58a:	b130      	cbz	r0, 800a59a <xflowf+0x10>
 800a58c:	eef1 7a40 	vneg.f32	s15, s0
 800a590:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a594:	2022      	movs	r0, #34	; 0x22
 800a596:	f7ff bfed 	b.w	800a574 <with_errnof>
 800a59a:	eef0 7a40 	vmov.f32	s15, s0
 800a59e:	e7f7      	b.n	800a590 <xflowf+0x6>

0800a5a0 <__math_uflowf>:
 800a5a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a5a8 <__math_uflowf+0x8>
 800a5a4:	f7ff bff1 	b.w	800a58a <xflowf>
 800a5a8:	10000000 	.word	0x10000000

0800a5ac <__math_oflowf>:
 800a5ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a5b4 <__math_oflowf+0x8>
 800a5b0:	f7ff bfeb 	b.w	800a58a <xflowf>
 800a5b4:	70000000 	.word	0x70000000

0800a5b8 <finitef>:
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a5be:	9801      	ldr	r0, [sp, #4]
 800a5c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a5c4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a5c8:	bfac      	ite	ge
 800a5ca:	2000      	movge	r0, #0
 800a5cc:	2001      	movlt	r0, #1
 800a5ce:	b002      	add	sp, #8
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <_init>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	bf00      	nop
 800a5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5da:	bc08      	pop	{r3}
 800a5dc:	469e      	mov	lr, r3
 800a5de:	4770      	bx	lr

0800a5e0 <_fini>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	bf00      	nop
 800a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e6:	bc08      	pop	{r3}
 800a5e8:	469e      	mov	lr, r3
 800a5ea:	4770      	bx	lr
